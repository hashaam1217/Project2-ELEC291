0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Tue Apr 02 13:10:42 2024
0000              5   ;--------------------------------------------------------
                  5   $name MPU
                  6   $optc51 --model-small
0000              8            R_DSEG    segment data
0000              9            R_CSEG    segment code
0000             10            R_BSEG    segment bit
0000             11            R_XSEG    segment xdata
0000             12            R_PSEG    segment xdata
0000             13            R_ISEG    segment idata
0000             14            R_OSEG    segment data overlay
0000             15            BIT_BANK  segment data overlay
0000             16            R_HOME    segment code
0000             17            R_GSINIT  segment code
0000             18            R_IXSEG   segment xdata
0000             19            R_CONST   segment code
0000             20            R_XINIT   segment code
0000             21            R_DINIT   segment code
0000             22   
0000             23   ;--------------------------------------------------------
0000             24   ; Public variables in this module
0000             25   ;--------------------------------------------------------
0000             26            public _main
0000             27            public _Test_I2C
0000             28            public _MPU6050_Init
0000             29            public _I2C_Read
0000             30            public _I2C_Write
0000             31            public _I2C_Init
0000             32            public _TIMER0_Init
0000             33            public _waitms
0000             34            public _Timer3us
0000             35            public __c51_external_startup
0000             36            public _I2C_Write_PARM_2
0000             37            public _overflow_count
0000             38   ;--------------------------------------------------------
0000             39   ; Special Function Registers
0000             40   ;--------------------------------------------------------
0000             41   _ACC            DATA 0xe0
0000             42   _ADC0ASAH       DATA 0xb6
0000             43   _ADC0ASAL       DATA 0xb5
0000             44   _ADC0ASCF       DATA 0xa1
0000             45   _ADC0ASCT       DATA 0xc7
0000             46   _ADC0CF0        DATA 0xbc
0000             47   _ADC0CF1        DATA 0xb9
0000             48   _ADC0CF2        DATA 0xdf
0000             49   _ADC0CN0        DATA 0xe8
0000             50   _ADC0CN1        DATA 0xb2
0000             51   _ADC0CN2        DATA 0xb3
0000             52   _ADC0GTH        DATA 0xc4
0000             53   _ADC0GTL        DATA 0xc3
0000             54   _ADC0H          DATA 0xbe
0000             55   _ADC0L          DATA 0xbd
0000             56   _ADC0LTH        DATA 0xc6
0000             57   _ADC0LTL        DATA 0xc5
0000             58   _ADC0MX         DATA 0xbb
0000             59   _B              DATA 0xf0
0000             60   _CKCON0         DATA 0x8e
0000             61   _CKCON1         DATA 0xa6
0000             62   _CLEN0          DATA 0xc6
0000             63   _CLIE0          DATA 0xc7
0000             64   _CLIF0          DATA 0xe8
0000             65   _CLKSEL         DATA 0xa9
0000             66   _CLOUT0         DATA 0xd1
0000             67   _CLU0CF         DATA 0xb1
0000             68   _CLU0FN         DATA 0xaf
0000             69   _CLU0MX         DATA 0x84
0000             70   _CLU1CF         DATA 0xb3
0000             71   _CLU1FN         DATA 0xb2
0000             72   _CLU1MX         DATA 0x85
0000             73   _CLU2CF         DATA 0xb6
0000             74   _CLU2FN         DATA 0xb5
0000             75   _CLU2MX         DATA 0x91
0000             76   _CLU3CF         DATA 0xbf
0000             77   _CLU3FN         DATA 0xbe
0000             78   _CLU3MX         DATA 0xae
0000             79   _CMP0CN0        DATA 0x9b
0000             80   _CMP0CN1        DATA 0x99
0000             81   _CMP0MD         DATA 0x9d
0000             82   _CMP0MX         DATA 0x9f
0000             83   _CMP1CN0        DATA 0xbf
0000             84   _CMP1CN1        DATA 0xac
0000             85   _CMP1MD         DATA 0xab
0000             86   _CMP1MX         DATA 0xaa
0000             87   _CRC0CN0        DATA 0xce
0000             88   _CRC0CN1        DATA 0x86
0000             89   _CRC0CNT        DATA 0xd3
0000             90   _CRC0DAT        DATA 0xcb
0000             91   _CRC0FLIP       DATA 0xcf
0000             92   _CRC0IN         DATA 0xca
0000             93   _CRC0ST         DATA 0xd2
0000             94   _DAC0CF0        DATA 0x91
0000             95   _DAC0CF1        DATA 0x92
0000             96   _DAC0H          DATA 0x85
0000             97   _DAC0L          DATA 0x84
0000             98   _DAC1CF0        DATA 0x93
0000             99   _DAC1CF1        DATA 0x94
0000            100   _DAC1H          DATA 0x8a
0000            101   _DAC1L          DATA 0x89
0000            102   _DAC2CF0        DATA 0x95
0000            103   _DAC2CF1        DATA 0x96
0000            104   _DAC2H          DATA 0x8c
0000            105   _DAC2L          DATA 0x8b
0000            106   _DAC3CF0        DATA 0x9a
0000            107   _DAC3CF1        DATA 0x9c
0000            108   _DAC3H          DATA 0x8e
0000            109   _DAC3L          DATA 0x8d
0000            110   _DACGCF0        DATA 0x88
0000            111   _DACGCF1        DATA 0x98
0000            112   _DACGCF2        DATA 0xa2
0000            113   _DERIVID        DATA 0xad
0000            114   _DEVICEID       DATA 0xb5
0000            115   _DPH            DATA 0x83
0000            116   _DPL            DATA 0x82
0000            117   _EIE1           DATA 0xe6
0000            118   _EIE2           DATA 0xf3
0000            119   _EIP1           DATA 0xbb
0000            120   _EIP1H          DATA 0xee
0000            121   _EIP2           DATA 0xed
0000            122   _EIP2H          DATA 0xf6
0000            123   _EMI0CN         DATA 0xe7
0000            124   _FLKEY          DATA 0xb7
0000            125   _HFO0CAL        DATA 0xc7
0000            126   _HFO1CAL        DATA 0xd6
0000            127   _HFOCN          DATA 0xef
0000            128   _I2C0ADM        DATA 0xff
0000            129   _I2C0CN0        DATA 0xba
0000            130   _I2C0DIN        DATA 0xbc
0000            131   _I2C0DOUT       DATA 0xbb
0000            132   _I2C0FCN0       DATA 0xad
0000            133   _I2C0FCN1       DATA 0xab
0000            134   _I2C0FCT        DATA 0xf5
0000            135   _I2C0SLAD       DATA 0xbd
0000            136   _I2C0STAT       DATA 0xb9
0000            137   _IE             DATA 0xa8
0000            138   _IP             DATA 0xb8
0000            139   _IPH            DATA 0xf2
0000            140   _IT01CF         DATA 0xe4
0000            141   _LFO0CN         DATA 0xb1
0000            142   _P0             DATA 0x80
0000            143   _P0MASK         DATA 0xfe
0000            144   _P0MAT          DATA 0xfd
0000            145   _P0MDIN         DATA 0xf1
0000            146   _P0MDOUT        DATA 0xa4
0000            147   _P0SKIP         DATA 0xd4
0000            148   _P1             DATA 0x90
0000            149   _P1MASK         DATA 0xee
0000            150   _P1MAT          DATA 0xed
0000            151   _P1MDIN         DATA 0xf2
0000            152   _P1MDOUT        DATA 0xa5
0000            153   _P1SKIP         DATA 0xd5
0000            154   _P2             DATA 0xa0
0000            155   _P2MASK         DATA 0xfc
0000            156   _P2MAT          DATA 0xfb
0000            157   _P2MDIN         DATA 0xf3
0000            158   _P2MDOUT        DATA 0xa6
0000            159   _P2SKIP         DATA 0xcc
0000            160   _P3             DATA 0xb0
0000            161   _P3MDIN         DATA 0xf4
0000            162   _P3MDOUT        DATA 0x9c
0000            163   _PCA0CENT       DATA 0x9e
0000            164   _PCA0CLR        DATA 0x9c
0000            165   _PCA0CN0        DATA 0xd8
0000            166   _PCA0CPH0       DATA 0xfc
0000            167   _PCA0CPH1       DATA 0xea
0000            168   _PCA0CPH2       DATA 0xec
0000            169   _PCA0CPH3       DATA 0xf5
0000            170   _PCA0CPH4       DATA 0x85
0000            171   _PCA0CPH5       DATA 0xde
0000            172   _PCA0CPL0       DATA 0xfb
0000            173   _PCA0CPL1       DATA 0xe9
0000            174   _PCA0CPL2       DATA 0xeb
0000            175   _PCA0CPL3       DATA 0xf4
0000            176   _PCA0CPL4       DATA 0x84
0000            177   _PCA0CPL5       DATA 0xdd
0000            178   _PCA0CPM0       DATA 0xda
0000            179   _PCA0CPM1       DATA 0xdb
0000            180   _PCA0CPM2       DATA 0xdc
0000            181   _PCA0CPM3       DATA 0xae
0000            182   _PCA0CPM4       DATA 0xaf
0000            183   _PCA0CPM5       DATA 0xcc
0000            184   _PCA0H          DATA 0xfa
0000            185   _PCA0L          DATA 0xf9
0000            186   _PCA0MD         DATA 0xd9
0000            187   _PCA0POL        DATA 0x96
0000            188   _PCA0PWM        DATA 0xf7
0000            189   _PCON0          DATA 0x87
0000            190   _PCON1          DATA 0xcd
0000            191   _PFE0CN         DATA 0xc1
0000            192   _PRTDRV         DATA 0xf6
0000            193   _PSCTL          DATA 0x8f
0000            194   _PSTAT0         DATA 0xaa
0000            195   _PSW            DATA 0xd0
0000            196   _REF0CN         DATA 0xd1
0000            197   _REG0CN         DATA 0xc9
0000            198   _REVID          DATA 0xb6
0000            199   _RSTSRC         DATA 0xef
0000            200   _SBCON1         DATA 0x94
0000            201   _SBRLH1         DATA 0x96
0000            202   _SBRLL1         DATA 0x95
0000            203   _SBUF           DATA 0x99
0000            204   _SBUF0          DATA 0x99
0000            205   _SBUF1          DATA 0x92
0000            206   _SCON           DATA 0x98
0000            207   _SCON0          DATA 0x98
0000            208   _SCON1          DATA 0xc8
0000            209   _SFRPAGE        DATA 0xa7
0000            210   _SFRPGCN        DATA 0xbc
0000            211   _SFRSTACK       DATA 0xd7
0000            212   _SMB0ADM        DATA 0xd6
0000            213   _SMB0ADR        DATA 0xd7
0000            214   _SMB0CF         DATA 0xc1
0000            215   _SMB0CN0        DATA 0xc0
0000            216   _SMB0DAT        DATA 0xc2
0000            217   _SMB0FCN0       DATA 0xc3
0000            218   _SMB0FCN1       DATA 0xc4
0000            219   _SMB0FCT        DATA 0xef
0000            220   _SMB0RXLN       DATA 0xc5
0000            221   _SMB0TC         DATA 0xac
0000            222   _SMOD1          DATA 0x93
0000            223   _SP             DATA 0x81
0000            224   _SPI0CFG        DATA 0xa1
0000            225   _SPI0CKR        DATA 0xa2
0000            226   _SPI0CN0        DATA 0xf8
0000            227   _SPI0DAT        DATA 0xa3
0000            228   _SPI0FCN0       DATA 0x9a
0000            229   _SPI0FCN1       DATA 0x9b
0000            230   _SPI0FCT        DATA 0xf7
0000            231   _SPI0PCF        DATA 0xdf
0000            232   _TCON           DATA 0x88
0000            233   _TH0            DATA 0x8c
0000            234   _TH1            DATA 0x8d
0000            235   _TL0            DATA 0x8a
0000            236   _TL1            DATA 0x8b
0000            237   _TMOD           DATA 0x89
0000            238   _TMR2CN0        DATA 0xc8
0000            239   _TMR2CN1        DATA 0xfd
0000            240   _TMR2H          DATA 0xcf
0000            241   _TMR2L          DATA 0xce
0000            242   _TMR2RLH        DATA 0xcb
0000            243   _TMR2RLL        DATA 0xca
0000            244   _TMR3CN0        DATA 0x91
0000            245   _TMR3CN1        DATA 0xfe
0000            246   _TMR3H          DATA 0x95
0000            247   _TMR3L          DATA 0x94
0000            248   _TMR3RLH        DATA 0x93
0000            249   _TMR3RLL        DATA 0x92
0000            250   _TMR4CN0        DATA 0x98
0000            251   _TMR4CN1        DATA 0xff
0000            252   _TMR4H          DATA 0xa5
0000            253   _TMR4L          DATA 0xa4
0000            254   _TMR4RLH        DATA 0xa3
0000            255   _TMR4RLL        DATA 0xa2
0000            256   _TMR5CN0        DATA 0xc0
0000            257   _TMR5CN1        DATA 0xf1
0000            258   _TMR5H          DATA 0xd5
0000            259   _TMR5L          DATA 0xd4
0000            260   _TMR5RLH        DATA 0xd3
0000            261   _TMR5RLL        DATA 0xd2
0000            262   _UART0PCF       DATA 0xd9
0000            263   _UART1FCN0      DATA 0x9d
0000            264   _UART1FCN1      DATA 0xd8
0000            265   _UART1FCT       DATA 0xfa
0000            266   _UART1LIN       DATA 0x9e
0000            267   _UART1PCF       DATA 0xda
0000            268   _VDM0CN         DATA 0xff
0000            269   _WDTCN          DATA 0x97
0000            270   _XBR0           DATA 0xe1
0000            271   _XBR1           DATA 0xe2
0000            272   _XBR2           DATA 0xe3
0000            273   _XOSC0CN        DATA 0x86
0000            274   _DPTR           DATA 0x8382
0000            275   _TMR2RL         DATA 0xcbca
0000            276   _TMR3RL         DATA 0x9392
0000            277   _TMR4RL         DATA 0xa3a2
0000            278   _TMR5RL         DATA 0xd3d2
0000            279   _TMR0           DATA 0x8c8a
0000            280   _TMR1           DATA 0x8d8b
0000            281   _TMR2           DATA 0xcfce
0000            282   _TMR3           DATA 0x9594
0000            283   _TMR4           DATA 0xa5a4
0000            284   _TMR5           DATA 0xd5d4
0000            285   _SBRL1          DATA 0x9695
0000            286   _PCA0           DATA 0xfaf9
0000            287   _PCA0CP0        DATA 0xfcfb
0000            288   _PCA0CP1        DATA 0xeae9
0000            289   _PCA0CP2        DATA 0xeceb
0000            290   _PCA0CP3        DATA 0xf5f4
0000            291   _PCA0CP4        DATA 0x8584
0000            292   _PCA0CP5        DATA 0xdedd
0000            293   _ADC0ASA        DATA 0xb6b5
0000            294   _ADC0GT         DATA 0xc4c3
0000            295   _ADC0           DATA 0xbebd
0000            296   _ADC0LT         DATA 0xc6c5
0000            297   _DAC0           DATA 0x8584
0000            298   _DAC1           DATA 0x8a89
0000            299   _DAC2           DATA 0x8c8b
0000            300   _DAC3           DATA 0x8e8d
0000            301   ;--------------------------------------------------------
0000            302   ; special function bits
0000            303   ;--------------------------------------------------------
0000            304   _ACC_0          BIT 0xe0
0000            305   _ACC_1          BIT 0xe1
0000            306   _ACC_2          BIT 0xe2
0000            307   _ACC_3          BIT 0xe3
0000            308   _ACC_4          BIT 0xe4
0000            309   _ACC_5          BIT 0xe5
0000            310   _ACC_6          BIT 0xe6
0000            311   _ACC_7          BIT 0xe7
0000            312   _TEMPE          BIT 0xe8
0000            313   _ADGN0          BIT 0xe9
0000            314   _ADGN1          BIT 0xea
0000            315   _ADWINT         BIT 0xeb
0000            316   _ADBUSY         BIT 0xec
0000            317   _ADINT          BIT 0xed
0000            318   _IPOEN          BIT 0xee
0000            319   _ADEN           BIT 0xef
0000            320   _B_0            BIT 0xf0
0000            321   _B_1            BIT 0xf1
0000            322   _B_2            BIT 0xf2
0000            323   _B_3            BIT 0xf3
0000            324   _B_4            BIT 0xf4
0000            325   _B_5            BIT 0xf5
0000            326   _B_6            BIT 0xf6
0000            327   _B_7            BIT 0xf7
0000            328   _C0FIF          BIT 0xe8
0000            329   _C0RIF          BIT 0xe9
0000            330   _C1FIF          BIT 0xea
0000            331   _C1RIF          BIT 0xeb
0000            332   _C2FIF          BIT 0xec
0000            333   _C2RIF          BIT 0xed
0000            334   _C3FIF          BIT 0xee
0000            335   _C3RIF          BIT 0xef
0000            336   _D1SRC0         BIT 0x88
0000            337   _D1SRC1         BIT 0x89
0000            338   _D1AMEN         BIT 0x8a
0000            339   _D01REFSL       BIT 0x8b
0000            340   _D3SRC0         BIT 0x8c
0000            341   _D3SRC1         BIT 0x8d
0000            342   _D3AMEN         BIT 0x8e
0000            343   _D23REFSL       BIT 0x8f
0000            344   _D0UDIS         BIT 0x98
0000            345   _D1UDIS         BIT 0x99
0000            346   _D2UDIS         BIT 0x9a
0000            347   _D3UDIS         BIT 0x9b
0000            348   _EX0            BIT 0xa8
0000            349   _ET0            BIT 0xa9
0000            350   _EX1            BIT 0xaa
0000            351   _ET1            BIT 0xab
0000            352   _ES0            BIT 0xac
0000            353   _ET2            BIT 0xad
0000            354   _ESPI0          BIT 0xae
0000            355   _EA             BIT 0xaf
0000            356   _PX0            BIT 0xb8
0000            357   _PT0            BIT 0xb9
0000            358   _PX1            BIT 0xba
0000            359   _PT1            BIT 0xbb
0000            360   _PS0            BIT 0xbc
0000            361   _PT2            BIT 0xbd
0000            362   _PSPI0          BIT 0xbe
0000            363   _P0_0           BIT 0x80
0000            364   _P0_1           BIT 0x81
0000            365   _P0_2           BIT 0x82
0000            366   _P0_3           BIT 0x83
0000            367   _P0_4           BIT 0x84
0000            368   _P0_5           BIT 0x85
0000            369   _P0_6           BIT 0x86
0000            370   _P0_7           BIT 0x87
0000            371   _P1_0           BIT 0x90
0000            372   _P1_1           BIT 0x91
0000            373   _P1_2           BIT 0x92
0000            374   _P1_3           BIT 0x93
0000            375   _P1_4           BIT 0x94
0000            376   _P1_5           BIT 0x95
0000            377   _P1_6           BIT 0x96
0000            378   _P1_7           BIT 0x97
0000            379   _P2_0           BIT 0xa0
0000            380   _P2_1           BIT 0xa1
0000            381   _P2_2           BIT 0xa2
0000            382   _P2_3           BIT 0xa3
0000            383   _P2_4           BIT 0xa4
0000            384   _P2_5           BIT 0xa5
0000            385   _P2_6           BIT 0xa6
0000            386   _P3_0           BIT 0xb0
0000            387   _P3_1           BIT 0xb1
0000            388   _P3_2           BIT 0xb2
0000            389   _P3_3           BIT 0xb3
0000            390   _P3_4           BIT 0xb4
0000            391   _P3_7           BIT 0xb7
0000            392   _CCF0           BIT 0xd8
0000            393   _CCF1           BIT 0xd9
0000            394   _CCF2           BIT 0xda
0000            395   _CCF3           BIT 0xdb
0000            396   _CCF4           BIT 0xdc
0000            397   _CCF5           BIT 0xdd
0000            398   _CR             BIT 0xde
0000            399   _CF             BIT 0xdf
0000            400   _PARITY         BIT 0xd0
0000            401   _F1             BIT 0xd1
0000            402   _OV             BIT 0xd2
0000            403   _RS0            BIT 0xd3
0000            404   _RS1            BIT 0xd4
0000            405   _F0             BIT 0xd5
0000            406   _AC             BIT 0xd6
0000            407   _CY             BIT 0xd7
0000            408   _RI             BIT 0x98
0000            409   _TI             BIT 0x99
0000            410   _RB8            BIT 0x9a
0000            411   _TB8            BIT 0x9b
0000            412   _REN            BIT 0x9c
0000            413   _CE             BIT 0x9d
0000            414   _SMODE          BIT 0x9e
0000            415   _RI1            BIT 0xc8
0000            416   _TI1            BIT 0xc9
0000            417   _RBX1           BIT 0xca
0000            418   _TBX1           BIT 0xcb
0000            419   _REN1           BIT 0xcc
0000            420   _PERR1          BIT 0xcd
0000            421   _OVR1           BIT 0xce
0000            422   _SI             BIT 0xc0
0000            423   _ACK            BIT 0xc1
0000            424   _ARBLOST        BIT 0xc2
0000            425   _ACKRQ          BIT 0xc3
0000            426   _STO            BIT 0xc4
0000            427   _STA            BIT 0xc5
0000            428   _TXMODE         BIT 0xc6
0000            429   _MASTER         BIT 0xc7
0000            430   _SPIEN          BIT 0xf8
0000            431   _TXNF           BIT 0xf9
0000            432   _NSSMD0         BIT 0xfa
0000            433   _NSSMD1         BIT 0xfb
0000            434   _RXOVRN         BIT 0xfc
0000            435   _MODF           BIT 0xfd
0000            436   _WCOL           BIT 0xfe
0000            437   _SPIF           BIT 0xff
0000            438   _IT0            BIT 0x88
0000            439   _IE0            BIT 0x89
0000            440   _IT1            BIT 0x8a
0000            441   _IE1            BIT 0x8b
0000            442   _TR0            BIT 0x8c
0000            443   _TF0            BIT 0x8d
0000            444   _TR1            BIT 0x8e
0000            445   _TF1            BIT 0x8f
0000            446   _T2XCLK0        BIT 0xc8
0000            447   _T2XCLK1        BIT 0xc9
0000            448   _TR2            BIT 0xca
0000            449   _T2SPLIT        BIT 0xcb
0000            450   _TF2CEN         BIT 0xcc
0000            451   _TF2LEN         BIT 0xcd
0000            452   _TF2L           BIT 0xce
0000            453   _TF2H           BIT 0xcf
0000            454   _T4XCLK0        BIT 0x98
0000            455   _T4XCLK1        BIT 0x99
0000            456   _TR4            BIT 0x9a
0000            457   _T4SPLIT        BIT 0x9b
0000            458   _TF4CEN         BIT 0x9c
0000            459   _TF4LEN         BIT 0x9d
0000            460   _TF4L           BIT 0x9e
0000            461   _TF4H           BIT 0x9f
0000            462   _T5XCLK0        BIT 0xc0
0000            463   _T5XCLK1        BIT 0xc1
0000            464   _TR5            BIT 0xc2
0000            465   _T5SPLIT        BIT 0xc3
0000            466   _TF5CEN         BIT 0xc4
0000            467   _TF5LEN         BIT 0xc5
0000            468   _TF5L           BIT 0xc6
0000            469   _TF5H           BIT 0xc7
0000            470   _RIE            BIT 0xd8
0000            471   _RXTO0          BIT 0xd9
0000            472   _RXTO1          BIT 0xda
0000            473   _RFRQ           BIT 0xdb
0000            474   _TIE            BIT 0xdc
0000            475   _TXHOLD         BIT 0xdd
0000            476   _TXNF1          BIT 0xde
0000            477   _TFRQ           BIT 0xdf
0000            478   ;--------------------------------------------------------
0000            479   ; overlayable register banks
0000            480   ;--------------------------------------------------------
0000            481            rbank0 segment data overlay
0000            482   ;--------------------------------------------------------
0000            483   ; internal ram data
0000            484   ;--------------------------------------------------------
0000            485            rseg R_DSEG
0000            486   _overflow_count:
0000            487            ds 1
0001            488   _I2C_Write_PARM_2:
0001            489            ds 1
0002            490   ;--------------------------------------------------------
0002            491   ; overlayable items in internal ram 
0002            492   ;--------------------------------------------------------
0000            493            rseg    R_OSEG
0000            494   ;--------------------------------------------------------
0000            495   ; indirectly addressable internal ram data
0000            496   ;--------------------------------------------------------
0000            497            rseg R_ISEG
0000            498   ;--------------------------------------------------------
0000            499   ; absolute internal ram data
0000            500   ;--------------------------------------------------------
0000            501            DSEG
0000            502   ;--------------------------------------------------------
0000            503   ; bit data
0000            504   ;--------------------------------------------------------
0000            505            rseg R_BSEG
0000            506   ;--------------------------------------------------------
0000            507   ; paged external ram data
0000            508   ;--------------------------------------------------------
0000            509            rseg R_PSEG
0000            510   ;--------------------------------------------------------
0000            511   ; external ram data
0000            512   ;--------------------------------------------------------
0000            513            rseg R_XSEG
0000            514   ;--------------------------------------------------------
0000            515   ; absolute external ram data
0000            516   ;--------------------------------------------------------
0000            517            XSEG
0000            518   ;--------------------------------------------------------
0000            519   ; external initialized ram data
0000            520   ;--------------------------------------------------------
0000            521            rseg R_IXSEG
0000            522            rseg R_HOME
0000            523            rseg R_GSINIT
0000            524            rseg R_CSEG
0000            525   ;--------------------------------------------------------
0000            526   ; Reset entry point and interrupt vectors
0000            527   ;--------------------------------------------------------
0000            528            CSEG at 0x0000
0000 020000     529            ljmp    _crt0
0003            530   ;--------------------------------------------------------
0003            531   ; global & static initialisations
0003            532   ;--------------------------------------------------------
0000            533            rseg R_HOME
0000            534            rseg R_GSINIT
0000            535            rseg R_GSINIT
0000            536   ;--------------------------------------------------------
0000            537   ; data variables initialization
0000            538   ;--------------------------------------------------------
0000            539            rseg R_DINIT
0000            540            ; The linker places a 'ret' at the end of segment R_DINIT.
0000            541   ;--------------------------------------------------------
0000            542   ; code
0000            543   ;--------------------------------------------------------
0000            544            rseg R_CSEG
0000            545   ;------------------------------------------------------------
0000            546   ;Allocation info for local variables in function '_c51_external_startup'
0000            547   ;------------------------------------------------------------
0000            548   ;------------------------------------------------------------
0000            549   ;        MPU.c:17: char _c51_external_startup (void)
0000            550   ;        -----------------------------------------
0000            551   ;         function _c51_external_startup
0000            552   ;        -----------------------------------------
0000            553   __c51_external_startup:
0000            554            using   0
0000            555   ;        MPU.c:20: SFRPAGE = 0x00;
0000 75A700     556            mov     _SFRPAGE,#0x00
0003            557   ;        MPU.c:21: WDTCN = 0xDE; //First key
0003 7597DE     558            mov     _WDTCN,#0xDE
0006            559   ;        MPU.c:22: WDTCN = 0xAD; //Second key
0006 7597AD     560            mov     _WDTCN,#0xAD
0009            561   ;        MPU.c:24: VDM0CN |= 0x80;
0009 43FF80     562            orl     _VDM0CN,#0x80
000C            563   ;        MPU.c:25: RSTSRC = 0x02;
000C 75EF02     564            mov     _RSTSRC,#0x02
000F            565   ;        MPU.c:32: SFRPAGE = 0x10;
000F 75A710     566            mov     _SFRPAGE,#0x10
0012            567   ;        MPU.c:33: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     568            mov     _PFE0CN,#0x20
0015            569   ;        MPU.c:34: SFRPAGE = 0x00;
0015 75A700     570            mov     _SFRPAGE,#0x00
0018            571   ;        MPU.c:55: CLKSEL = 0x00;
0018 75A900     572            mov     _CLKSEL,#0x00
001B            573   ;        MPU.c:56: CLKSEL = 0x00;
001B 75A900     574            mov     _CLKSEL,#0x00
001E            575   ;        MPU.c:57: while ((CLKSEL & 0x80) == 0);
001E            576   L002001?:
001E E5A9       577            mov     a,_CLKSEL
0020 30E7B0     578            jnb     acc.7,L002001?
0023            579   ;        MPU.c:58: CLKSEL = 0x03;
0023 75A903     580            mov     _CLKSEL,#0x03
0026            581   ;        MPU.c:59: CLKSEL = 0x03;
0026 75A903     582            mov     _CLKSEL,#0x03
0029            583   ;        MPU.c:60: while ((CLKSEL & 0x80) == 0);
0029            584   L002004?:
0029 E5A9       585            mov     a,_CLKSEL
002B 30E730     586            jnb     acc.7,L002004?
002E            587   ;        MPU.c:65: P0MDOUT |= 0x10; // Enable UART0 TX as push-pull output
002E 43A410     588            orl     _P0MDOUT,#0x10
0031            589   ;        MPU.c:66: XBR0     = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)                     
0031 75E101     590            mov     _XBR0,#0x01
0034            591   ;        MPU.c:67: XBR1     = 0X00;
0034 75E200     592            mov     _XBR1,#0x00
0037            593   ;        MPU.c:68: XBR2     = 0x40; // Enable crossbar and weak pull-ups
0037 75E340     594            mov     _XBR2,#0x40
003A            595   ;        MPU.c:74: SCON0 = 0x10;
003A 759810     596            mov     _SCON0,#0x10
003D            597   ;        MPU.c:75: CKCON0 |= 0b_0000_0000 ; // Timer 1 uses the system clock divided by 12.
003D 858E8E     598            mov     _CKCON0,_CKCON0
0040            599   ;        MPU.c:76: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
0040 758DE6     600            mov     _TH1,#0xE6
0043            601   ;        MPU.c:77: TL1 = TH1;      // Init Timer1
0043 858D8B     602            mov     _TL1,_TH1
0046            603   ;        MPU.c:78: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0046 53890F     604            anl     _TMOD,#0x0F
0049            605   ;        MPU.c:79: TMOD |=  0x20;
0049 438920     606            orl     _TMOD,#0x20
004C            607   ;        MPU.c:80: TR1 = 1; // START Timer1
004C D28E       608            setb    _TR1
004E            609   ;        MPU.c:81: TI = 1;  // Indicate TX0 ready
004E D299       610            setb    _TI
0050            611   ;        MPU.c:83: return 0;
0050 758200     612            mov     dpl,#0x00
0053 22         613            ret
0054            614   ;------------------------------------------------------------
0054            615   ;Allocation info for local variables in function 'Timer3us'
0054            616   ;------------------------------------------------------------
0054            617   ;us                        Allocated to registers r2 
0054            618   ;i                         Allocated to registers r3 
0054            619   ;------------------------------------------------------------
0054            620   ;        MPU.c:87: void Timer3us(unsigned char us)
0054            621   ;        -----------------------------------------
0054            622   ;         function Timer3us
0054            623   ;        -----------------------------------------
0054            624   _Timer3us:
0054 AA82       625            mov     r2,dpl
0056            626   ;        MPU.c:92: CKCON0|=0b_0100_0000;
0056 438E40     627            orl     _CKCON0,#0x40
0059            628   ;        MPU.c:94: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0059 7592B8     629            mov     _TMR3RL,#0xB8
005C 7593FF     630            mov     (_TMR3RL >> 8),#0xFF
005F            631   ;        MPU.c:95: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
005F 859294     632            mov     _TMR3,_TMR3RL
0062 859395     633            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
0065            634   ;        MPU.c:97: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
0065 759104     635            mov     _TMR3CN0,#0x04
0068            636   ;        MPU.c:98: for (i = 0; i < us; i++)       // Count <us> overflows
0068 7B00       637            mov     r3,#0x00
006A            638   L003004?:
006A C3         639            clr     c
006B EB         640            mov     a,r3
006C 9A         641            subb    a,r2
006D 5000       642            jnc     L003007?
006F            643   ;        MPU.c:100: while (!(TMR3CN0 & 0x80));  // Wait for overflow
006F            644   L003001?:
006F E591       645            mov     a,_TMR3CN0
0071 30E730     646            jnb     acc.7,L003001?
0074            647   ;        MPU.c:101: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
0074 53917F     648            anl     _TMR3CN0,#0x7F
0077            649   ;        MPU.c:98: for (i = 0; i < us; i++)       // Count <us> overflows
0077 0B         650            inc     r3
0078 8000       651            sjmp    L003004?
007A            652   L003007?:
007A            653   ;        MPU.c:103: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
007A 759100     654            mov     _TMR3CN0,#0x00
007D 22         655            ret
007E            656   ;------------------------------------------------------------
007E            657   ;Allocation info for local variables in function 'waitms'
007E            658   ;------------------------------------------------------------
007E            659   ;ms                        Allocated to registers r2 r3 
007E            660   ;j                         Allocated to registers r2 r3 
007E            661   ;------------------------------------------------------------
007E            662   ;        MPU.c:106: void waitms (unsigned int ms)
007E            663   ;        -----------------------------------------
007E            664   ;         function waitms
007E            665   ;        -----------------------------------------
007E            666   _waitms:
007E AA82       667            mov     r2,dpl
0080 AB83       668            mov     r3,dph
0082            669   ;        MPU.c:109: for(j=ms; j!=0; j--)
0082            670   L004001?:
0082 BA00F0     671            cjne    r2,#0x00,L004010?
0085 BB00F0     672            cjne    r3,#0x00,L004010?
0088 22         673            ret
0089            674   L004010?:
0089            675   ;        MPU.c:111: Timer3us(249);
0089 7582F9     676            mov     dpl,#0xF9
008C C002       677            push    ar2
008E C003       678            push    ar3
0090 120000     679            lcall   _Timer3us
0093            680   ;        MPU.c:112: Timer3us(249);
0093 7582F9     681            mov     dpl,#0xF9
0096 120000     682            lcall   _Timer3us
0099            683   ;        MPU.c:113: Timer3us(249);
0099 7582F9     684            mov     dpl,#0xF9
009C 120000     685            lcall   _Timer3us
009F            686   ;        MPU.c:114: Timer3us(250);
009F 7582FA     687            mov     dpl,#0xFA
00A2 120000     688            lcall   _Timer3us
00A5 D003       689            pop     ar3
00A7 D002       690            pop     ar2
00A9            691   ;        MPU.c:109: for(j=ms; j!=0; j--)
00A9 1A         692            dec     r2
00AA BAFF30     693            cjne    r2,#0xff,L004011?
00AD 1B         694            dec     r3
00AE            695   L004011?:
00AE 8000       696            sjmp    L004001?
00B0            697   ;------------------------------------------------------------
00B0            698   ;Allocation info for local variables in function 'TIMER0_Init'
00B0            699   ;------------------------------------------------------------
00B0            700   ;------------------------------------------------------------
00B0            701   ;        MPU.c:118: void TIMER0_Init(void)
00B0            702   ;        -----------------------------------------
00B0            703   ;         function TIMER0_Init
00B0            704   ;        -----------------------------------------
00B0            705   _TIMER0_Init:
00B0            706   ;        MPU.c:120: TMOD&=0b_1111_0000; // Set the bits of Timer/Counter 0 to zero
00B0 5389F0     707            anl     _TMOD,#0xF0
00B3            708   ;        MPU.c:121: TMOD|=0b_0000_0001; // Timer/Counter 0 used as a 16-bit timer
00B3 438901     709            orl     _TMOD,#0x01
00B6            710   ;        MPU.c:122: TR0=0; // Stop Timer/Counter 0
00B6 C28C       711            clr     _TR0
00B8 22         712            ret
00B9            713   ;------------------------------------------------------------
00B9            714   ;Allocation info for local variables in function 'I2C_Init'
00B9            715   ;------------------------------------------------------------
00B9            716   ;------------------------------------------------------------
00B9            717   ;        MPU.c:125: void I2C_Init()
00B9            718   ;        -----------------------------------------
00B9            719   ;         function I2C_Init
00B9            720   ;        -----------------------------------------
00B9            721   _I2C_Init:
00B9            722   ;        MPU.c:129: P2MDOUT |= 0x03; //Set P2.0 (SDA) and P2.1(SCL) as Push pull mode
00B9 43A603     723            orl     _P2MDOUT,#0x03
00BC            724   ;        MPU.c:133: XBR0 |= 0x04;
00BC 43E104     725            orl     _XBR0,#0x04
00BF            726   ;        MPU.c:136: SMB0CF       = 0x00;
00BF 75C100     727            mov     _SMB0CF,#0x00
00C2            728   ;        MPU.c:137: SMB0CF |= 0xC0;
00C2 43C1C0     729            orl     _SMB0CF,#0xC0
00C5            730   ;        MPU.c:141: SMB0ADM |= 0x01;
00C5 43D601     731            orl     _SMB0ADM,#0x01
00C8            732   ;        MPU.c:143: IE |= 0x80; //Global Enable all interrupts
00C8 43A880     733            orl     _IE,#0x80
00CB            734   ;        MPU.c:144: EIE1 |= 0x01; //SMBus interrupts enable
00CB 43E601     735            orl     _EIE1,#0x01
00CE 22         736            ret
00CF            737   ;------------------------------------------------------------
00CF            738   ;Allocation info for local variables in function 'I2C_Write'
00CF            739   ;------------------------------------------------------------
00CF            740   ;data_input                Allocated with name '_I2C_Write_PARM_2'
00CF            741   ;addr                      Allocated to registers r2 
00CF            742   ;------------------------------------------------------------
00CF            743   ;        MPU.c:148: void I2C_Write(uint8_t addr, uint8_t data_input)
00CF            744   ;        -----------------------------------------
00CF            745   ;         function I2C_Write
00CF            746   ;        -----------------------------------------
00CF            747   _I2C_Write:
00CF AA82       748            mov     r2,dpl
00D1            749   ;        MPU.c:163: SMB0CN0 |= 0x20; //Sets SMB0CN0.5 (STA) to start an I2C transfer
00D1 43C020     750            orl     _SMB0CN0,#0x20
00D4            751   ;        MPU.c:165: while (SMB0CN0 & 0x20)
00D4 EA         752            mov     a,r2
00D5 2A         753            add     a,r2
00D6 FA         754            mov     r2,a
00D7 430201     755            orl     ar2,#0x01
00DA            756   L007004?:
00DA E5C0       757            mov     a,_SMB0CN0
00DC 30E5B0     758            jnb     acc.5,L007006?
00DF            759   ;        MPU.c:168: SMB0CN0 &= ~(0x30);
00DF 53C0CF     760            anl     _SMB0CN0,#0xCF
00E2            761   ;        MPU.c:170: SMB0DAT = (addr << 1) | 0x01;
00E2 8AC2       762            mov     _SMB0DAT,r2
00E4            763   ;        MPU.c:172: SMB0CN0 &= ~(0x01);
00E4 53C0FE     764            anl     _SMB0CN0,#0xFE
00E7            765   ;        MPU.c:174: if (SMB0CN0 & 0x02)
00E7 E5C0       766            mov     a,_SMB0CN0
00E9 30E1F0     767            jnb     acc.1,L007002?
00EC            768   ;        MPU.c:176: printf("ACK recieved\n");
00EC C002       769            push    ar2
00EE 7430       770            mov     a,#__str_0
00F0 C0E0       771            push    acc
00F2 74C2       772            mov     a,#(__str_0 >> 8)
00F4 C0E0       773            push    acc
00F6 7480       774            mov     a,#0x80
00F8 C0E0       775            push    acc
00FA 120000     776            lcall   _printf
00FD 1581       777            dec     sp
00FF 1581       778            dec     sp
0101 1581       779            dec     sp
0103 D002       780            pop     ar2
0105 8000       781            sjmp    L007004?
0107            782   L007002?:
0107            783   ;        MPU.c:181: SMB0CN0 |= 0x20; //Sets SMB0CN0.5 (STA) to start an I2C transfer
0107 43C020     784            orl     _SMB0CN0,#0x20
010A            785   ;        MPU.c:182: SMB0CN0 &= ~(0x01); // Clear SI
010A 53C0FE     786            anl     _SMB0CN0,#0xFE
010D 8000       787            sjmp    L007004?
010F            788   L007006?:
010F            789   ;        MPU.c:185: printf("Loop exited\n");
010F 74F0       790            mov     a,#__str_1
0111 C0E0       791            push    acc
0113 74C2       792            mov     a,#(__str_1 >> 8)
0115 C0E0       793            push    acc
0117 7480       794            mov     a,#0x80
0119 C0E0       795            push    acc
011B 120000     796            lcall   _printf
011E 1581       797            dec     sp
0120 1581       798            dec     sp
0122 1581       799            dec     sp
0124            800   ;        MPU.c:187: while (!(SMB0CN0 & 0x02));
0124            801   L007007?:
0124 E5C0       802            mov     a,_SMB0CN0
0126 30E130     803            jnb     acc.1,L007007?
0129            804   ;        MPU.c:188: printf("Cleared interrupt flag\n");
0129 7470       805            mov     a,#__str_2
012B C0E0       806            push    acc
012D 74C3       807            mov     a,#(__str_2 >> 8)
012F C0E0       808            push    acc
0131 7480       809            mov     a,#0x80
0133 C0E0       810            push    acc
0135 120000     811            lcall   _printf
0138 1581       812            dec     sp
013A 1581       813            dec     sp
013C 1581       814            dec     sp
013E            815   ;        MPU.c:193: while (!(SMB0CN0 & 0x02)); //Waiting for SMB0CN0.0 (ACK) to indicate transfer complete
013E            816   L007010?:
013E E5C0       817            mov     a,_SMB0CN0
0140 30E1B0     818            jnb     acc.1,L007010?
0143            819   ;        MPU.c:196: SMB0DAT = data_input;
0143 8570C2     820            mov     _SMB0DAT,_I2C_Write_PARM_2
0146            821   ;        MPU.c:199: while (!(SMB0CN0 & 0x02)); //Waiting for SMB0CN0.0 (ACK) to indicate transfer complete
0146            822   L007013?:
0146 E5C0       823            mov     a,_SMB0CN0
0148 30E1F0     824            jnb     acc.1,L007013?
014B            825   ;        MPU.c:202: SMB0CN0 |= 0x10;  //Sets SMB0CN0.4 (STO) to stop an I2C transfer
014B 43C010     826            orl     _SMB0CN0,#0x10
014E 22         827            ret
014F            828   ;------------------------------------------------------------
014F            829   ;Allocation info for local variables in function 'I2C_Read'
014F            830   ;------------------------------------------------------------
014F            831   ;addr                      Allocated to registers r2 
014F            832   ;data_output               Allocated to registers 
014F            833   ;------------------------------------------------------------
014F            834   ;        MPU.c:205: uint8_t I2C_Read(uint8_t addr)
014F            835   ;        -----------------------------------------
014F            836   ;         function I2C_Read
014F            837   ;        -----------------------------------------
014F            838   _I2C_Read:
014F AA82       839            mov     r2,dpl
0151            840   ;        MPU.c:210: SMB0CN0 |= 0x20; //Sets SMB0CN0.5 (STA) to start an I2C transfer
0151 43C020     841            orl     _SMB0CN0,#0x20
0154            842   ;        MPU.c:212: while (SMB0CN0 & 0x20)
0154 EA         843            mov     a,r2
0155 2A         844            add     a,r2
0156 FA         845            mov     r2,a
0157 7401       846            mov     a,#0x01
0159 4A         847            orl     a,r2
015A FB         848            mov     r3,a
015B            849   L008004?:
015B E5C0       850            mov     a,_SMB0CN0
015D 30E570     851            jnb     acc.5,L008006?
0160            852   ;        MPU.c:215: SMB0CN0 &= ~(0x30);
0160 53C0CF     853            anl     _SMB0CN0,#0xCF
0163            854   ;        MPU.c:217: SMB0DAT = (addr << 1) | 0x01;
0163 8BC2       855            mov     _SMB0DAT,r3
0165            856   ;        MPU.c:219: SMB0CN0 &= ~(0x01);
0165 53C0FE     857            anl     _SMB0CN0,#0xFE
0168            858   ;        MPU.c:221: if (SMB0CN0 & 0x02)
0168 E5C0       859            mov     a,_SMB0CN0
016A 30E1B0     860            jnb     acc.1,L008002?
016D            861   ;        MPU.c:223: printf("ACK recieved\n");
016D C002       862            push    ar2
016F C003       863            push    ar3
0171 7430       864            mov     a,#__str_0
0173 C0E0       865            push    acc
0175 74C2       866            mov     a,#(__str_0 >> 8)
0177 C0E0       867            push    acc
0179 7480       868            mov     a,#0x80
017B C0E0       869            push    acc
017D 120000     870            lcall   _printf
0180 1581       871            dec     sp
0182 1581       872            dec     sp
0184 1581       873            dec     sp
0186 D003       874            pop     ar3
0188 D002       875            pop     ar2
018A 8000       876            sjmp    L008004?
018C            877   L008002?:
018C            878   ;        MPU.c:228: SMB0CN0 |= 0x20; //Sets SMB0CN0.5 (STA) to start an I2C transfer
018C 43C020     879            orl     _SMB0CN0,#0x20
018F            880   ;        MPU.c:229: SMB0CN0 &= ~(0x01); // Clear SI
018F 53C0FE     881            anl     _SMB0CN0,#0xFE
0192 8000       882            sjmp    L008004?
0194            883   L008006?:
0194            884   ;        MPU.c:232: printf("Loop exited\n");
0194 C002       885            push    ar2
0196 74F0       886            mov     a,#__str_1
0198 C0E0       887            push    acc
019A 74C2       888            mov     a,#(__str_1 >> 8)
019C C0E0       889            push    acc
019E 7480       890            mov     a,#0x80
01A0 C0E0       891            push    acc
01A2 120000     892            lcall   _printf
01A5 1581       893            dec     sp
01A7 1581       894            dec     sp
01A9 1581       895            dec     sp
01AB            896   ;        MPU.c:234: printf("Transfer started\n");
01AB 74F0       897            mov     a,#__str_3
01AD C0E0       898            push    acc
01AF 74C4       899            mov     a,#(__str_3 >> 8)
01B1 C0E0       900            push    acc
01B3 7480       901            mov     a,#0x80
01B5 C0E0       902            push    acc
01B7 120000     903            lcall   _printf
01BA 1581       904            dec     sp
01BC 1581       905            dec     sp
01BE 1581       906            dec     sp
01C0            907   ;        MPU.c:235: printf("SMB0CN0: %02X\n", SMB0CN0); //Waiting for SMB0CN0.0 (ACK) to indicate transfer complete
01C0 ABC0       908            mov     r3,_SMB0CN0
01C2 7C00       909            mov     r4,#0x00
01C4 C003       910            push    ar3
01C6 C004       911            push    ar4
01C8 7430       912            mov     a,#__str_4
01CA C0E0       913            push    acc
01CC 74C5       914            mov     a,#(__str_4 >> 8)
01CE C0E0       915            push    acc
01D0 7480       916            mov     a,#0x80
01D2 C0E0       917            push    acc
01D4 120000     918            lcall   _printf
01D7 E581       919            mov     a,sp
01D9 24FB       920            add     a,#0xfb
01DB F581       921            mov     sp,a
01DD D002       922            pop     ar2
01DF            923   ;        MPU.c:237: while (!(SMB0CN0 & 0x02)); 
01DF            924   L008007?:
01DF E5C0       925            mov     a,_SMB0CN0
01E1 30E170     926            jnb     acc.1,L008007?
01E4            927   ;        MPU.c:239: printf("Transfer complete");
01E4 C002       928            push    ar2
01E6 74B0       929            mov     a,#__str_5
01E8 C0E0       930            push    acc
01EA 74C5       931            mov     a,#(__str_5 >> 8)
01EC C0E0       932            push    acc
01EE 7480       933            mov     a,#0x80
01F0 C0E0       934            push    acc
01F2 120000     935            lcall   _printf
01F5 1581       936            dec     sp
01F7 1581       937            dec     sp
01F9 1581       938            dec     sp
01FB D002       939            pop     ar2
01FD            940   ;        MPU.c:242: SMB0DAT = (addr << 1) | 1;
01FD 7401       941            mov     a,#0x01
01FF 4A         942            orl     a,r2
0200 F5C2       943            mov     _SMB0DAT,a
0202            944   ;        MPU.c:245: while (!(SMB0CN0 & 0x02)); //Waiting for SMB0CN0.0 (ACK) to indicate transfer complete
0202            945   L008010?:
0202 E5C0       946            mov     a,_SMB0CN0
0204 30E1F0     947            jnb     acc.1,L008010?
0207            948   ;        MPU.c:248: data_output = SMB0DAT;
0207 85C282     949            mov     dpl,_SMB0DAT
020A            950   ;        MPU.c:251: SMB0CN0 |= 0x10;  //Sets SMB0CN0.4 (STO) to stop an I2C transfer
020A 43C010     951            orl     _SMB0CN0,#0x10
020D            952   ;        MPU.c:253: return data_output;
020D 22         953            ret
020E            954   ;------------------------------------------------------------
020E            955   ;Allocation info for local variables in function 'MPU6050_Init'
020E            956   ;------------------------------------------------------------
020E            957   ;------------------------------------------------------------
020E            958   ;        MPU.c:256: void MPU6050_Init()
020E            959   ;        -----------------------------------------
020E            960   ;         function MPU6050_Init
020E            961   ;        -----------------------------------------
020E            962   _MPU6050_Init:
020E            963   ;        MPU.c:258: I2C_Write(0x6B, 0x00);
020E 757000     964            mov     _I2C_Write_PARM_2,#0x00
0211 75826B     965            mov     dpl,#0x6B
0214 020000     966            ljmp    _I2C_Write
0217            967   ;------------------------------------------------------------
0217            968   ;Allocation info for local variables in function 'Test_I2C'
0217            969   ;------------------------------------------------------------
0217            970   ;data_in                   Allocated to registers r2 
0217            971   ;------------------------------------------------------------
0217            972   ;        MPU.c:261: void Test_I2C()
0217            973   ;        -----------------------------------------
0217            974   ;         function Test_I2C
0217            975   ;        -----------------------------------------
0217            976   _Test_I2C:
0217            977   ;        MPU.c:263: uint8_t data_in = I2C_Read(0x75);
0217 758275     978            mov     dpl,#0x75
021A 120000     979            lcall   _I2C_Read
021D AA82       980            mov     r2,dpl
021F            981   ;        MPU.c:264: printf("I2C: %u\n", data_in);
021F 8A03       982            mov     ar3,r2
0221 7C00       983            mov     r4,#0x00
0223 C002       984            push    ar2
0225 C003       985            push    ar3
0227 C004       986            push    ar4
0229 C003       987            push    ar3
022B C004       988            push    ar4
022D 7430       989            mov     a,#__str_6
022F C0E0       990            push    acc
0231 74C6       991            mov     a,#(__str_6 >> 8)
0233 C0E0       992            push    acc
0235 7480       993            mov     a,#0x80
0237 C0E0       994            push    acc
0239 120000     995            lcall   _printf
023C E581       996            mov     a,sp
023E 24FB       997            add     a,#0xfb
0240 F581       998            mov     sp,a
0242 D004       999            pop     ar4
0244 D003      1000            pop     ar3
0246 D002      1001            pop     ar2
0248           1002   ;        MPU.c:266: if (data_in == 0x68)
0248 BA6870    1003            cjne    r2,#0x68,L010002?
024B           1004   ;        MPU.c:268: printf("I2C is working correctly\n");
024B 74B0      1005            mov     a,#__str_7
024D C0E0      1006            push    acc
024F 74C6      1007            mov     a,#(__str_7 >> 8)
0251 C0E0      1008            push    acc
0253 7480      1009            mov     a,#0x80
0255 C0E0      1010            push    acc
0257 120000    1011            lcall   _printf
025A 1581      1012            dec     sp
025C 1581      1013            dec     sp
025E 1581      1014            dec     sp
0260 22        1015            ret
0261           1016   L010002?:
0261           1017   ;        MPU.c:273: printf("I2C is not working correctly: %u\n", data_in);
0261 C003      1018            push    ar3
0263 C004      1019            push    ar4
0265 74F0      1020            mov     a,#__str_8
0267 C0E0      1021            push    acc
0269 74C6      1022            mov     a,#(__str_8 >> 8)
026B C0E0      1023            push    acc
026D 7480      1024            mov     a,#0x80
026F C0E0      1025            push    acc
0271 120000    1026            lcall   _printf
0274 E581      1027            mov     a,sp
0276 24FB      1028            add     a,#0xfb
0278 F581      1029            mov     sp,a
027A 22        1030            ret
027B           1031   ;------------------------------------------------------------
027B           1032   ;Allocation info for local variables in function 'main'
027B           1033   ;------------------------------------------------------------
027B           1034   ;------------------------------------------------------------
027B           1035   ;        MPU.c:277: void main (void) 
027B           1036   ;        -----------------------------------------
027B           1037   ;         function main
027B           1038   ;        -----------------------------------------
027B           1039   _main:
027B           1040   ;        MPU.c:282: waitms(500); // Give PuTTY a chance to start.
027B 9001F4    1041            mov     dptr,#0x01F4
027E 120000    1042            lcall   _waitms
0281           1043   ;        MPU.c:283: printf("\x1b[2J \n"); // Clear screen using ANSI escape sequence.
0281 7430      1044            mov     a,#__str_9
0283 C0E0      1045            push    acc
0285 74C7      1046            mov     a,#(__str_9 >> 8)
0287 C0E0      1047            push    acc
0289 7480      1048            mov     a,#0x80
028B C0E0      1049            push    acc
028D 120000    1050            lcall   _printf
0290 1581      1051            dec     sp
0292 1581      1052            dec     sp
0294 1581      1053            dec     sp
0296           1054   ;        MPU.c:288: __FILE__, __DATE__, __TIME__);
0296           1055   ;        MPU.c:287: "Compiled: %s, %s\n\n",
0296 7470      1056            mov     a,#__str_13
0298 C0E0      1057            push    acc
029A 74C7      1058            mov     a,#(__str_13 >> 8)
029C C0E0      1059            push    acc
029E 7480      1060            mov     a,#0x80
02A0 C0E0      1061            push    acc
02A2 74B0      1062            mov     a,#__str_12
02A4 C0E0      1063            push    acc
02A6 74C7      1064            mov     a,#(__str_12 >> 8)
02A8 C0E0      1065            push    acc
02AA 7480      1066            mov     a,#0x80
02AC C0E0      1067            push    acc
02AE 74F0      1068            mov     a,#__str_11
02B0 C0E0      1069            push    acc
02B2 74C7      1070            mov     a,#(__str_11 >> 8)
02B4 C0E0      1071            push    acc
02B6 7480      1072            mov     a,#0x80
02B8 C0E0      1073            push    acc
02BA 7430      1074            mov     a,#__str_10
02BC C0E0      1075            push    acc
02BE 74C8      1076            mov     a,#(__str_10 >> 8)
02C0 C0E0      1077            push    acc
02C2 7480      1078            mov     a,#0x80
02C4 C0E0      1079            push    acc
02C6 120000    1080            lcall   _printf
02C9 E581      1081            mov     a,sp
02CB 24F4      1082            add     a,#0xf4
02CD F581      1083            mov     sp,a
02CF           1084   ;        MPU.c:290: I2C_Init();
02CF 120000    1085            lcall   _I2C_Init
02D2           1086   ;        MPU.c:291: printf("Init Done\n");
02D2 7470      1087            mov     a,#__str_14
02D4 C0E0      1088            push    acc
02D6 74C8      1089            mov     a,#(__str_14 >> 8)
02D8 C0E0      1090            push    acc
02DA 7480      1091            mov     a,#0x80
02DC C0E0      1092            push    acc
02DE 120000    1093            lcall   _printf
02E1 1581      1094            dec     sp
02E3 1581      1095            dec     sp
02E5 1581      1096            dec     sp
02E7           1097   ;        MPU.c:292: SMB0CN0 |= 0xE0; //Sets SMB0CN0.5 (STA) to start an I2C transfer
02E7 43C0E0    1098            orl     _SMB0CN0,#0xE0
02EA           1099   ;        MPU.c:293: printf("%02X\n", SMB0CN0);
02EA AAC0      1100            mov     r2,_SMB0CN0
02EC 7B00      1101            mov     r3,#0x00
02EE C002      1102            push    ar2
02F0 C003      1103            push    ar3
02F2 74B0      1104            mov     a,#__str_15
02F4 C0E0      1105            push    acc
02F6 74C8      1106            mov     a,#(__str_15 >> 8)
02F8 C0E0      1107            push    acc
02FA 7480      1108            mov     a,#0x80
02FC C0E0      1109            push    acc
02FE 120000    1110            lcall   _printf
0301 E581      1111            mov     a,sp
0303 24FB      1112            add     a,#0xfb
0305 F581      1113            mov     sp,a
0307           1114   ;        MPU.c:295: printf("%02X\n", SMB0CN0);
0307 AAC0      1115            mov     r2,_SMB0CN0
0309 7B00      1116            mov     r3,#0x00
030B C002      1117            push    ar2
030D C003      1118            push    ar3
030F 74B0      1119            mov     a,#__str_15
0311 C0E0      1120            push    acc
0313 74C8      1121            mov     a,#(__str_15 >> 8)
0315 C0E0      1122            push    acc
0317 7480      1123            mov     a,#0x80
0319 C0E0      1124            push    acc
031B 120000    1125            lcall   _printf
031E E581      1126            mov     a,sp
0320 24FB      1127            add     a,#0xfb
0322 F581      1128            mov     sp,a
0324           1129   ;        MPU.c:301: printf("Starting to read\n");
0324 74F0      1130            mov     a,#__str_16
0326 C0E0      1131            push    acc
0328 74C8      1132            mov     a,#(__str_16 >> 8)
032A C0E0      1133            push    acc
032C 7480      1134            mov     a,#0x80
032E C0E0      1135            push    acc
0330 120000    1136            lcall   _printf
0333 1581      1137            dec     sp
0335 1581      1138            dec     sp
0337 1581      1139            dec     sp
0339           1140   ;        MPU.c:302: Test_I2C();
0339 020000    1141            ljmp    _Test_I2C
033C           1142            rseg R_CSEG
033C           1143   
0000           1144            rseg R_XINIT
0000           1145   
0000           1146            rseg R_CONST
0000           1147   __str_0:
0000 41434B20  1148            db 'ACK recieved'
     72656369
     65766564
000C 0A        1149            db 0x0A
000D 00        1150            db 0x00
000E           1151   __str_1:
000E 4C6F6F70  1152            db 'Loop exited'
     20657869
     746564
0019 0A        1153            db 0x0A
001A 00        1154            db 0x00
001B           1155   __str_2:
001B 436C6561  1156            db 'Cleared interrupt flag'
     72656420
     696E7465
     72727570
     7420666C
     6167
0031 0A        1157            db 0x0A
0032 00        1158            db 0x00
0033           1159   __str_3:
0033 5472616E  1160            db 'Transfer started'
     73666572
     20737461
     72746564
0043 0A        1161            db 0x0A
0044 00        1162            db 0x00
0045           1163   __str_4:
0045 534D4230  1164            db 'SMB0CN0: %02X'
     434E303A
     20253032
     58
0052 0A        1165            db 0x0A
0053 00        1166            db 0x00
0054           1167   __str_5:
0054 5472616E  1168            db 'Transfer complete'
     73666572
     20636F6D
     706C6574
     65
0065 00        1169            db 0x00
0066           1170   __str_6:
0066 4932433A  1171            db 'I2C: %u'
     202575
006D 0A        1172            db 0x0A
006E 00        1173            db 0x00
006F           1174   __str_7:
006F 49324320  1175            db 'I2C is working correctly'
     69732077
     6F726B69
     6E672063
     6F727265
     63746C79
0087 0A        1176            db 0x0A
0088 00        1177            db 0x00
0089           1178   __str_8:
0089 49324320  1179            db 'I2C is not working correctly: %u'
     6973206E
     6F742077
     6F726B69
     6E672063
     6F727265
     63746C79
     3A202575
00A9 0A        1180            db 0x0A
00AA 00        1181            db 0x00
00AB           1182   __str_9:
00AB 1B        1183            db 0x1B
00AC 5B324A20  1184            db '[2J '
00B0 0A        1185            db 0x0A
00B1 00        1186            db 0x00
00B2           1187   __str_10:
00B2 45464D38  1188            db 'EFM8 '
     20
00B7 0A        1189            db 0x0A
00B8 46696C65  1190            db 'File: %s'
     3A202573
00C0 0A        1191            db 0x0A
00C1 436F6D70  1192            db 'Compiled: %s, %s'
     696C6564
     3A202573
     2C202573
00D1 0A        1193            db 0x0A
00D2 0A        1194            db 0x0A
00D3 00        1195            db 0x00
00D4           1196   __str_11:
00D4 4D50552E  1197            db 'MPU.c'
     63
00D9 00        1198            db 0x00
00DA           1199   __str_12:
00DA 41707220  1200            db 'Apr  2 2024'
     20322032
     303234
00E5 00        1201            db 0x00
00E6           1202   __str_13:
00E6 31333A31  1203            db '13:10:42'
     303A3432
00EE 00        1204            db 0x00
00EF           1205   __str_14:
00EF 496E6974  1206            db 'Init Done'
     20446F6E
     65
00F8 0A        1207            db 0x0A
00F9 00        1208            db 0x00
00FA           1209   __str_15:
00FA 25303258  1210            db '%02X'
00FE 0A        1211            db 0x0A
00FF 00        1212            db 0x00
0100           1213   __str_16:
0100 53746172  1214            db 'Starting to read'
     74696E67
     20746F20
     72656164
0110 0A        1215            db 0x0A
0111 00        1216            db 0x00
0112           1217   
0003           1218            CSEG
0003           1219   
0003           1220   end
