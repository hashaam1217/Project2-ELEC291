0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Mon Apr 01 17:08:20 2024
0000              5   ;--------------------------------------------------------
                  5   $name MPU
                  6   $optc51 --model-small
0000              8            R_DSEG    segment data
0000              9            R_CSEG    segment code
0000             10            R_BSEG    segment bit
0000             11            R_XSEG    segment xdata
0000             12            R_PSEG    segment xdata
0000             13            R_ISEG    segment idata
0000             14            R_OSEG    segment data overlay
0000             15            BIT_BANK  segment data overlay
0000             16            R_HOME    segment code
0000             17            R_GSINIT  segment code
0000             18            R_IXSEG   segment xdata
0000             19            R_CONST   segment code
0000             20            R_XINIT   segment code
0000             21            R_DINIT   segment code
0000             22   
0000             23   ;--------------------------------------------------------
0000             24   ; Public variables in this module
0000             25   ;--------------------------------------------------------
0000             26            public _main
0000             27            public _Test_I2C
0000             28            public _MPU6050_Init
0000             29            public _I2C_Read
0000             30            public _I2C_Write
0000             31            public _I2C_Init
0000             32            public _TIMER0_Init
0000             33            public _waitms
0000             34            public _Timer3us
0000             35            public __c51_external_startup
0000             36            public _I2C_Write_PARM_2
0000             37            public _overflow_count
0000             38   ;--------------------------------------------------------
0000             39   ; Special Function Registers
0000             40   ;--------------------------------------------------------
0000             41   _ACC            DATA 0xe0
0000             42   _ADC0ASAH       DATA 0xb6
0000             43   _ADC0ASAL       DATA 0xb5
0000             44   _ADC0ASCF       DATA 0xa1
0000             45   _ADC0ASCT       DATA 0xc7
0000             46   _ADC0CF0        DATA 0xbc
0000             47   _ADC0CF1        DATA 0xb9
0000             48   _ADC0CF2        DATA 0xdf
0000             49   _ADC0CN0        DATA 0xe8
0000             50   _ADC0CN1        DATA 0xb2
0000             51   _ADC0CN2        DATA 0xb3
0000             52   _ADC0GTH        DATA 0xc4
0000             53   _ADC0GTL        DATA 0xc3
0000             54   _ADC0H          DATA 0xbe
0000             55   _ADC0L          DATA 0xbd
0000             56   _ADC0LTH        DATA 0xc6
0000             57   _ADC0LTL        DATA 0xc5
0000             58   _ADC0MX         DATA 0xbb
0000             59   _B              DATA 0xf0
0000             60   _CKCON0         DATA 0x8e
0000             61   _CKCON1         DATA 0xa6
0000             62   _CLEN0          DATA 0xc6
0000             63   _CLIE0          DATA 0xc7
0000             64   _CLIF0          DATA 0xe8
0000             65   _CLKSEL         DATA 0xa9
0000             66   _CLOUT0         DATA 0xd1
0000             67   _CLU0CF         DATA 0xb1
0000             68   _CLU0FN         DATA 0xaf
0000             69   _CLU0MX         DATA 0x84
0000             70   _CLU1CF         DATA 0xb3
0000             71   _CLU1FN         DATA 0xb2
0000             72   _CLU1MX         DATA 0x85
0000             73   _CLU2CF         DATA 0xb6
0000             74   _CLU2FN         DATA 0xb5
0000             75   _CLU2MX         DATA 0x91
0000             76   _CLU3CF         DATA 0xbf
0000             77   _CLU3FN         DATA 0xbe
0000             78   _CLU3MX         DATA 0xae
0000             79   _CMP0CN0        DATA 0x9b
0000             80   _CMP0CN1        DATA 0x99
0000             81   _CMP0MD         DATA 0x9d
0000             82   _CMP0MX         DATA 0x9f
0000             83   _CMP1CN0        DATA 0xbf
0000             84   _CMP1CN1        DATA 0xac
0000             85   _CMP1MD         DATA 0xab
0000             86   _CMP1MX         DATA 0xaa
0000             87   _CRC0CN0        DATA 0xce
0000             88   _CRC0CN1        DATA 0x86
0000             89   _CRC0CNT        DATA 0xd3
0000             90   _CRC0DAT        DATA 0xcb
0000             91   _CRC0FLIP       DATA 0xcf
0000             92   _CRC0IN         DATA 0xca
0000             93   _CRC0ST         DATA 0xd2
0000             94   _DAC0CF0        DATA 0x91
0000             95   _DAC0CF1        DATA 0x92
0000             96   _DAC0H          DATA 0x85
0000             97   _DAC0L          DATA 0x84
0000             98   _DAC1CF0        DATA 0x93
0000             99   _DAC1CF1        DATA 0x94
0000            100   _DAC1H          DATA 0x8a
0000            101   _DAC1L          DATA 0x89
0000            102   _DAC2CF0        DATA 0x95
0000            103   _DAC2CF1        DATA 0x96
0000            104   _DAC2H          DATA 0x8c
0000            105   _DAC2L          DATA 0x8b
0000            106   _DAC3CF0        DATA 0x9a
0000            107   _DAC3CF1        DATA 0x9c
0000            108   _DAC3H          DATA 0x8e
0000            109   _DAC3L          DATA 0x8d
0000            110   _DACGCF0        DATA 0x88
0000            111   _DACGCF1        DATA 0x98
0000            112   _DACGCF2        DATA 0xa2
0000            113   _DERIVID        DATA 0xad
0000            114   _DEVICEID       DATA 0xb5
0000            115   _DPH            DATA 0x83
0000            116   _DPL            DATA 0x82
0000            117   _EIE1           DATA 0xe6
0000            118   _EIE2           DATA 0xf3
0000            119   _EIP1           DATA 0xbb
0000            120   _EIP1H          DATA 0xee
0000            121   _EIP2           DATA 0xed
0000            122   _EIP2H          DATA 0xf6
0000            123   _EMI0CN         DATA 0xe7
0000            124   _FLKEY          DATA 0xb7
0000            125   _HFO0CAL        DATA 0xc7
0000            126   _HFO1CAL        DATA 0xd6
0000            127   _HFOCN          DATA 0xef
0000            128   _I2C0ADM        DATA 0xff
0000            129   _I2C0CN0        DATA 0xba
0000            130   _I2C0DIN        DATA 0xbc
0000            131   _I2C0DOUT       DATA 0xbb
0000            132   _I2C0FCN0       DATA 0xad
0000            133   _I2C0FCN1       DATA 0xab
0000            134   _I2C0FCT        DATA 0xf5
0000            135   _I2C0SLAD       DATA 0xbd
0000            136   _I2C0STAT       DATA 0xb9
0000            137   _IE             DATA 0xa8
0000            138   _IP             DATA 0xb8
0000            139   _IPH            DATA 0xf2
0000            140   _IT01CF         DATA 0xe4
0000            141   _LFO0CN         DATA 0xb1
0000            142   _P0             DATA 0x80
0000            143   _P0MASK         DATA 0xfe
0000            144   _P0MAT          DATA 0xfd
0000            145   _P0MDIN         DATA 0xf1
0000            146   _P0MDOUT        DATA 0xa4
0000            147   _P0SKIP         DATA 0xd4
0000            148   _P1             DATA 0x90
0000            149   _P1MASK         DATA 0xee
0000            150   _P1MAT          DATA 0xed
0000            151   _P1MDIN         DATA 0xf2
0000            152   _P1MDOUT        DATA 0xa5
0000            153   _P1SKIP         DATA 0xd5
0000            154   _P2             DATA 0xa0
0000            155   _P2MASK         DATA 0xfc
0000            156   _P2MAT          DATA 0xfb
0000            157   _P2MDIN         DATA 0xf3
0000            158   _P2MDOUT        DATA 0xa6
0000            159   _P2SKIP         DATA 0xcc
0000            160   _P3             DATA 0xb0
0000            161   _P3MDIN         DATA 0xf4
0000            162   _P3MDOUT        DATA 0x9c
0000            163   _PCA0CENT       DATA 0x9e
0000            164   _PCA0CLR        DATA 0x9c
0000            165   _PCA0CN0        DATA 0xd8
0000            166   _PCA0CPH0       DATA 0xfc
0000            167   _PCA0CPH1       DATA 0xea
0000            168   _PCA0CPH2       DATA 0xec
0000            169   _PCA0CPH3       DATA 0xf5
0000            170   _PCA0CPH4       DATA 0x85
0000            171   _PCA0CPH5       DATA 0xde
0000            172   _PCA0CPL0       DATA 0xfb
0000            173   _PCA0CPL1       DATA 0xe9
0000            174   _PCA0CPL2       DATA 0xeb
0000            175   _PCA0CPL3       DATA 0xf4
0000            176   _PCA0CPL4       DATA 0x84
0000            177   _PCA0CPL5       DATA 0xdd
0000            178   _PCA0CPM0       DATA 0xda
0000            179   _PCA0CPM1       DATA 0xdb
0000            180   _PCA0CPM2       DATA 0xdc
0000            181   _PCA0CPM3       DATA 0xae
0000            182   _PCA0CPM4       DATA 0xaf
0000            183   _PCA0CPM5       DATA 0xcc
0000            184   _PCA0H          DATA 0xfa
0000            185   _PCA0L          DATA 0xf9
0000            186   _PCA0MD         DATA 0xd9
0000            187   _PCA0POL        DATA 0x96
0000            188   _PCA0PWM        DATA 0xf7
0000            189   _PCON0          DATA 0x87
0000            190   _PCON1          DATA 0xcd
0000            191   _PFE0CN         DATA 0xc1
0000            192   _PRTDRV         DATA 0xf6
0000            193   _PSCTL          DATA 0x8f
0000            194   _PSTAT0         DATA 0xaa
0000            195   _PSW            DATA 0xd0
0000            196   _REF0CN         DATA 0xd1
0000            197   _REG0CN         DATA 0xc9
0000            198   _REVID          DATA 0xb6
0000            199   _RSTSRC         DATA 0xef
0000            200   _SBCON1         DATA 0x94
0000            201   _SBRLH1         DATA 0x96
0000            202   _SBRLL1         DATA 0x95
0000            203   _SBUF           DATA 0x99
0000            204   _SBUF0          DATA 0x99
0000            205   _SBUF1          DATA 0x92
0000            206   _SCON           DATA 0x98
0000            207   _SCON0          DATA 0x98
0000            208   _SCON1          DATA 0xc8
0000            209   _SFRPAGE        DATA 0xa7
0000            210   _SFRPGCN        DATA 0xbc
0000            211   _SFRSTACK       DATA 0xd7
0000            212   _SMB0ADM        DATA 0xd6
0000            213   _SMB0ADR        DATA 0xd7
0000            214   _SMB0CF         DATA 0xc1
0000            215   _SMB0CN0        DATA 0xc0
0000            216   _SMB0DAT        DATA 0xc2
0000            217   _SMB0FCN0       DATA 0xc3
0000            218   _SMB0FCN1       DATA 0xc4
0000            219   _SMB0FCT        DATA 0xef
0000            220   _SMB0RXLN       DATA 0xc5
0000            221   _SMB0TC         DATA 0xac
0000            222   _SMOD1          DATA 0x93
0000            223   _SP             DATA 0x81
0000            224   _SPI0CFG        DATA 0xa1
0000            225   _SPI0CKR        DATA 0xa2
0000            226   _SPI0CN0        DATA 0xf8
0000            227   _SPI0DAT        DATA 0xa3
0000            228   _SPI0FCN0       DATA 0x9a
0000            229   _SPI0FCN1       DATA 0x9b
0000            230   _SPI0FCT        DATA 0xf7
0000            231   _SPI0PCF        DATA 0xdf
0000            232   _TCON           DATA 0x88
0000            233   _TH0            DATA 0x8c
0000            234   _TH1            DATA 0x8d
0000            235   _TL0            DATA 0x8a
0000            236   _TL1            DATA 0x8b
0000            237   _TMOD           DATA 0x89
0000            238   _TMR2CN0        DATA 0xc8
0000            239   _TMR2CN1        DATA 0xfd
0000            240   _TMR2H          DATA 0xcf
0000            241   _TMR2L          DATA 0xce
0000            242   _TMR2RLH        DATA 0xcb
0000            243   _TMR2RLL        DATA 0xca
0000            244   _TMR3CN0        DATA 0x91
0000            245   _TMR3CN1        DATA 0xfe
0000            246   _TMR3H          DATA 0x95
0000            247   _TMR3L          DATA 0x94
0000            248   _TMR3RLH        DATA 0x93
0000            249   _TMR3RLL        DATA 0x92
0000            250   _TMR4CN0        DATA 0x98
0000            251   _TMR4CN1        DATA 0xff
0000            252   _TMR4H          DATA 0xa5
0000            253   _TMR4L          DATA 0xa4
0000            254   _TMR4RLH        DATA 0xa3
0000            255   _TMR4RLL        DATA 0xa2
0000            256   _TMR5CN0        DATA 0xc0
0000            257   _TMR5CN1        DATA 0xf1
0000            258   _TMR5H          DATA 0xd5
0000            259   _TMR5L          DATA 0xd4
0000            260   _TMR5RLH        DATA 0xd3
0000            261   _TMR5RLL        DATA 0xd2
0000            262   _UART0PCF       DATA 0xd9
0000            263   _UART1FCN0      DATA 0x9d
0000            264   _UART1FCN1      DATA 0xd8
0000            265   _UART1FCT       DATA 0xfa
0000            266   _UART1LIN       DATA 0x9e
0000            267   _UART1PCF       DATA 0xda
0000            268   _VDM0CN         DATA 0xff
0000            269   _WDTCN          DATA 0x97
0000            270   _XBR0           DATA 0xe1
0000            271   _XBR1           DATA 0xe2
0000            272   _XBR2           DATA 0xe3
0000            273   _XOSC0CN        DATA 0x86
0000            274   _DPTR           DATA 0x8382
0000            275   _TMR2RL         DATA 0xcbca
0000            276   _TMR3RL         DATA 0x9392
0000            277   _TMR4RL         DATA 0xa3a2
0000            278   _TMR5RL         DATA 0xd3d2
0000            279   _TMR0           DATA 0x8c8a
0000            280   _TMR1           DATA 0x8d8b
0000            281   _TMR2           DATA 0xcfce
0000            282   _TMR3           DATA 0x9594
0000            283   _TMR4           DATA 0xa5a4
0000            284   _TMR5           DATA 0xd5d4
0000            285   _SBRL1          DATA 0x9695
0000            286   _PCA0           DATA 0xfaf9
0000            287   _PCA0CP0        DATA 0xfcfb
0000            288   _PCA0CP1        DATA 0xeae9
0000            289   _PCA0CP2        DATA 0xeceb
0000            290   _PCA0CP3        DATA 0xf5f4
0000            291   _PCA0CP4        DATA 0x8584
0000            292   _PCA0CP5        DATA 0xdedd
0000            293   _ADC0ASA        DATA 0xb6b5
0000            294   _ADC0GT         DATA 0xc4c3
0000            295   _ADC0           DATA 0xbebd
0000            296   _ADC0LT         DATA 0xc6c5
0000            297   _DAC0           DATA 0x8584
0000            298   _DAC1           DATA 0x8a89
0000            299   _DAC2           DATA 0x8c8b
0000            300   _DAC3           DATA 0x8e8d
0000            301   ;--------------------------------------------------------
0000            302   ; special function bits
0000            303   ;--------------------------------------------------------
0000            304   _ACC_0          BIT 0xe0
0000            305   _ACC_1          BIT 0xe1
0000            306   _ACC_2          BIT 0xe2
0000            307   _ACC_3          BIT 0xe3
0000            308   _ACC_4          BIT 0xe4
0000            309   _ACC_5          BIT 0xe5
0000            310   _ACC_6          BIT 0xe6
0000            311   _ACC_7          BIT 0xe7
0000            312   _TEMPE          BIT 0xe8
0000            313   _ADGN0          BIT 0xe9
0000            314   _ADGN1          BIT 0xea
0000            315   _ADWINT         BIT 0xeb
0000            316   _ADBUSY         BIT 0xec
0000            317   _ADINT          BIT 0xed
0000            318   _IPOEN          BIT 0xee
0000            319   _ADEN           BIT 0xef
0000            320   _B_0            BIT 0xf0
0000            321   _B_1            BIT 0xf1
0000            322   _B_2            BIT 0xf2
0000            323   _B_3            BIT 0xf3
0000            324   _B_4            BIT 0xf4
0000            325   _B_5            BIT 0xf5
0000            326   _B_6            BIT 0xf6
0000            327   _B_7            BIT 0xf7
0000            328   _C0FIF          BIT 0xe8
0000            329   _C0RIF          BIT 0xe9
0000            330   _C1FIF          BIT 0xea
0000            331   _C1RIF          BIT 0xeb
0000            332   _C2FIF          BIT 0xec
0000            333   _C2RIF          BIT 0xed
0000            334   _C3FIF          BIT 0xee
0000            335   _C3RIF          BIT 0xef
0000            336   _D1SRC0         BIT 0x88
0000            337   _D1SRC1         BIT 0x89
0000            338   _D1AMEN         BIT 0x8a
0000            339   _D01REFSL       BIT 0x8b
0000            340   _D3SRC0         BIT 0x8c
0000            341   _D3SRC1         BIT 0x8d
0000            342   _D3AMEN         BIT 0x8e
0000            343   _D23REFSL       BIT 0x8f
0000            344   _D0UDIS         BIT 0x98
0000            345   _D1UDIS         BIT 0x99
0000            346   _D2UDIS         BIT 0x9a
0000            347   _D3UDIS         BIT 0x9b
0000            348   _EX0            BIT 0xa8
0000            349   _ET0            BIT 0xa9
0000            350   _EX1            BIT 0xaa
0000            351   _ET1            BIT 0xab
0000            352   _ES0            BIT 0xac
0000            353   _ET2            BIT 0xad
0000            354   _ESPI0          BIT 0xae
0000            355   _EA             BIT 0xaf
0000            356   _PX0            BIT 0xb8
0000            357   _PT0            BIT 0xb9
0000            358   _PX1            BIT 0xba
0000            359   _PT1            BIT 0xbb
0000            360   _PS0            BIT 0xbc
0000            361   _PT2            BIT 0xbd
0000            362   _PSPI0          BIT 0xbe
0000            363   _P0_0           BIT 0x80
0000            364   _P0_1           BIT 0x81
0000            365   _P0_2           BIT 0x82
0000            366   _P0_3           BIT 0x83
0000            367   _P0_4           BIT 0x84
0000            368   _P0_5           BIT 0x85
0000            369   _P0_6           BIT 0x86
0000            370   _P0_7           BIT 0x87
0000            371   _P1_0           BIT 0x90
0000            372   _P1_1           BIT 0x91
0000            373   _P1_2           BIT 0x92
0000            374   _P1_3           BIT 0x93
0000            375   _P1_4           BIT 0x94
0000            376   _P1_5           BIT 0x95
0000            377   _P1_6           BIT 0x96
0000            378   _P1_7           BIT 0x97
0000            379   _P2_0           BIT 0xa0
0000            380   _P2_1           BIT 0xa1
0000            381   _P2_2           BIT 0xa2
0000            382   _P2_3           BIT 0xa3
0000            383   _P2_4           BIT 0xa4
0000            384   _P2_5           BIT 0xa5
0000            385   _P2_6           BIT 0xa6
0000            386   _P3_0           BIT 0xb0
0000            387   _P3_1           BIT 0xb1
0000            388   _P3_2           BIT 0xb2
0000            389   _P3_3           BIT 0xb3
0000            390   _P3_4           BIT 0xb4
0000            391   _P3_7           BIT 0xb7
0000            392   _CCF0           BIT 0xd8
0000            393   _CCF1           BIT 0xd9
0000            394   _CCF2           BIT 0xda
0000            395   _CCF3           BIT 0xdb
0000            396   _CCF4           BIT 0xdc
0000            397   _CCF5           BIT 0xdd
0000            398   _CR             BIT 0xde
0000            399   _CF             BIT 0xdf
0000            400   _PARITY         BIT 0xd0
0000            401   _F1             BIT 0xd1
0000            402   _OV             BIT 0xd2
0000            403   _RS0            BIT 0xd3
0000            404   _RS1            BIT 0xd4
0000            405   _F0             BIT 0xd5
0000            406   _AC             BIT 0xd6
0000            407   _CY             BIT 0xd7
0000            408   _RI             BIT 0x98
0000            409   _TI             BIT 0x99
0000            410   _RB8            BIT 0x9a
0000            411   _TB8            BIT 0x9b
0000            412   _REN            BIT 0x9c
0000            413   _CE             BIT 0x9d
0000            414   _SMODE          BIT 0x9e
0000            415   _RI1            BIT 0xc8
0000            416   _TI1            BIT 0xc9
0000            417   _RBX1           BIT 0xca
0000            418   _TBX1           BIT 0xcb
0000            419   _REN1           BIT 0xcc
0000            420   _PERR1          BIT 0xcd
0000            421   _OVR1           BIT 0xce
0000            422   _SI             BIT 0xc0
0000            423   _ACK            BIT 0xc1
0000            424   _ARBLOST        BIT 0xc2
0000            425   _ACKRQ          BIT 0xc3
0000            426   _STO            BIT 0xc4
0000            427   _STA            BIT 0xc5
0000            428   _TXMODE         BIT 0xc6
0000            429   _MASTER         BIT 0xc7
0000            430   _SPIEN          BIT 0xf8
0000            431   _TXNF           BIT 0xf9
0000            432   _NSSMD0         BIT 0xfa
0000            433   _NSSMD1         BIT 0xfb
0000            434   _RXOVRN         BIT 0xfc
0000            435   _MODF           BIT 0xfd
0000            436   _WCOL           BIT 0xfe
0000            437   _SPIF           BIT 0xff
0000            438   _IT0            BIT 0x88
0000            439   _IE0            BIT 0x89
0000            440   _IT1            BIT 0x8a
0000            441   _IE1            BIT 0x8b
0000            442   _TR0            BIT 0x8c
0000            443   _TF0            BIT 0x8d
0000            444   _TR1            BIT 0x8e
0000            445   _TF1            BIT 0x8f
0000            446   _T2XCLK0        BIT 0xc8
0000            447   _T2XCLK1        BIT 0xc9
0000            448   _TR2            BIT 0xca
0000            449   _T2SPLIT        BIT 0xcb
0000            450   _TF2CEN         BIT 0xcc
0000            451   _TF2LEN         BIT 0xcd
0000            452   _TF2L           BIT 0xce
0000            453   _TF2H           BIT 0xcf
0000            454   _T4XCLK0        BIT 0x98
0000            455   _T4XCLK1        BIT 0x99
0000            456   _TR4            BIT 0x9a
0000            457   _T4SPLIT        BIT 0x9b
0000            458   _TF4CEN         BIT 0x9c
0000            459   _TF4LEN         BIT 0x9d
0000            460   _TF4L           BIT 0x9e
0000            461   _TF4H           BIT 0x9f
0000            462   _T5XCLK0        BIT 0xc0
0000            463   _T5XCLK1        BIT 0xc1
0000            464   _TR5            BIT 0xc2
0000            465   _T5SPLIT        BIT 0xc3
0000            466   _TF5CEN         BIT 0xc4
0000            467   _TF5LEN         BIT 0xc5
0000            468   _TF5L           BIT 0xc6
0000            469   _TF5H           BIT 0xc7
0000            470   _RIE            BIT 0xd8
0000            471   _RXTO0          BIT 0xd9
0000            472   _RXTO1          BIT 0xda
0000            473   _RFRQ           BIT 0xdb
0000            474   _TIE            BIT 0xdc
0000            475   _TXHOLD         BIT 0xdd
0000            476   _TXNF1          BIT 0xde
0000            477   _TFRQ           BIT 0xdf
0000            478   ;--------------------------------------------------------
0000            479   ; overlayable register banks
0000            480   ;--------------------------------------------------------
0000            481            rbank0 segment data overlay
0000            482   ;--------------------------------------------------------
0000            483   ; internal ram data
0000            484   ;--------------------------------------------------------
0000            485            rseg R_DSEG
0000            486   _overflow_count:
0000            487            ds 1
0001            488   _I2C_Write_PARM_2:
0001            489            ds 1
0002            490   ;--------------------------------------------------------
0002            491   ; overlayable items in internal ram 
0002            492   ;--------------------------------------------------------
0000            493            rseg    R_OSEG
0000            494   ;--------------------------------------------------------
0000            495   ; indirectly addressable internal ram data
0000            496   ;--------------------------------------------------------
0000            497            rseg R_ISEG
0000            498   ;--------------------------------------------------------
0000            499   ; absolute internal ram data
0000            500   ;--------------------------------------------------------
0000            501            DSEG
0000            502   ;--------------------------------------------------------
0000            503   ; bit data
0000            504   ;--------------------------------------------------------
0000            505            rseg R_BSEG
0000            506   ;--------------------------------------------------------
0000            507   ; paged external ram data
0000            508   ;--------------------------------------------------------
0000            509            rseg R_PSEG
0000            510   ;--------------------------------------------------------
0000            511   ; external ram data
0000            512   ;--------------------------------------------------------
0000            513            rseg R_XSEG
0000            514   ;--------------------------------------------------------
0000            515   ; absolute external ram data
0000            516   ;--------------------------------------------------------
0000            517            XSEG
0000            518   ;--------------------------------------------------------
0000            519   ; external initialized ram data
0000            520   ;--------------------------------------------------------
0000            521            rseg R_IXSEG
0000            522            rseg R_HOME
0000            523            rseg R_GSINIT
0000            524            rseg R_CSEG
0000            525   ;--------------------------------------------------------
0000            526   ; Reset entry point and interrupt vectors
0000            527   ;--------------------------------------------------------
0000            528            CSEG at 0x0000
0000 020000     529            ljmp    _crt0
0003            530   ;--------------------------------------------------------
0003            531   ; global & static initialisations
0003            532   ;--------------------------------------------------------
0000            533            rseg R_HOME
0000            534            rseg R_GSINIT
0000            535            rseg R_GSINIT
0000            536   ;--------------------------------------------------------
0000            537   ; data variables initialization
0000            538   ;--------------------------------------------------------
0000            539            rseg R_DINIT
0000            540            ; The linker places a 'ret' at the end of segment R_DINIT.
0000            541   ;--------------------------------------------------------
0000            542   ; code
0000            543   ;--------------------------------------------------------
0000            544            rseg R_CSEG
0000            545   ;------------------------------------------------------------
0000            546   ;Allocation info for local variables in function '_c51_external_startup'
0000            547   ;------------------------------------------------------------
0000            548   ;------------------------------------------------------------
0000            549   ;        MPU.c:17: char _c51_external_startup (void)
0000            550   ;        -----------------------------------------
0000            551   ;         function _c51_external_startup
0000            552   ;        -----------------------------------------
0000            553   __c51_external_startup:
0000            554            using   0
0000            555   ;        MPU.c:20: SFRPAGE = 0x00;
0000 75A700     556            mov     _SFRPAGE,#0x00
0003            557   ;        MPU.c:21: WDTCN = 0xDE; //First key
0003 7597DE     558            mov     _WDTCN,#0xDE
0006            559   ;        MPU.c:22: WDTCN = 0xAD; //Second key
0006 7597AD     560            mov     _WDTCN,#0xAD
0009            561   ;        MPU.c:24: VDM0CN |= 0x80;
0009 43FF80     562            orl     _VDM0CN,#0x80
000C            563   ;        MPU.c:25: RSTSRC = 0x02;
000C 75EF02     564            mov     _RSTSRC,#0x02
000F            565   ;        MPU.c:32: SFRPAGE = 0x10;
000F 75A710     566            mov     _SFRPAGE,#0x10
0012            567   ;        MPU.c:33: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     568            mov     _PFE0CN,#0x20
0015            569   ;        MPU.c:34: SFRPAGE = 0x00;
0015 75A700     570            mov     _SFRPAGE,#0x00
0018            571   ;        MPU.c:55: CLKSEL = 0x00;
0018 75A900     572            mov     _CLKSEL,#0x00
001B            573   ;        MPU.c:56: CLKSEL = 0x00;
001B 75A900     574            mov     _CLKSEL,#0x00
001E            575   ;        MPU.c:57: while ((CLKSEL & 0x80) == 0);
001E            576   L002001?:
001E E5A9       577            mov     a,_CLKSEL
0020 30E7B0     578            jnb     acc.7,L002001?
0023            579   ;        MPU.c:58: CLKSEL = 0x03;
0023 75A903     580            mov     _CLKSEL,#0x03
0026            581   ;        MPU.c:59: CLKSEL = 0x03;
0026 75A903     582            mov     _CLKSEL,#0x03
0029            583   ;        MPU.c:60: while ((CLKSEL & 0x80) == 0);
0029            584   L002004?:
0029 E5A9       585            mov     a,_CLKSEL
002B 30E730     586            jnb     acc.7,L002004?
002E            587   ;        MPU.c:65: P0MDOUT |= 0x10; // Enable UART0 TX as push-pull output
002E 43A410     588            orl     _P0MDOUT,#0x10
0031            589   ;        MPU.c:66: XBR0     = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)                     
0031 75E101     590            mov     _XBR0,#0x01
0034            591   ;        MPU.c:67: XBR1     = 0X00;
0034 75E200     592            mov     _XBR1,#0x00
0037            593   ;        MPU.c:68: XBR2     = 0x40; // Enable crossbar and weak pull-ups
0037 75E340     594            mov     _XBR2,#0x40
003A            595   ;        MPU.c:74: SCON0 = 0x10;
003A 759810     596            mov     _SCON0,#0x10
003D            597   ;        MPU.c:75: CKCON0 |= 0b_0000_0000 ; // Timer 1 uses the system clock divided by 12.
003D 858E8E     598            mov     _CKCON0,_CKCON0
0040            599   ;        MPU.c:76: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
0040 758DE6     600            mov     _TH1,#0xE6
0043            601   ;        MPU.c:77: TL1 = TH1;      // Init Timer1
0043 858D8B     602            mov     _TL1,_TH1
0046            603   ;        MPU.c:78: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0046 53890F     604            anl     _TMOD,#0x0F
0049            605   ;        MPU.c:79: TMOD |=  0x20;
0049 438920     606            orl     _TMOD,#0x20
004C            607   ;        MPU.c:80: TR1 = 1; // START Timer1
004C D28E       608            setb    _TR1
004E            609   ;        MPU.c:81: TI = 1;  // Indicate TX0 ready
004E D299       610            setb    _TI
0050            611   ;        MPU.c:83: return 0;
0050 758200     612            mov     dpl,#0x00
0053 22         613            ret
0054            614   ;------------------------------------------------------------
0054            615   ;Allocation info for local variables in function 'Timer3us'
0054            616   ;------------------------------------------------------------
0054            617   ;us                        Allocated to registers r2 
0054            618   ;i                         Allocated to registers r3 
0054            619   ;------------------------------------------------------------
0054            620   ;        MPU.c:87: void Timer3us(unsigned char us)
0054            621   ;        -----------------------------------------
0054            622   ;         function Timer3us
0054            623   ;        -----------------------------------------
0054            624   _Timer3us:
0054 AA82       625            mov     r2,dpl
0056            626   ;        MPU.c:92: CKCON0|=0b_0100_0000;
0056 438E40     627            orl     _CKCON0,#0x40
0059            628   ;        MPU.c:94: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0059 7592B8     629            mov     _TMR3RL,#0xB8
005C 7593FF     630            mov     (_TMR3RL >> 8),#0xFF
005F            631   ;        MPU.c:95: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
005F 859294     632            mov     _TMR3,_TMR3RL
0062 859395     633            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
0065            634   ;        MPU.c:97: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
0065 759104     635            mov     _TMR3CN0,#0x04
0068            636   ;        MPU.c:98: for (i = 0; i < us; i++)       // Count <us> overflows
0068 7B00       637            mov     r3,#0x00
006A            638   L003004?:
006A C3         639            clr     c
006B EB         640            mov     a,r3
006C 9A         641            subb    a,r2
006D 5000       642            jnc     L003007?
006F            643   ;        MPU.c:100: while (!(TMR3CN0 & 0x80));  // Wait for overflow
006F            644   L003001?:
006F E591       645            mov     a,_TMR3CN0
0071 30E730     646            jnb     acc.7,L003001?
0074            647   ;        MPU.c:101: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
0074 53917F     648            anl     _TMR3CN0,#0x7F
0077            649   ;        MPU.c:98: for (i = 0; i < us; i++)       // Count <us> overflows
0077 0B         650            inc     r3
0078 8000       651            sjmp    L003004?
007A            652   L003007?:
007A            653   ;        MPU.c:103: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
007A 759100     654            mov     _TMR3CN0,#0x00
007D 22         655            ret
007E            656   ;------------------------------------------------------------
007E            657   ;Allocation info for local variables in function 'waitms'
007E            658   ;------------------------------------------------------------
007E            659   ;ms                        Allocated to registers r2 r3 
007E            660   ;j                         Allocated to registers r2 r3 
007E            661   ;------------------------------------------------------------
007E            662   ;        MPU.c:106: void waitms (unsigned int ms)
007E            663   ;        -----------------------------------------
007E            664   ;         function waitms
007E            665   ;        -----------------------------------------
007E            666   _waitms:
007E AA82       667            mov     r2,dpl
0080 AB83       668            mov     r3,dph
0082            669   ;        MPU.c:109: for(j=ms; j!=0; j--)
0082            670   L004001?:
0082 BA00F0     671            cjne    r2,#0x00,L004010?
0085 BB00F0     672            cjne    r3,#0x00,L004010?
0088 22         673            ret
0089            674   L004010?:
0089            675   ;        MPU.c:111: Timer3us(249);
0089 7582F9     676            mov     dpl,#0xF9
008C C002       677            push    ar2
008E C003       678            push    ar3
0090 120000     679            lcall   _Timer3us
0093            680   ;        MPU.c:112: Timer3us(249);
0093 7582F9     681            mov     dpl,#0xF9
0096 120000     682            lcall   _Timer3us
0099            683   ;        MPU.c:113: Timer3us(249);
0099 7582F9     684            mov     dpl,#0xF9
009C 120000     685            lcall   _Timer3us
009F            686   ;        MPU.c:114: Timer3us(250);
009F 7582FA     687            mov     dpl,#0xFA
00A2 120000     688            lcall   _Timer3us
00A5 D003       689            pop     ar3
00A7 D002       690            pop     ar2
00A9            691   ;        MPU.c:109: for(j=ms; j!=0; j--)
00A9 1A         692            dec     r2
00AA BAFF30     693            cjne    r2,#0xff,L004011?
00AD 1B         694            dec     r3
00AE            695   L004011?:
00AE 8000       696            sjmp    L004001?
00B0            697   ;------------------------------------------------------------
00B0            698   ;Allocation info for local variables in function 'TIMER0_Init'
00B0            699   ;------------------------------------------------------------
00B0            700   ;------------------------------------------------------------
00B0            701   ;        MPU.c:118: void TIMER0_Init(void)
00B0            702   ;        -----------------------------------------
00B0            703   ;         function TIMER0_Init
00B0            704   ;        -----------------------------------------
00B0            705   _TIMER0_Init:
00B0            706   ;        MPU.c:120: TMOD&=0b_1111_0000; // Set the bits of Timer/Counter 0 to zero
00B0 5389F0     707            anl     _TMOD,#0xF0
00B3            708   ;        MPU.c:121: TMOD|=0b_0000_0001; // Timer/Counter 0 used as a 16-bit timer
00B3 438901     709            orl     _TMOD,#0x01
00B6            710   ;        MPU.c:122: TR0=0; // Stop Timer/Counter 0
00B6 C28C       711            clr     _TR0
00B8 22         712            ret
00B9            713   ;------------------------------------------------------------
00B9            714   ;Allocation info for local variables in function 'I2C_Init'
00B9            715   ;------------------------------------------------------------
00B9            716   ;------------------------------------------------------------
00B9            717   ;        MPU.c:125: void I2C_Init()
00B9            718   ;        -----------------------------------------
00B9            719   ;         function I2C_Init
00B9            720   ;        -----------------------------------------
00B9            721   _I2C_Init:
00B9            722   ;        MPU.c:129: P2MDOUT |= 0x03; //Set P2.0 (SDA) and P2.1(SCL) as Push pull mode
00B9 43A603     723            orl     _P2MDOUT,#0x03
00BC            724   ;        MPU.c:130: P2SKIP |= 0x03; // Skip Crossbar decoding for P2.0 and P2.1
00BC 43CC03     725            orl     _P2SKIP,#0x03
00BF            726   ;        MPU.c:138: SMB0CF       = 0x00;
00BF 75C100     727            mov     _SMB0CF,#0x00
00C2            728   ;        MPU.c:139: SMB0CF |= 0xC0;
00C2 43C1C0     729            orl     _SMB0CF,#0xC0
00C5            730   ;        MPU.c:147: SMB0ADM |= 0x01;
00C5 43D601     731            orl     _SMB0ADM,#0x01
00C8 22         732            ret
00C9            733   ;------------------------------------------------------------
00C9            734   ;Allocation info for local variables in function 'I2C_Write'
00C9            735   ;------------------------------------------------------------
00C9            736   ;data_input                Allocated with name '_I2C_Write_PARM_2'
00C9            737   ;addr                      Allocated to registers r2 
00C9            738   ;------------------------------------------------------------
00C9            739   ;        MPU.c:150: void I2C_Write(uint8_t addr, uint8_t data_input)
00C9            740   ;        -----------------------------------------
00C9            741   ;         function I2C_Write
00C9            742   ;        -----------------------------------------
00C9            743   _I2C_Write:
00C9 AA82       744            mov     r2,dpl
00CB            745   ;        MPU.c:165: SMB0CN0 |= 0x20; //Sets SMB0CN0.5 (STA) to start an I2C transfer
00CB 43C020     746            orl     _SMB0CN0,#0x20
00CE            747   ;        MPU.c:167: while (SMB0CN0 & 0x20)
00CE EA         748            mov     a,r2
00CF 2A         749            add     a,r2
00D0 FA         750            mov     r2,a
00D1 430201     751            orl     ar2,#0x01
00D4            752   L007004?:
00D4 E5C0       753            mov     a,_SMB0CN0
00D6 30E5B0     754            jnb     acc.5,L007006?
00D9            755   ;        MPU.c:170: SMB0CN0 &= ~(0x30);
00D9 53C0CF     756            anl     _SMB0CN0,#0xCF
00DC            757   ;        MPU.c:172: SMB0DAT = (addr << 1) | 0x01;
00DC 8AC2       758            mov     _SMB0DAT,r2
00DE            759   ;        MPU.c:174: SMB0CN0 &= ~(0x01);
00DE 53C0FE     760            anl     _SMB0CN0,#0xFE
00E1            761   ;        MPU.c:176: if (SMB0CN0 & 0x02)
00E1 E5C0       762            mov     a,_SMB0CN0
00E3 30E1F0     763            jnb     acc.1,L007002?
00E6            764   ;        MPU.c:178: printf("ACK recieved\n");
00E6 C002       765            push    ar2
00E8 7430       766            mov     a,#__str_0
00EA C0E0       767            push    acc
00EC 74C2       768            mov     a,#(__str_0 >> 8)
00EE C0E0       769            push    acc
00F0 7480       770            mov     a,#0x80
00F2 C0E0       771            push    acc
00F4 120000     772            lcall   _printf
00F7 1581       773            dec     sp
00F9 1581       774            dec     sp
00FB 1581       775            dec     sp
00FD D002       776            pop     ar2
00FF 8000       777            sjmp    L007004?
0101            778   L007002?:
0101            779   ;        MPU.c:183: SMB0CN0 |= 0x20; //Sets SMB0CN0.5 (STA) to start an I2C transfer
0101 43C020     780            orl     _SMB0CN0,#0x20
0104            781   ;        MPU.c:184: SMB0CN0 &= ~(0x01); // Clear SI
0104 53C0FE     782            anl     _SMB0CN0,#0xFE
0107 8000       783            sjmp    L007004?
0109            784   L007006?:
0109            785   ;        MPU.c:187: printf("Loop exited\n");
0109 74F0       786            mov     a,#__str_1
010B C0E0       787            push    acc
010D 74C2       788            mov     a,#(__str_1 >> 8)
010F C0E0       789            push    acc
0111 7480       790            mov     a,#0x80
0113 C0E0       791            push    acc
0115 120000     792            lcall   _printf
0118 1581       793            dec     sp
011A 1581       794            dec     sp
011C 1581       795            dec     sp
011E            796   ;        MPU.c:189: while (!(SMB0CN0 & 0x02));
011E            797   L007007?:
011E E5C0       798            mov     a,_SMB0CN0
0120 30E130     799            jnb     acc.1,L007007?
0123            800   ;        MPU.c:190: printf("Cleared interrupt flag\n");
0123 7470       801            mov     a,#__str_2
0125 C0E0       802            push    acc
0127 74C3       803            mov     a,#(__str_2 >> 8)
0129 C0E0       804            push    acc
012B 7480       805            mov     a,#0x80
012D C0E0       806            push    acc
012F 120000     807            lcall   _printf
0132 1581       808            dec     sp
0134 1581       809            dec     sp
0136 1581       810            dec     sp
0138            811   ;        MPU.c:195: while (!(SMB0CN0 & 0x02)); //Waiting for SMB0CN0.0 (ACK) to indicate transfer complete
0138            812   L007010?:
0138 E5C0       813            mov     a,_SMB0CN0
013A 30E1B0     814            jnb     acc.1,L007010?
013D            815   ;        MPU.c:198: SMB0DAT = data_input;
013D 8570C2     816            mov     _SMB0DAT,_I2C_Write_PARM_2
0140            817   ;        MPU.c:201: while (!(SMB0CN0 & 0x02)); //Waiting for SMB0CN0.0 (ACK) to indicate transfer complete
0140            818   L007013?:
0140 E5C0       819            mov     a,_SMB0CN0
0142 30E1F0     820            jnb     acc.1,L007013?
0145            821   ;        MPU.c:204: SMB0CN0 |= 0x10;  //Sets SMB0CN0.4 (STO) to stop an I2C transfer
0145 43C010     822            orl     _SMB0CN0,#0x10
0148 22         823            ret
0149            824   ;------------------------------------------------------------
0149            825   ;Allocation info for local variables in function 'I2C_Read'
0149            826   ;------------------------------------------------------------
0149            827   ;addr                      Allocated to registers r2 
0149            828   ;data_output               Allocated to registers 
0149            829   ;------------------------------------------------------------
0149            830   ;        MPU.c:207: uint8_t I2C_Read(uint8_t addr)
0149            831   ;        -----------------------------------------
0149            832   ;         function I2C_Read
0149            833   ;        -----------------------------------------
0149            834   _I2C_Read:
0149 AA82       835            mov     r2,dpl
014B            836   ;        MPU.c:212: SMB0CN0 |= 0x20; //Sets SMB0CN0.5 (STA) to start an I2C transfer
014B 43C020     837            orl     _SMB0CN0,#0x20
014E            838   ;        MPU.c:214: printf("Transfer started");
014E C002       839            push    ar2
0150 7430       840            mov     a,#__str_3
0152 C0E0       841            push    acc
0154 74C4       842            mov     a,#(__str_3 >> 8)
0156 C0E0       843            push    acc
0158 7480       844            mov     a,#0x80
015A C0E0       845            push    acc
015C 120000     846            lcall   _printf
015F 1581       847            dec     sp
0161 1581       848            dec     sp
0163 1581       849            dec     sp
0165            850   ;        MPU.c:215: printf("SMB0CN0: %02X\n", SMB0CN0); //Waiting for SMB0CN0.0 (ACK) to indicate transfer complete
0165 ABC0       851            mov     r3,_SMB0CN0
0167 7C00       852            mov     r4,#0x00
0169 C003       853            push    ar3
016B C004       854            push    ar4
016D 7470       855            mov     a,#__str_4
016F C0E0       856            push    acc
0171 74C4       857            mov     a,#(__str_4 >> 8)
0173 C0E0       858            push    acc
0175 7480       859            mov     a,#0x80
0177 C0E0       860            push    acc
0179 120000     861            lcall   _printf
017C E581       862            mov     a,sp
017E 24FB       863            add     a,#0xfb
0180 F581       864            mov     sp,a
0182 D002       865            pop     ar2
0184            866   ;        MPU.c:217: while (!(SMB0CN0 & 0x02)); 
0184            867   L008001?:
0184 E5C0       868            mov     a,_SMB0CN0
0186 30E1B0     869            jnb     acc.1,L008001?
0189            870   ;        MPU.c:219: printf("Transfer complete");
0189 C002       871            push    ar2
018B 74F0       872            mov     a,#__str_5
018D C0E0       873            push    acc
018F 74C4       874            mov     a,#(__str_5 >> 8)
0191 C0E0       875            push    acc
0193 7480       876            mov     a,#0x80
0195 C0E0       877            push    acc
0197 120000     878            lcall   _printf
019A 1581       879            dec     sp
019C 1581       880            dec     sp
019E 1581       881            dec     sp
01A0 D002       882            pop     ar2
01A2            883   ;        MPU.c:222: SMB0DAT = (addr << 1) | 1;
01A2 EA         884            mov     a,r2
01A3 2A         885            add     a,r2
01A4 FA         886            mov     r2,a
01A5 7401       887            mov     a,#0x01
01A7 4A         888            orl     a,r2
01A8 F5C2       889            mov     _SMB0DAT,a
01AA            890   ;        MPU.c:225: while (!(SMB0CN0 & 0x02)); //Waiting for SMB0CN0.0 (ACK) to indicate transfer complete
01AA            891   L008004?:
01AA E5C0       892            mov     a,_SMB0CN0
01AC 30E130     893            jnb     acc.1,L008004?
01AF            894   ;        MPU.c:228: data_output = SMB0DAT;
01AF 85C282     895            mov     dpl,_SMB0DAT
01B2            896   ;        MPU.c:231: SMB0CN0 |= 0x10;  //Sets SMB0CN0.4 (STO) to stop an I2C transfer
01B2 43C010     897            orl     _SMB0CN0,#0x10
01B5            898   ;        MPU.c:233: return data_output;
01B5 22         899            ret
01B6            900   ;------------------------------------------------------------
01B6            901   ;Allocation info for local variables in function 'MPU6050_Init'
01B6            902   ;------------------------------------------------------------
01B6            903   ;------------------------------------------------------------
01B6            904   ;        MPU.c:236: void MPU6050_Init()
01B6            905   ;        -----------------------------------------
01B6            906   ;         function MPU6050_Init
01B6            907   ;        -----------------------------------------
01B6            908   _MPU6050_Init:
01B6            909   ;        MPU.c:238: I2C_Write(0x6B, 0x00);
01B6 757000     910            mov     _I2C_Write_PARM_2,#0x00
01B9 75826B     911            mov     dpl,#0x6B
01BC 020000     912            ljmp    _I2C_Write
01BF            913   ;------------------------------------------------------------
01BF            914   ;Allocation info for local variables in function 'Test_I2C'
01BF            915   ;------------------------------------------------------------
01BF            916   ;data_in                   Allocated to registers r2 
01BF            917   ;------------------------------------------------------------
01BF            918   ;        MPU.c:241: void Test_I2C()
01BF            919   ;        -----------------------------------------
01BF            920   ;         function Test_I2C
01BF            921   ;        -----------------------------------------
01BF            922   _Test_I2C:
01BF            923   ;        MPU.c:243: uint8_t data_in = I2C_Read(0x75);
01BF 758275     924            mov     dpl,#0x75
01C2 120000     925            lcall   _I2C_Read
01C5 AA82       926            mov     r2,dpl
01C7            927   ;        MPU.c:244: if (data_in == 0x68)
01C7 BA6870     928            cjne    r2,#0x68,L010002?
01CA            929   ;        MPU.c:246: printf("I2C is working correctly\n");
01CA 74B0       930            mov     a,#__str_6
01CC C0E0       931            push    acc
01CE 74C5       932            mov     a,#(__str_6 >> 8)
01D0 C0E0       933            push    acc
01D2 7480       934            mov     a,#0x80
01D4 C0E0       935            push    acc
01D6 120000     936            lcall   _printf
01D9 1581       937            dec     sp
01DB 1581       938            dec     sp
01DD 1581       939            dec     sp
01DF 22         940            ret
01E0            941   L010002?:
01E0            942   ;        MPU.c:251: printf("I2C is not working correctly: %u\n", data_in);
01E0 7B00       943            mov     r3,#0x00
01E2 C002       944            push    ar2
01E4 C003       945            push    ar3
01E6 74F0       946            mov     a,#__str_7
01E8 C0E0       947            push    acc
01EA 74C5       948            mov     a,#(__str_7 >> 8)
01EC C0E0       949            push    acc
01EE 7480       950            mov     a,#0x80
01F0 C0E0       951            push    acc
01F2 120000     952            lcall   _printf
01F5 E581       953            mov     a,sp
01F7 24FB       954            add     a,#0xfb
01F9 F581       955            mov     sp,a
01FB 22         956            ret
01FC            957   ;------------------------------------------------------------
01FC            958   ;Allocation info for local variables in function 'main'
01FC            959   ;------------------------------------------------------------
01FC            960   ;------------------------------------------------------------
01FC            961   ;        MPU.c:255: void main (void) 
01FC            962   ;        -----------------------------------------
01FC            963   ;         function main
01FC            964   ;        -----------------------------------------
01FC            965   _main:
01FC            966   ;        MPU.c:260: waitms(500); // Give PuTTY a chance to start.
01FC 9001F4     967            mov     dptr,#0x01F4
01FF 120000     968            lcall   _waitms
0202            969   ;        MPU.c:261: printf("\x1b[2J \n"); // Clear screen using ANSI escape sequence.
0202 7430       970            mov     a,#__str_8
0204 C0E0       971            push    acc
0206 74C6       972            mov     a,#(__str_8 >> 8)
0208 C0E0       973            push    acc
020A 7480       974            mov     a,#0x80
020C C0E0       975            push    acc
020E 120000     976            lcall   _printf
0211 1581       977            dec     sp
0213 1581       978            dec     sp
0215 1581       979            dec     sp
0217            980   ;        MPU.c:266: __FILE__, __DATE__, __TIME__);
0217            981   ;        MPU.c:265: "Compiled: %s, %s\n\n",
0217 7470       982            mov     a,#__str_12
0219 C0E0       983            push    acc
021B 74C6       984            mov     a,#(__str_12 >> 8)
021D C0E0       985            push    acc
021F 7480       986            mov     a,#0x80
0221 C0E0       987            push    acc
0223 74B0       988            mov     a,#__str_11
0225 C0E0       989            push    acc
0227 74C6       990            mov     a,#(__str_11 >> 8)
0229 C0E0       991            push    acc
022B 7480       992            mov     a,#0x80
022D C0E0       993            push    acc
022F 74F0       994            mov     a,#__str_10
0231 C0E0       995            push    acc
0233 74C6       996            mov     a,#(__str_10 >> 8)
0235 C0E0       997            push    acc
0237 7480       998            mov     a,#0x80
0239 C0E0       999            push    acc
023B 7430      1000            mov     a,#__str_9
023D C0E0      1001            push    acc
023F 74C7      1002            mov     a,#(__str_9 >> 8)
0241 C0E0      1003            push    acc
0243 7480      1004            mov     a,#0x80
0245 C0E0      1005            push    acc
0247 120000    1006            lcall   _printf
024A E581      1007            mov     a,sp
024C 24F4      1008            add     a,#0xf4
024E F581      1009            mov     sp,a
0250           1010   ;        MPU.c:268: I2C_Init();
0250 120000    1011            lcall   _I2C_Init
0253           1012   ;        MPU.c:269: printf("Init Done\n");
0253 7470      1013            mov     a,#__str_13
0255 C0E0      1014            push    acc
0257 74C7      1015            mov     a,#(__str_13 >> 8)
0259 C0E0      1016            push    acc
025B 7480      1017            mov     a,#0x80
025D C0E0      1018            push    acc
025F 120000    1019            lcall   _printf
0262 1581      1020            dec     sp
0264 1581      1021            dec     sp
0266 1581      1022            dec     sp
0268           1023   ;        MPU.c:270: SMB0CN0 |= 0xE0; //Sets SMB0CN0.5 (STA) to start an I2C transfer
0268 43C0E0    1024            orl     _SMB0CN0,#0xE0
026B           1025   ;        MPU.c:271: printf("%02X\n", SMB0CN0);
026B AAC0      1026            mov     r2,_SMB0CN0
026D 7B00      1027            mov     r3,#0x00
026F C002      1028            push    ar2
0271 C003      1029            push    ar3
0273 74B0      1030            mov     a,#__str_14
0275 C0E0      1031            push    acc
0277 74C7      1032            mov     a,#(__str_14 >> 8)
0279 C0E0      1033            push    acc
027B 7480      1034            mov     a,#0x80
027D C0E0      1035            push    acc
027F 120000    1036            lcall   _printf
0282 E581      1037            mov     a,sp
0284 24FB      1038            add     a,#0xfb
0286 F581      1039            mov     sp,a
0288           1040   ;        MPU.c:273: printf("%02X\n", SMB0CN0);
0288 AAC0      1041            mov     r2,_SMB0CN0
028A 7B00      1042            mov     r3,#0x00
028C C002      1043            push    ar2
028E C003      1044            push    ar3
0290 74B0      1045            mov     a,#__str_14
0292 C0E0      1046            push    acc
0294 74C7      1047            mov     a,#(__str_14 >> 8)
0296 C0E0      1048            push    acc
0298 7480      1049            mov     a,#0x80
029A C0E0      1050            push    acc
029C 120000    1051            lcall   _printf
029F E581      1052            mov     a,sp
02A1 24FB      1053            add     a,#0xfb
02A3 F581      1054            mov     sp,a
02A5           1055   ;        MPU.c:275: MPU6050_Init();
02A5 120000    1056            lcall   _MPU6050_Init
02A8           1057   ;        MPU.c:277: printf("MPU6050 Init Done\n");
02A8 74F0      1058            mov     a,#__str_15
02AA C0E0      1059            push    acc
02AC 74C7      1060            mov     a,#(__str_15 >> 8)
02AE C0E0      1061            push    acc
02B0 7480      1062            mov     a,#0x80
02B2 C0E0      1063            push    acc
02B4 120000    1064            lcall   _printf
02B7 1581      1065            dec     sp
02B9 1581      1066            dec     sp
02BB 1581      1067            dec     sp
02BD           1068   ;        MPU.c:280: Test_I2C();
02BD 020000    1069            ljmp    _Test_I2C
02C0           1070            rseg R_CSEG
02C0           1071   
0000           1072            rseg R_XINIT
0000           1073   
0000           1074            rseg R_CONST
0000           1075   __str_0:
0000 41434B20  1076            db 'ACK recieved'
     72656369
     65766564
000C 0A        1077            db 0x0A
000D 00        1078            db 0x00
000E           1079   __str_1:
000E 4C6F6F70  1080            db 'Loop exited'
     20657869
     746564
0019 0A        1081            db 0x0A
001A 00        1082            db 0x00
001B           1083   __str_2:
001B 436C6561  1084            db 'Cleared interrupt flag'
     72656420
     696E7465
     72727570
     7420666C
     6167
0031 0A        1085            db 0x0A
0032 00        1086            db 0x00
0033           1087   __str_3:
0033 5472616E  1088            db 'Transfer started'
     73666572
     20737461
     72746564
0043 00        1089            db 0x00
0044           1090   __str_4:
0044 534D4230  1091            db 'SMB0CN0: %02X'
     434E303A
     20253032
     58
0051 0A        1092            db 0x0A
0052 00        1093            db 0x00
0053           1094   __str_5:
0053 5472616E  1095            db 'Transfer complete'
     73666572
     20636F6D
     706C6574
     65
0064 00        1096            db 0x00
0065           1097   __str_6:
0065 49324320  1098            db 'I2C is working correctly'
     69732077
     6F726B69
     6E672063
     6F727265
     63746C79
007D 0A        1099            db 0x0A
007E 00        1100            db 0x00
007F           1101   __str_7:
007F 49324320  1102            db 'I2C is not working correctly: %u'
     6973206E
     6F742077
     6F726B69
     6E672063
     6F727265
     63746C79
     3A202575
009F 0A        1103            db 0x0A
00A0 00        1104            db 0x00
00A1           1105   __str_8:
00A1 1B        1106            db 0x1B
00A2 5B324A20  1107            db '[2J '
00A6 0A        1108            db 0x0A
00A7 00        1109            db 0x00
00A8           1110   __str_9:
00A8 45464D38  1111            db 'EFM8 '
     20
00AD 0A        1112            db 0x0A
00AE 46696C65  1113            db 'File: %s'
     3A202573
00B6 0A        1114            db 0x0A
00B7 436F6D70  1115            db 'Compiled: %s, %s'
     696C6564
     3A202573
     2C202573
00C7 0A        1116            db 0x0A
00C8 0A        1117            db 0x0A
00C9 00        1118            db 0x00
00CA           1119   __str_10:
00CA 4D50552E  1120            db 'MPU.c'
     63
00CF 00        1121            db 0x00
00D0           1122   __str_11:
00D0 41707220  1123            db 'Apr  1 2024'
     20312032
     303234
00DB 00        1124            db 0x00
00DC           1125   __str_12:
00DC 31373A30  1126            db '17:08:19'
     383A3139
00E4 00        1127            db 0x00
00E5           1128   __str_13:
00E5 496E6974  1129            db 'Init Done'
     20446F6E
     65
00EE 0A        1130            db 0x0A
00EF 00        1131            db 0x00
00F0           1132   __str_14:
00F0 25303258  1133            db '%02X'
00F4 0A        1134            db 0x0A
00F5 00        1135            db 0x00
00F6           1136   __str_15:
00F6 4D505536  1137            db 'MPU6050 Init Done'
     30353020
     496E6974
     20446F6E
     65
0107 0A        1138            db 0x0A
0108 00        1139            db 0x00
0109           1140   
0003           1141            CSEG
0003           1142   
0003           1143   end
