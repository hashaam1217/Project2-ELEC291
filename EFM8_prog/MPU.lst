0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Mon Apr 01 11:34:19 2024
0000              5   ;--------------------------------------------------------
                  5   $name MPU
                  6   $optc51 --model-small
0000              8            R_DSEG    segment data
0000              9            R_CSEG    segment code
0000             10            R_BSEG    segment bit
0000             11            R_XSEG    segment xdata
0000             12            R_PSEG    segment xdata
0000             13            R_ISEG    segment idata
0000             14            R_OSEG    segment data overlay
0000             15            BIT_BANK  segment data overlay
0000             16            R_HOME    segment code
0000             17            R_GSINIT  segment code
0000             18            R_IXSEG   segment xdata
0000             19            R_CONST   segment code
0000             20            R_XINIT   segment code
0000             21            R_DINIT   segment code
0000             22   
0000             23   ;--------------------------------------------------------
0000             24   ; Public variables in this module
0000             25   ;--------------------------------------------------------
0000             26            public _I2C_Write_PARM_2
0000             27            public _main
0000             28            public _Test_I2C
0000             29            public _MPU6050_Init
0000             30            public _I2C_Read
0000             31            public _I2C_Write
0000             32            public _I2C_Init
0000             33            public _TIMER0_Init
0000             34            public _waitms
0000             35            public _Timer3us
0000             36            public __c51_external_startup
0000             37            public _overflow_count
0000             38   ;--------------------------------------------------------
0000             39   ; Special Function Registers
0000             40   ;--------------------------------------------------------
0000             41   _ACC            DATA 0xe0
0000             42   _ADC0ASAH       DATA 0xb6
0000             43   _ADC0ASAL       DATA 0xb5
0000             44   _ADC0ASCF       DATA 0xa1
0000             45   _ADC0ASCT       DATA 0xc7
0000             46   _ADC0CF0        DATA 0xbc
0000             47   _ADC0CF1        DATA 0xb9
0000             48   _ADC0CF2        DATA 0xdf
0000             49   _ADC0CN0        DATA 0xe8
0000             50   _ADC0CN1        DATA 0xb2
0000             51   _ADC0CN2        DATA 0xb3
0000             52   _ADC0GTH        DATA 0xc4
0000             53   _ADC0GTL        DATA 0xc3
0000             54   _ADC0H          DATA 0xbe
0000             55   _ADC0L          DATA 0xbd
0000             56   _ADC0LTH        DATA 0xc6
0000             57   _ADC0LTL        DATA 0xc5
0000             58   _ADC0MX         DATA 0xbb
0000             59   _B              DATA 0xf0
0000             60   _CKCON0         DATA 0x8e
0000             61   _CKCON1         DATA 0xa6
0000             62   _CLEN0          DATA 0xc6
0000             63   _CLIE0          DATA 0xc7
0000             64   _CLIF0          DATA 0xe8
0000             65   _CLKSEL         DATA 0xa9
0000             66   _CLOUT0         DATA 0xd1
0000             67   _CLU0CF         DATA 0xb1
0000             68   _CLU0FN         DATA 0xaf
0000             69   _CLU0MX         DATA 0x84
0000             70   _CLU1CF         DATA 0xb3
0000             71   _CLU1FN         DATA 0xb2
0000             72   _CLU1MX         DATA 0x85
0000             73   _CLU2CF         DATA 0xb6
0000             74   _CLU2FN         DATA 0xb5
0000             75   _CLU2MX         DATA 0x91
0000             76   _CLU3CF         DATA 0xbf
0000             77   _CLU3FN         DATA 0xbe
0000             78   _CLU3MX         DATA 0xae
0000             79   _CMP0CN0        DATA 0x9b
0000             80   _CMP0CN1        DATA 0x99
0000             81   _CMP0MD         DATA 0x9d
0000             82   _CMP0MX         DATA 0x9f
0000             83   _CMP1CN0        DATA 0xbf
0000             84   _CMP1CN1        DATA 0xac
0000             85   _CMP1MD         DATA 0xab
0000             86   _CMP1MX         DATA 0xaa
0000             87   _CRC0CN0        DATA 0xce
0000             88   _CRC0CN1        DATA 0x86
0000             89   _CRC0CNT        DATA 0xd3
0000             90   _CRC0DAT        DATA 0xcb
0000             91   _CRC0FLIP       DATA 0xcf
0000             92   _CRC0IN         DATA 0xca
0000             93   _CRC0ST         DATA 0xd2
0000             94   _DAC0CF0        DATA 0x91
0000             95   _DAC0CF1        DATA 0x92
0000             96   _DAC0H          DATA 0x85
0000             97   _DAC0L          DATA 0x84
0000             98   _DAC1CF0        DATA 0x93
0000             99   _DAC1CF1        DATA 0x94
0000            100   _DAC1H          DATA 0x8a
0000            101   _DAC1L          DATA 0x89
0000            102   _DAC2CF0        DATA 0x95
0000            103   _DAC2CF1        DATA 0x96
0000            104   _DAC2H          DATA 0x8c
0000            105   _DAC2L          DATA 0x8b
0000            106   _DAC3CF0        DATA 0x9a
0000            107   _DAC3CF1        DATA 0x9c
0000            108   _DAC3H          DATA 0x8e
0000            109   _DAC3L          DATA 0x8d
0000            110   _DACGCF0        DATA 0x88
0000            111   _DACGCF1        DATA 0x98
0000            112   _DACGCF2        DATA 0xa2
0000            113   _DERIVID        DATA 0xad
0000            114   _DEVICEID       DATA 0xb5
0000            115   _DPH            DATA 0x83
0000            116   _DPL            DATA 0x82
0000            117   _EIE1           DATA 0xe6
0000            118   _EIE2           DATA 0xf3
0000            119   _EIP1           DATA 0xbb
0000            120   _EIP1H          DATA 0xee
0000            121   _EIP2           DATA 0xed
0000            122   _EIP2H          DATA 0xf6
0000            123   _EMI0CN         DATA 0xe7
0000            124   _FLKEY          DATA 0xb7
0000            125   _HFO0CAL        DATA 0xc7
0000            126   _HFO1CAL        DATA 0xd6
0000            127   _HFOCN          DATA 0xef
0000            128   _I2C0ADM        DATA 0xff
0000            129   _I2C0CN0        DATA 0xba
0000            130   _I2C0DIN        DATA 0xbc
0000            131   _I2C0DOUT       DATA 0xbb
0000            132   _I2C0FCN0       DATA 0xad
0000            133   _I2C0FCN1       DATA 0xab
0000            134   _I2C0FCT        DATA 0xf5
0000            135   _I2C0SLAD       DATA 0xbd
0000            136   _I2C0STAT       DATA 0xb9
0000            137   _IE             DATA 0xa8
0000            138   _IP             DATA 0xb8
0000            139   _IPH            DATA 0xf2
0000            140   _IT01CF         DATA 0xe4
0000            141   _LFO0CN         DATA 0xb1
0000            142   _P0             DATA 0x80
0000            143   _P0MASK         DATA 0xfe
0000            144   _P0MAT          DATA 0xfd
0000            145   _P0MDIN         DATA 0xf1
0000            146   _P0MDOUT        DATA 0xa4
0000            147   _P0SKIP         DATA 0xd4
0000            148   _P1             DATA 0x90
0000            149   _P1MASK         DATA 0xee
0000            150   _P1MAT          DATA 0xed
0000            151   _P1MDIN         DATA 0xf2
0000            152   _P1MDOUT        DATA 0xa5
0000            153   _P1SKIP         DATA 0xd5
0000            154   _P2             DATA 0xa0
0000            155   _P2MASK         DATA 0xfc
0000            156   _P2MAT          DATA 0xfb
0000            157   _P2MDIN         DATA 0xf3
0000            158   _P2MDOUT        DATA 0xa6
0000            159   _P2SKIP         DATA 0xcc
0000            160   _P3             DATA 0xb0
0000            161   _P3MDIN         DATA 0xf4
0000            162   _P3MDOUT        DATA 0x9c
0000            163   _PCA0CENT       DATA 0x9e
0000            164   _PCA0CLR        DATA 0x9c
0000            165   _PCA0CN0        DATA 0xd8
0000            166   _PCA0CPH0       DATA 0xfc
0000            167   _PCA0CPH1       DATA 0xea
0000            168   _PCA0CPH2       DATA 0xec
0000            169   _PCA0CPH3       DATA 0xf5
0000            170   _PCA0CPH4       DATA 0x85
0000            171   _PCA0CPH5       DATA 0xde
0000            172   _PCA0CPL0       DATA 0xfb
0000            173   _PCA0CPL1       DATA 0xe9
0000            174   _PCA0CPL2       DATA 0xeb
0000            175   _PCA0CPL3       DATA 0xf4
0000            176   _PCA0CPL4       DATA 0x84
0000            177   _PCA0CPL5       DATA 0xdd
0000            178   _PCA0CPM0       DATA 0xda
0000            179   _PCA0CPM1       DATA 0xdb
0000            180   _PCA0CPM2       DATA 0xdc
0000            181   _PCA0CPM3       DATA 0xae
0000            182   _PCA0CPM4       DATA 0xaf
0000            183   _PCA0CPM5       DATA 0xcc
0000            184   _PCA0H          DATA 0xfa
0000            185   _PCA0L          DATA 0xf9
0000            186   _PCA0MD         DATA 0xd9
0000            187   _PCA0POL        DATA 0x96
0000            188   _PCA0PWM        DATA 0xf7
0000            189   _PCON0          DATA 0x87
0000            190   _PCON1          DATA 0xcd
0000            191   _PFE0CN         DATA 0xc1
0000            192   _PRTDRV         DATA 0xf6
0000            193   _PSCTL          DATA 0x8f
0000            194   _PSTAT0         DATA 0xaa
0000            195   _PSW            DATA 0xd0
0000            196   _REF0CN         DATA 0xd1
0000            197   _REG0CN         DATA 0xc9
0000            198   _REVID          DATA 0xb6
0000            199   _RSTSRC         DATA 0xef
0000            200   _SBCON1         DATA 0x94
0000            201   _SBRLH1         DATA 0x96
0000            202   _SBRLL1         DATA 0x95
0000            203   _SBUF           DATA 0x99
0000            204   _SBUF0          DATA 0x99
0000            205   _SBUF1          DATA 0x92
0000            206   _SCON           DATA 0x98
0000            207   _SCON0          DATA 0x98
0000            208   _SCON1          DATA 0xc8
0000            209   _SFRPAGE        DATA 0xa7
0000            210   _SFRPGCN        DATA 0xbc
0000            211   _SFRSTACK       DATA 0xd7
0000            212   _SMB0ADM        DATA 0xd6
0000            213   _SMB0ADR        DATA 0xd7
0000            214   _SMB0CF         DATA 0xc1
0000            215   _SMB0CN0        DATA 0xc0
0000            216   _SMB0DAT        DATA 0xc2
0000            217   _SMB0FCN0       DATA 0xc3
0000            218   _SMB0FCN1       DATA 0xc4
0000            219   _SMB0FCT        DATA 0xef
0000            220   _SMB0RXLN       DATA 0xc5
0000            221   _SMB0TC         DATA 0xac
0000            222   _SMOD1          DATA 0x93
0000            223   _SP             DATA 0x81
0000            224   _SPI0CFG        DATA 0xa1
0000            225   _SPI0CKR        DATA 0xa2
0000            226   _SPI0CN0        DATA 0xf8
0000            227   _SPI0DAT        DATA 0xa3
0000            228   _SPI0FCN0       DATA 0x9a
0000            229   _SPI0FCN1       DATA 0x9b
0000            230   _SPI0FCT        DATA 0xf7
0000            231   _SPI0PCF        DATA 0xdf
0000            232   _TCON           DATA 0x88
0000            233   _TH0            DATA 0x8c
0000            234   _TH1            DATA 0x8d
0000            235   _TL0            DATA 0x8a
0000            236   _TL1            DATA 0x8b
0000            237   _TMOD           DATA 0x89
0000            238   _TMR2CN0        DATA 0xc8
0000            239   _TMR2CN1        DATA 0xfd
0000            240   _TMR2H          DATA 0xcf
0000            241   _TMR2L          DATA 0xce
0000            242   _TMR2RLH        DATA 0xcb
0000            243   _TMR2RLL        DATA 0xca
0000            244   _TMR3CN0        DATA 0x91
0000            245   _TMR3CN1        DATA 0xfe
0000            246   _TMR3H          DATA 0x95
0000            247   _TMR3L          DATA 0x94
0000            248   _TMR3RLH        DATA 0x93
0000            249   _TMR3RLL        DATA 0x92
0000            250   _TMR4CN0        DATA 0x98
0000            251   _TMR4CN1        DATA 0xff
0000            252   _TMR4H          DATA 0xa5
0000            253   _TMR4L          DATA 0xa4
0000            254   _TMR4RLH        DATA 0xa3
0000            255   _TMR4RLL        DATA 0xa2
0000            256   _TMR5CN0        DATA 0xc0
0000            257   _TMR5CN1        DATA 0xf1
0000            258   _TMR5H          DATA 0xd5
0000            259   _TMR5L          DATA 0xd4
0000            260   _TMR5RLH        DATA 0xd3
0000            261   _TMR5RLL        DATA 0xd2
0000            262   _UART0PCF       DATA 0xd9
0000            263   _UART1FCN0      DATA 0x9d
0000            264   _UART1FCN1      DATA 0xd8
0000            265   _UART1FCT       DATA 0xfa
0000            266   _UART1LIN       DATA 0x9e
0000            267   _UART1PCF       DATA 0xda
0000            268   _VDM0CN         DATA 0xff
0000            269   _WDTCN          DATA 0x97
0000            270   _XBR0           DATA 0xe1
0000            271   _XBR1           DATA 0xe2
0000            272   _XBR2           DATA 0xe3
0000            273   _XOSC0CN        DATA 0x86
0000            274   _DPTR           DATA 0x8382
0000            275   _TMR2RL         DATA 0xcbca
0000            276   _TMR3RL         DATA 0x9392
0000            277   _TMR4RL         DATA 0xa3a2
0000            278   _TMR5RL         DATA 0xd3d2
0000            279   _TMR0           DATA 0x8c8a
0000            280   _TMR1           DATA 0x8d8b
0000            281   _TMR2           DATA 0xcfce
0000            282   _TMR3           DATA 0x9594
0000            283   _TMR4           DATA 0xa5a4
0000            284   _TMR5           DATA 0xd5d4
0000            285   _SBRL1          DATA 0x9695
0000            286   _PCA0           DATA 0xfaf9
0000            287   _PCA0CP0        DATA 0xfcfb
0000            288   _PCA0CP1        DATA 0xeae9
0000            289   _PCA0CP2        DATA 0xeceb
0000            290   _PCA0CP3        DATA 0xf5f4
0000            291   _PCA0CP4        DATA 0x8584
0000            292   _PCA0CP5        DATA 0xdedd
0000            293   _ADC0ASA        DATA 0xb6b5
0000            294   _ADC0GT         DATA 0xc4c3
0000            295   _ADC0           DATA 0xbebd
0000            296   _ADC0LT         DATA 0xc6c5
0000            297   _DAC0           DATA 0x8584
0000            298   _DAC1           DATA 0x8a89
0000            299   _DAC2           DATA 0x8c8b
0000            300   _DAC3           DATA 0x8e8d
0000            301   ;--------------------------------------------------------
0000            302   ; special function bits
0000            303   ;--------------------------------------------------------
0000            304   _ACC_0          BIT 0xe0
0000            305   _ACC_1          BIT 0xe1
0000            306   _ACC_2          BIT 0xe2
0000            307   _ACC_3          BIT 0xe3
0000            308   _ACC_4          BIT 0xe4
0000            309   _ACC_5          BIT 0xe5
0000            310   _ACC_6          BIT 0xe6
0000            311   _ACC_7          BIT 0xe7
0000            312   _TEMPE          BIT 0xe8
0000            313   _ADGN0          BIT 0xe9
0000            314   _ADGN1          BIT 0xea
0000            315   _ADWINT         BIT 0xeb
0000            316   _ADBUSY         BIT 0xec
0000            317   _ADINT          BIT 0xed
0000            318   _IPOEN          BIT 0xee
0000            319   _ADEN           BIT 0xef
0000            320   _B_0            BIT 0xf0
0000            321   _B_1            BIT 0xf1
0000            322   _B_2            BIT 0xf2
0000            323   _B_3            BIT 0xf3
0000            324   _B_4            BIT 0xf4
0000            325   _B_5            BIT 0xf5
0000            326   _B_6            BIT 0xf6
0000            327   _B_7            BIT 0xf7
0000            328   _C0FIF          BIT 0xe8
0000            329   _C0RIF          BIT 0xe9
0000            330   _C1FIF          BIT 0xea
0000            331   _C1RIF          BIT 0xeb
0000            332   _C2FIF          BIT 0xec
0000            333   _C2RIF          BIT 0xed
0000            334   _C3FIF          BIT 0xee
0000            335   _C3RIF          BIT 0xef
0000            336   _D1SRC0         BIT 0x88
0000            337   _D1SRC1         BIT 0x89
0000            338   _D1AMEN         BIT 0x8a
0000            339   _D01REFSL       BIT 0x8b
0000            340   _D3SRC0         BIT 0x8c
0000            341   _D3SRC1         BIT 0x8d
0000            342   _D3AMEN         BIT 0x8e
0000            343   _D23REFSL       BIT 0x8f
0000            344   _D0UDIS         BIT 0x98
0000            345   _D1UDIS         BIT 0x99
0000            346   _D2UDIS         BIT 0x9a
0000            347   _D3UDIS         BIT 0x9b
0000            348   _EX0            BIT 0xa8
0000            349   _ET0            BIT 0xa9
0000            350   _EX1            BIT 0xaa
0000            351   _ET1            BIT 0xab
0000            352   _ES0            BIT 0xac
0000            353   _ET2            BIT 0xad
0000            354   _ESPI0          BIT 0xae
0000            355   _EA             BIT 0xaf
0000            356   _PX0            BIT 0xb8
0000            357   _PT0            BIT 0xb9
0000            358   _PX1            BIT 0xba
0000            359   _PT1            BIT 0xbb
0000            360   _PS0            BIT 0xbc
0000            361   _PT2            BIT 0xbd
0000            362   _PSPI0          BIT 0xbe
0000            363   _P0_0           BIT 0x80
0000            364   _P0_1           BIT 0x81
0000            365   _P0_2           BIT 0x82
0000            366   _P0_3           BIT 0x83
0000            367   _P0_4           BIT 0x84
0000            368   _P0_5           BIT 0x85
0000            369   _P0_6           BIT 0x86
0000            370   _P0_7           BIT 0x87
0000            371   _P1_0           BIT 0x90
0000            372   _P1_1           BIT 0x91
0000            373   _P1_2           BIT 0x92
0000            374   _P1_3           BIT 0x93
0000            375   _P1_4           BIT 0x94
0000            376   _P1_5           BIT 0x95
0000            377   _P1_6           BIT 0x96
0000            378   _P1_7           BIT 0x97
0000            379   _P2_0           BIT 0xa0
0000            380   _P2_1           BIT 0xa1
0000            381   _P2_2           BIT 0xa2
0000            382   _P2_3           BIT 0xa3
0000            383   _P2_4           BIT 0xa4
0000            384   _P2_5           BIT 0xa5
0000            385   _P2_6           BIT 0xa6
0000            386   _P3_0           BIT 0xb0
0000            387   _P3_1           BIT 0xb1
0000            388   _P3_2           BIT 0xb2
0000            389   _P3_3           BIT 0xb3
0000            390   _P3_4           BIT 0xb4
0000            391   _P3_7           BIT 0xb7
0000            392   _CCF0           BIT 0xd8
0000            393   _CCF1           BIT 0xd9
0000            394   _CCF2           BIT 0xda
0000            395   _CCF3           BIT 0xdb
0000            396   _CCF4           BIT 0xdc
0000            397   _CCF5           BIT 0xdd
0000            398   _CR             BIT 0xde
0000            399   _CF             BIT 0xdf
0000            400   _PARITY         BIT 0xd0
0000            401   _F1             BIT 0xd1
0000            402   _OV             BIT 0xd2
0000            403   _RS0            BIT 0xd3
0000            404   _RS1            BIT 0xd4
0000            405   _F0             BIT 0xd5
0000            406   _AC             BIT 0xd6
0000            407   _CY             BIT 0xd7
0000            408   _RI             BIT 0x98
0000            409   _TI             BIT 0x99
0000            410   _RB8            BIT 0x9a
0000            411   _TB8            BIT 0x9b
0000            412   _REN            BIT 0x9c
0000            413   _CE             BIT 0x9d
0000            414   _SMODE          BIT 0x9e
0000            415   _RI1            BIT 0xc8
0000            416   _TI1            BIT 0xc9
0000            417   _RBX1           BIT 0xca
0000            418   _TBX1           BIT 0xcb
0000            419   _REN1           BIT 0xcc
0000            420   _PERR1          BIT 0xcd
0000            421   _OVR1           BIT 0xce
0000            422   _SI             BIT 0xc0
0000            423   _ACK            BIT 0xc1
0000            424   _ARBLOST        BIT 0xc2
0000            425   _ACKRQ          BIT 0xc3
0000            426   _STO            BIT 0xc4
0000            427   _STA            BIT 0xc5
0000            428   _TXMODE         BIT 0xc6
0000            429   _MASTER         BIT 0xc7
0000            430   _SPIEN          BIT 0xf8
0000            431   _TXNF           BIT 0xf9
0000            432   _NSSMD0         BIT 0xfa
0000            433   _NSSMD1         BIT 0xfb
0000            434   _RXOVRN         BIT 0xfc
0000            435   _MODF           BIT 0xfd
0000            436   _WCOL           BIT 0xfe
0000            437   _SPIF           BIT 0xff
0000            438   _IT0            BIT 0x88
0000            439   _IE0            BIT 0x89
0000            440   _IT1            BIT 0x8a
0000            441   _IE1            BIT 0x8b
0000            442   _TR0            BIT 0x8c
0000            443   _TF0            BIT 0x8d
0000            444   _TR1            BIT 0x8e
0000            445   _TF1            BIT 0x8f
0000            446   _T2XCLK0        BIT 0xc8
0000            447   _T2XCLK1        BIT 0xc9
0000            448   _TR2            BIT 0xca
0000            449   _T2SPLIT        BIT 0xcb
0000            450   _TF2CEN         BIT 0xcc
0000            451   _TF2LEN         BIT 0xcd
0000            452   _TF2L           BIT 0xce
0000            453   _TF2H           BIT 0xcf
0000            454   _T4XCLK0        BIT 0x98
0000            455   _T4XCLK1        BIT 0x99
0000            456   _TR4            BIT 0x9a
0000            457   _T4SPLIT        BIT 0x9b
0000            458   _TF4CEN         BIT 0x9c
0000            459   _TF4LEN         BIT 0x9d
0000            460   _TF4L           BIT 0x9e
0000            461   _TF4H           BIT 0x9f
0000            462   _T5XCLK0        BIT 0xc0
0000            463   _T5XCLK1        BIT 0xc1
0000            464   _TR5            BIT 0xc2
0000            465   _T5SPLIT        BIT 0xc3
0000            466   _TF5CEN         BIT 0xc4
0000            467   _TF5LEN         BIT 0xc5
0000            468   _TF5L           BIT 0xc6
0000            469   _TF5H           BIT 0xc7
0000            470   _RIE            BIT 0xd8
0000            471   _RXTO0          BIT 0xd9
0000            472   _RXTO1          BIT 0xda
0000            473   _RFRQ           BIT 0xdb
0000            474   _TIE            BIT 0xdc
0000            475   _TXHOLD         BIT 0xdd
0000            476   _TXNF1          BIT 0xde
0000            477   _TFRQ           BIT 0xdf
0000            478   ;--------------------------------------------------------
0000            479   ; overlayable register banks
0000            480   ;--------------------------------------------------------
0000            481            rbank0 segment data overlay
0000            482   ;--------------------------------------------------------
0000            483   ; internal ram data
0000            484   ;--------------------------------------------------------
0000            485            rseg R_DSEG
0000            486   _overflow_count:
0000            487            ds 1
0001            488   ;--------------------------------------------------------
0001            489   ; overlayable items in internal ram 
0001            490   ;--------------------------------------------------------
0000            491            rseg    R_OSEG
0000            492            rseg    R_OSEG
0000            493   _I2C_Write_PARM_2:
0000            494            ds 1
0001            495   ;--------------------------------------------------------
0001            496   ; indirectly addressable internal ram data
0001            497   ;--------------------------------------------------------
0000            498            rseg R_ISEG
0000            499   ;--------------------------------------------------------
0000            500   ; absolute internal ram data
0000            501   ;--------------------------------------------------------
0000            502            DSEG
0000            503   ;--------------------------------------------------------
0000            504   ; bit data
0000            505   ;--------------------------------------------------------
0000            506            rseg R_BSEG
0000            507   ;--------------------------------------------------------
0000            508   ; paged external ram data
0000            509   ;--------------------------------------------------------
0000            510            rseg R_PSEG
0000            511   ;--------------------------------------------------------
0000            512   ; external ram data
0000            513   ;--------------------------------------------------------
0000            514            rseg R_XSEG
0000            515   ;--------------------------------------------------------
0000            516   ; absolute external ram data
0000            517   ;--------------------------------------------------------
0000            518            XSEG
0000            519   ;--------------------------------------------------------
0000            520   ; external initialized ram data
0000            521   ;--------------------------------------------------------
0000            522            rseg R_IXSEG
0000            523            rseg R_HOME
0000            524            rseg R_GSINIT
0000            525            rseg R_CSEG
0000            526   ;--------------------------------------------------------
0000            527   ; Reset entry point and interrupt vectors
0000            528   ;--------------------------------------------------------
0000            529            CSEG at 0x0000
0000 020000     530            ljmp    _crt0
0003            531   ;--------------------------------------------------------
0003            532   ; global & static initialisations
0003            533   ;--------------------------------------------------------
0000            534            rseg R_HOME
0000            535            rseg R_GSINIT
0000            536            rseg R_GSINIT
0000            537   ;--------------------------------------------------------
0000            538   ; data variables initialization
0000            539   ;--------------------------------------------------------
0000            540            rseg R_DINIT
0000            541            ; The linker places a 'ret' at the end of segment R_DINIT.
0000            542   ;--------------------------------------------------------
0000            543   ; code
0000            544   ;--------------------------------------------------------
0000            545            rseg R_CSEG
0000            546   ;------------------------------------------------------------
0000            547   ;Allocation info for local variables in function '_c51_external_startup'
0000            548   ;------------------------------------------------------------
0000            549   ;------------------------------------------------------------
0000            550   ;        MPU.c:17: char _c51_external_startup (void)
0000            551   ;        -----------------------------------------
0000            552   ;         function _c51_external_startup
0000            553   ;        -----------------------------------------
0000            554   __c51_external_startup:
0000            555            using   0
0000            556   ;        MPU.c:20: SFRPAGE = 0x00;
0000 75A700     557            mov     _SFRPAGE,#0x00
0003            558   ;        MPU.c:21: WDTCN = 0xDE; //First key
0003 7597DE     559            mov     _WDTCN,#0xDE
0006            560   ;        MPU.c:22: WDTCN = 0xAD; //Second key
0006 7597AD     561            mov     _WDTCN,#0xAD
0009            562   ;        MPU.c:24: VDM0CN |= 0x80;
0009 43FF80     563            orl     _VDM0CN,#0x80
000C            564   ;        MPU.c:25: RSTSRC = 0x02;
000C 75EF02     565            mov     _RSTSRC,#0x02
000F            566   ;        MPU.c:32: SFRPAGE = 0x10;
000F 75A710     567            mov     _SFRPAGE,#0x10
0012            568   ;        MPU.c:33: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     569            mov     _PFE0CN,#0x20
0015            570   ;        MPU.c:34: SFRPAGE = 0x00;
0015 75A700     571            mov     _SFRPAGE,#0x00
0018            572   ;        MPU.c:55: CLKSEL = 0x00;
0018 75A900     573            mov     _CLKSEL,#0x00
001B            574   ;        MPU.c:56: CLKSEL = 0x00;
001B 75A900     575            mov     _CLKSEL,#0x00
001E            576   ;        MPU.c:57: while ((CLKSEL & 0x80) == 0);
001E            577   L002001?:
001E E5A9       578            mov     a,_CLKSEL
0020 30E7B0     579            jnb     acc.7,L002001?
0023            580   ;        MPU.c:58: CLKSEL = 0x03;
0023 75A903     581            mov     _CLKSEL,#0x03
0026            582   ;        MPU.c:59: CLKSEL = 0x03;
0026 75A903     583            mov     _CLKSEL,#0x03
0029            584   ;        MPU.c:60: while ((CLKSEL & 0x80) == 0);
0029            585   L002004?:
0029 E5A9       586            mov     a,_CLKSEL
002B 30E730     587            jnb     acc.7,L002004?
002E            588   ;        MPU.c:65: P0MDOUT |= 0x10; // Enable UART0 TX as push-pull output
002E 43A410     589            orl     _P0MDOUT,#0x10
0031            590   ;        MPU.c:66: XBR0     = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)                     
0031 75E101     591            mov     _XBR0,#0x01
0034            592   ;        MPU.c:67: XBR1     = 0X00;
0034 75E200     593            mov     _XBR1,#0x00
0037            594   ;        MPU.c:68: XBR2     = 0x40; // Enable crossbar and weak pull-ups
0037 75E340     595            mov     _XBR2,#0x40
003A            596   ;        MPU.c:74: SCON0 = 0x10;
003A 759810     597            mov     _SCON0,#0x10
003D            598   ;        MPU.c:75: CKCON0 |= 0b_0000_0000 ; // Timer 1 uses the system clock divided by 12.
003D 858E8E     599            mov     _CKCON0,_CKCON0
0040            600   ;        MPU.c:76: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
0040 758DE6     601            mov     _TH1,#0xE6
0043            602   ;        MPU.c:77: TL1 = TH1;      // Init Timer1
0043 858D8B     603            mov     _TL1,_TH1
0046            604   ;        MPU.c:78: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0046 53890F     605            anl     _TMOD,#0x0F
0049            606   ;        MPU.c:79: TMOD |=  0x20;
0049 438920     607            orl     _TMOD,#0x20
004C            608   ;        MPU.c:80: TR1 = 1; // START Timer1
004C D28E       609            setb    _TR1
004E            610   ;        MPU.c:81: TI = 1;  // Indicate TX0 ready
004E D299       611            setb    _TI
0050            612   ;        MPU.c:83: return 0;
0050 758200     613            mov     dpl,#0x00
0053 22         614            ret
0054            615   ;------------------------------------------------------------
0054            616   ;Allocation info for local variables in function 'Timer3us'
0054            617   ;------------------------------------------------------------
0054            618   ;us                        Allocated to registers r2 
0054            619   ;i                         Allocated to registers r3 
0054            620   ;------------------------------------------------------------
0054            621   ;        MPU.c:87: void Timer3us(unsigned char us)
0054            622   ;        -----------------------------------------
0054            623   ;         function Timer3us
0054            624   ;        -----------------------------------------
0054            625   _Timer3us:
0054 AA82       626            mov     r2,dpl
0056            627   ;        MPU.c:92: CKCON0|=0b_0100_0000;
0056 438E40     628            orl     _CKCON0,#0x40
0059            629   ;        MPU.c:94: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0059 7592B8     630            mov     _TMR3RL,#0xB8
005C 7593FF     631            mov     (_TMR3RL >> 8),#0xFF
005F            632   ;        MPU.c:95: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
005F 859294     633            mov     _TMR3,_TMR3RL
0062 859395     634            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
0065            635   ;        MPU.c:97: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
0065 759104     636            mov     _TMR3CN0,#0x04
0068            637   ;        MPU.c:98: for (i = 0; i < us; i++)       // Count <us> overflows
0068 7B00       638            mov     r3,#0x00
006A            639   L003004?:
006A C3         640            clr     c
006B EB         641            mov     a,r3
006C 9A         642            subb    a,r2
006D 5000       643            jnc     L003007?
006F            644   ;        MPU.c:100: while (!(TMR3CN0 & 0x80));  // Wait for overflow
006F            645   L003001?:
006F E591       646            mov     a,_TMR3CN0
0071 30E730     647            jnb     acc.7,L003001?
0074            648   ;        MPU.c:101: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
0074 53917F     649            anl     _TMR3CN0,#0x7F
0077            650   ;        MPU.c:98: for (i = 0; i < us; i++)       // Count <us> overflows
0077 0B         651            inc     r3
0078 8000       652            sjmp    L003004?
007A            653   L003007?:
007A            654   ;        MPU.c:103: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
007A 759100     655            mov     _TMR3CN0,#0x00
007D 22         656            ret
007E            657   ;------------------------------------------------------------
007E            658   ;Allocation info for local variables in function 'waitms'
007E            659   ;------------------------------------------------------------
007E            660   ;ms                        Allocated to registers r2 r3 
007E            661   ;j                         Allocated to registers r2 r3 
007E            662   ;------------------------------------------------------------
007E            663   ;        MPU.c:106: void waitms (unsigned int ms)
007E            664   ;        -----------------------------------------
007E            665   ;         function waitms
007E            666   ;        -----------------------------------------
007E            667   _waitms:
007E AA82       668            mov     r2,dpl
0080 AB83       669            mov     r3,dph
0082            670   ;        MPU.c:109: for(j=ms; j!=0; j--)
0082            671   L004001?:
0082 BA00F0     672            cjne    r2,#0x00,L004010?
0085 BB00F0     673            cjne    r3,#0x00,L004010?
0088 22         674            ret
0089            675   L004010?:
0089            676   ;        MPU.c:111: Timer3us(249);
0089 7582F9     677            mov     dpl,#0xF9
008C C002       678            push    ar2
008E C003       679            push    ar3
0090 120000     680            lcall   _Timer3us
0093            681   ;        MPU.c:112: Timer3us(249);
0093 7582F9     682            mov     dpl,#0xF9
0096 120000     683            lcall   _Timer3us
0099            684   ;        MPU.c:113: Timer3us(249);
0099 7582F9     685            mov     dpl,#0xF9
009C 120000     686            lcall   _Timer3us
009F            687   ;        MPU.c:114: Timer3us(250);
009F 7582FA     688            mov     dpl,#0xFA
00A2 120000     689            lcall   _Timer3us
00A5 D003       690            pop     ar3
00A7 D002       691            pop     ar2
00A9            692   ;        MPU.c:109: for(j=ms; j!=0; j--)
00A9 1A         693            dec     r2
00AA BAFF30     694            cjne    r2,#0xff,L004011?
00AD 1B         695            dec     r3
00AE            696   L004011?:
00AE 8000       697            sjmp    L004001?
00B0            698   ;------------------------------------------------------------
00B0            699   ;Allocation info for local variables in function 'TIMER0_Init'
00B0            700   ;------------------------------------------------------------
00B0            701   ;------------------------------------------------------------
00B0            702   ;        MPU.c:118: void TIMER0_Init(void)
00B0            703   ;        -----------------------------------------
00B0            704   ;         function TIMER0_Init
00B0            705   ;        -----------------------------------------
00B0            706   _TIMER0_Init:
00B0            707   ;        MPU.c:120: TMOD&=0b_1111_0000; // Set the bits of Timer/Counter 0 to zero
00B0 5389F0     708            anl     _TMOD,#0xF0
00B3            709   ;        MPU.c:121: TMOD|=0b_0000_0001; // Timer/Counter 0 used as a 16-bit timer
00B3 438901     710            orl     _TMOD,#0x01
00B6            711   ;        MPU.c:122: TR0=0; // Stop Timer/Counter 0
00B6 C28C       712            clr     _TR0
00B8 22         713            ret
00B9            714   ;------------------------------------------------------------
00B9            715   ;Allocation info for local variables in function 'I2C_Init'
00B9            716   ;------------------------------------------------------------
00B9            717   ;------------------------------------------------------------
00B9            718   ;        MPU.c:125: void I2C_Init()
00B9            719   ;        -----------------------------------------
00B9            720   ;         function I2C_Init
00B9            721   ;        -----------------------------------------
00B9            722   _I2C_Init:
00B9            723   ;        MPU.c:128: P2MDOUT |= 0x03; //Set P2.0 (SDA) and P2.1(SCL) as Push pull mode
00B9 43A603     724            orl     _P2MDOUT,#0x03
00BC            725   ;        MPU.c:129: P2SKIP |= 0x03; // Skip Crossbar decoding for P2.0 and P2.1
00BC 43CC03     726            orl     _P2SKIP,#0x03
00BF            727   ;        MPU.c:131: I2C0CN0 |= 0x40; // Sets it as 01000000 
00BF 43BA40     728            orl     _I2C0CN0,#0x40
00C2            729   ;        MPU.c:137: SMB0CF = 0x59;
00C2 75C159     730            mov     _SMB0CF,#0x59
00C5 22         731            ret
00C6            732   ;------------------------------------------------------------
00C6            733   ;Allocation info for local variables in function 'I2C_Write'
00C6            734   ;------------------------------------------------------------
00C6            735   ;data_input                Allocated with name '_I2C_Write_PARM_2'
00C6            736   ;addr                      Allocated to registers r2 
00C6            737   ;------------------------------------------------------------
00C6            738   ;        MPU.c:140: void I2C_Write(uint8_t addr, uint8_t data_input)
00C6            739   ;        -----------------------------------------
00C6            740   ;         function I2C_Write
00C6            741   ;        -----------------------------------------
00C6            742   _I2C_Write:
00C6 AA82       743            mov     r2,dpl
00C8            744   ;        MPU.c:155: SMB0CN0 |= 0x20; //Sets SMB0CN0.5 (STA) to start an I2C transfer
00C8 43C020     745            orl     _SMB0CN0,#0x20
00CB            746   ;        MPU.c:158: while (!(SMB0CN0 & 0x02));
00CB            747   L007001?:
00CB E5C0       748            mov     a,_SMB0CN0
00CD 30E170     749            jnb     acc.1,L007001?
00D0            750   ;        MPU.c:161: SMB0DAT = addr;
00D0 8AC2       751            mov     _SMB0DAT,r2
00D2            752   ;        MPU.c:164: while (!(SMB0CN0 & 0x02)); //Waiting for SMB0CN0.0 (ACK) to indicate transfer complete
00D2            753   L007004?:
00D2 E5C0       754            mov     a,_SMB0CN0
00D4 30E1B0     755            jnb     acc.1,L007004?
00D7            756   ;        MPU.c:167: SMB0DAT = data_input;
00D7 85E0C2     757            mov     _SMB0DAT,_I2C_Write_PARM_2
00DA            758   ;        MPU.c:170: while (!(SMB0CN0 & 0x02)); //Waiting for SMB0CN0.0 (ACK) to indicate transfer complete
00DA            759   L007007?:
00DA E5C0       760            mov     a,_SMB0CN0
00DC 30E1F0     761            jnb     acc.1,L007007?
00DF            762   ;        MPU.c:173: SMB0CN0 |= 0x10;  //Sets SMB0CN0.4 (STO) to stop an I2C transfer
00DF 43C010     763            orl     _SMB0CN0,#0x10
00E2 22         764            ret
00E3            765   ;------------------------------------------------------------
00E3            766   ;Allocation info for local variables in function 'I2C_Read'
00E3            767   ;------------------------------------------------------------
00E3            768   ;addr                      Allocated to registers r2 
00E3            769   ;data_output               Allocated to registers 
00E3            770   ;------------------------------------------------------------
00E3            771   ;        MPU.c:176: uint8_t I2C_Read(uint8_t addr)
00E3            772   ;        -----------------------------------------
00E3            773   ;         function I2C_Read
00E3            774   ;        -----------------------------------------
00E3            775   _I2C_Read:
00E3 AA82       776            mov     r2,dpl
00E5            777   ;        MPU.c:181: SMB0CN0 |= 0x20; //Sets SMB0CN0.5 (STA) to start an I2C transfer
00E5 43C020     778            orl     _SMB0CN0,#0x20
00E8            779   ;        MPU.c:183: printf("Transfer started");
00E8 C002       780            push    ar2
00EA 7430       781            mov     a,#__str_0
00EC C0E0       782            push    acc
00EE 74C2       783            mov     a,#(__str_0 >> 8)
00F0 C0E0       784            push    acc
00F2 7480       785            mov     a,#0x80
00F4 C0E0       786            push    acc
00F6 120000     787            lcall   _printf
00F9 1581       788            dec     sp
00FB 1581       789            dec     sp
00FD 1581       790            dec     sp
00FF            791   ;        MPU.c:184: printf("SMB0CN0: %02X\n", SMB0CN0); //Waiting for SMB0CN0.0 (ACK) to indicate transfer complete
00FF ABC0       792            mov     r3,_SMB0CN0
0101 7C00       793            mov     r4,#0x00
0103 C003       794            push    ar3
0105 C004       795            push    ar4
0107 74F0       796            mov     a,#__str_1
0109 C0E0       797            push    acc
010B 74C2       798            mov     a,#(__str_1 >> 8)
010D C0E0       799            push    acc
010F 7480       800            mov     a,#0x80
0111 C0E0       801            push    acc
0113 120000     802            lcall   _printf
0116 E581       803            mov     a,sp
0118 24FB       804            add     a,#0xfb
011A F581       805            mov     sp,a
011C D002       806            pop     ar2
011E            807   ;        MPU.c:186: while (!(SMB0CN0 & 0x02)); 
011E            808   L008001?:
011E E5C0       809            mov     a,_SMB0CN0
0120 30E130     810            jnb     acc.1,L008001?
0123            811   ;        MPU.c:188: printf("Transfer complete");
0123 C002       812            push    ar2
0125 7470       813            mov     a,#__str_2
0127 C0E0       814            push    acc
0129 74C3       815            mov     a,#(__str_2 >> 8)
012B C0E0       816            push    acc
012D 7480       817            mov     a,#0x80
012F C0E0       818            push    acc
0131 120000     819            lcall   _printf
0134 1581       820            dec     sp
0136 1581       821            dec     sp
0138 1581       822            dec     sp
013A D002       823            pop     ar2
013C            824   ;        MPU.c:191: SMB0DAT = (addr << 1) | 1;
013C EA         825            mov     a,r2
013D 2A         826            add     a,r2
013E FA         827            mov     r2,a
013F 7401       828            mov     a,#0x01
0141 4A         829            orl     a,r2
0142 F5C2       830            mov     _SMB0DAT,a
0144            831   ;        MPU.c:194: while (!(SMB0CN0 & 0x02)); //Waiting for SMB0CN0.0 (ACK) to indicate transfer complete
0144            832   L008004?:
0144 E5C0       833            mov     a,_SMB0CN0
0146 30E1B0     834            jnb     acc.1,L008004?
0149            835   ;        MPU.c:197: data_output = SMB0DAT;
0149 85C282     836            mov     dpl,_SMB0DAT
014C            837   ;        MPU.c:200: SMB0CN0 |= 0x10;  //Sets SMB0CN0.4 (STO) to stop an I2C transfer
014C 43C010     838            orl     _SMB0CN0,#0x10
014F            839   ;        MPU.c:202: return data_output;
014F 22         840            ret
0150            841   ;------------------------------------------------------------
0150            842   ;Allocation info for local variables in function 'MPU6050_Init'
0150            843   ;------------------------------------------------------------
0150            844   ;------------------------------------------------------------
0150            845   ;        MPU.c:205: void MPU6050_Init()
0150            846   ;        -----------------------------------------
0150            847   ;         function MPU6050_Init
0150            848   ;        -----------------------------------------
0150            849   _MPU6050_Init:
0150            850   ;        MPU.c:207: I2C_Write(0x6B, 0x00);
0150 75E000     851            mov     _I2C_Write_PARM_2,#0x00
0153 75826B     852            mov     dpl,#0x6B
0156 020000     853            ljmp    _I2C_Write
0159            854   ;------------------------------------------------------------
0159            855   ;Allocation info for local variables in function 'Test_I2C'
0159            856   ;------------------------------------------------------------
0159            857   ;data_in                   Allocated to registers r2 
0159            858   ;------------------------------------------------------------
0159            859   ;        MPU.c:210: void Test_I2C()
0159            860   ;        -----------------------------------------
0159            861   ;         function Test_I2C
0159            862   ;        -----------------------------------------
0159            863   _Test_I2C:
0159            864   ;        MPU.c:212: uint8_t data_in = I2C_Read(0x75);
0159 758275     865            mov     dpl,#0x75
015C 120000     866            lcall   _I2C_Read
015F AA82       867            mov     r2,dpl
0161            868   ;        MPU.c:213: if (data_in == 0x68)
0161 BA68F0     869            cjne    r2,#0x68,L010002?
0164            870   ;        MPU.c:215: printf("I2C is working correctly\n");
0164 7430       871            mov     a,#__str_3
0166 C0E0       872            push    acc
0168 74C4       873            mov     a,#(__str_3 >> 8)
016A C0E0       874            push    acc
016C 7480       875            mov     a,#0x80
016E C0E0       876            push    acc
0170 120000     877            lcall   _printf
0173 1581       878            dec     sp
0175 1581       879            dec     sp
0177 1581       880            dec     sp
0179 22         881            ret
017A            882   L010002?:
017A            883   ;        MPU.c:220: printf("I2C is not working correctly: %u\n", data_in);
017A 7B00       884            mov     r3,#0x00
017C C002       885            push    ar2
017E C003       886            push    ar3
0180 7470       887            mov     a,#__str_4
0182 C0E0       888            push    acc
0184 74C4       889            mov     a,#(__str_4 >> 8)
0186 C0E0       890            push    acc
0188 7480       891            mov     a,#0x80
018A C0E0       892            push    acc
018C 120000     893            lcall   _printf
018F E581       894            mov     a,sp
0191 24FB       895            add     a,#0xfb
0193 F581       896            mov     sp,a
0195 22         897            ret
0196            898   ;------------------------------------------------------------
0196            899   ;Allocation info for local variables in function 'main'
0196            900   ;------------------------------------------------------------
0196            901   ;------------------------------------------------------------
0196            902   ;        MPU.c:224: void main (void) 
0196            903   ;        -----------------------------------------
0196            904   ;         function main
0196            905   ;        -----------------------------------------
0196            906   _main:
0196            907   ;        MPU.c:227: SMB0CN0 |= 0x10;  //Sets SMB0CN0.4 (STO) to stop an I2C transfer
0196 43C010     908            orl     _SMB0CN0,#0x10
0199            909   ;        MPU.c:229: waitms(500); // Give PuTTY a chance to start.
0199 9001F4     910            mov     dptr,#0x01F4
019C 120000     911            lcall   _waitms
019F            912   ;        MPU.c:230: printf("\x1b[2J"); // Clear screen using ANSI escape sequence.
019F 74B0       913            mov     a,#__str_5
01A1 C0E0       914            push    acc
01A3 74C4       915            mov     a,#(__str_5 >> 8)
01A5 C0E0       916            push    acc
01A7 7480       917            mov     a,#0x80
01A9 C0E0       918            push    acc
01AB 120000     919            lcall   _printf
01AE 1581       920            dec     sp
01B0 1581       921            dec     sp
01B2 1581       922            dec     sp
01B4            923   ;        MPU.c:235: __FILE__, __DATE__, __TIME__);
01B4            924   ;        MPU.c:234: "Compiled: %s, %s\n\n",
01B4 74F0       925            mov     a,#__str_9
01B6 C0E0       926            push    acc
01B8 74C4       927            mov     a,#(__str_9 >> 8)
01BA C0E0       928            push    acc
01BC 7480       929            mov     a,#0x80
01BE C0E0       930            push    acc
01C0 7430       931            mov     a,#__str_8
01C2 C0E0       932            push    acc
01C4 74C5       933            mov     a,#(__str_8 >> 8)
01C6 C0E0       934            push    acc
01C8 7480       935            mov     a,#0x80
01CA C0E0       936            push    acc
01CC 7470       937            mov     a,#__str_7
01CE C0E0       938            push    acc
01D0 74C5       939            mov     a,#(__str_7 >> 8)
01D2 C0E0       940            push    acc
01D4 7480       941            mov     a,#0x80
01D6 C0E0       942            push    acc
01D8 74B0       943            mov     a,#__str_6
01DA C0E0       944            push    acc
01DC 74C5       945            mov     a,#(__str_6 >> 8)
01DE C0E0       946            push    acc
01E0 7480       947            mov     a,#0x80
01E2 C0E0       948            push    acc
01E4 120000     949            lcall   _printf
01E7 E581       950            mov     a,sp
01E9 24F4       951            add     a,#0xf4
01EB F581       952            mov     sp,a
01ED            953   ;        MPU.c:237: I2C_Init();
01ED 120000     954            lcall   _I2C_Init
01F0            955   ;        MPU.c:238: MPU6050_Init();
01F0 120000     956            lcall   _MPU6050_Init
01F3            957   ;        MPU.c:239: printf("Init Done\n");
01F3 74F0       958            mov     a,#__str_10
01F5 C0E0       959            push    acc
01F7 74C5       960            mov     a,#(__str_10 >> 8)
01F9 C0E0       961            push    acc
01FB 7480       962            mov     a,#0x80
01FD C0E0       963            push    acc
01FF 120000     964            lcall   _printf
0202 1581       965            dec     sp
0204 1581       966            dec     sp
0206 1581       967            dec     sp
0208            968   ;        MPU.c:241: SMB0CN0 &= ~0x10; // Clear SMB0CN0.4 (STO)
0208 53C0EF     969            anl     _SMB0CN0,#0xEF
020B            970   ;        MPU.c:242: printf("%02X\n", SMB0CN0);
020B AAC0       971            mov     r2,_SMB0CN0
020D 7B00       972            mov     r3,#0x00
020F C002       973            push    ar2
0211 C003       974            push    ar3
0213 7430       975            mov     a,#__str_11
0215 C0E0       976            push    acc
0217 74C6       977            mov     a,#(__str_11 >> 8)
0219 C0E0       978            push    acc
021B 7480       979            mov     a,#0x80
021D C0E0       980            push    acc
021F 120000     981            lcall   _printf
0222 E581       982            mov     a,sp
0224 24FB       983            add     a,#0xfb
0226 F581       984            mov     sp,a
0228            985   ;        MPU.c:244: Test_I2C();
0228 020000     986            ljmp    _Test_I2C
022B            987            rseg R_CSEG
022B            988   
0000            989            rseg R_XINIT
0000            990   
0000            991            rseg R_CONST
0000            992   __str_0:
0000 5472616E   993            db 'Transfer started'
     73666572
     20737461
     72746564
0010 00         994            db 0x00
0011            995   __str_1:
0011 534D4230   996            db 'SMB0CN0: %02X'
     434E303A
     20253032
     58
001E 0A         997            db 0x0A
001F 00         998            db 0x00
0020            999   __str_2:
0020 5472616E  1000            db 'Transfer complete'
     73666572
     20636F6D
     706C6574
     65
0031 00        1001            db 0x00
0032           1002   __str_3:
0032 49324320  1003            db 'I2C is working correctly'
     69732077
     6F726B69
     6E672063
     6F727265
     63746C79
004A 0A        1004            db 0x0A
004B 00        1005            db 0x00
004C           1006   __str_4:
004C 49324320  1007            db 'I2C is not working correctly: %u'
     6973206E
     6F742077
     6F726B69
     6E672063
     6F727265
     63746C79
     3A202575
006C 0A        1008            db 0x0A
006D 00        1009            db 0x00
006E           1010   __str_5:
006E 1B        1011            db 0x1B
006F 5B324A    1012            db '[2J'
0072 00        1013            db 0x00
0073           1014   __str_6:
0073 45464D38  1015            db 'EFM8 Period measurement at pin P0.1 using Timer 0.'
     20506572
     696F6420
     6D656173
     7572656D
     656E7420
     61742070
     696E2050
     302E3120
     7573696E
     67205469
     6D657220
     302E
00A5 0A        1016            db 0x0A
00A6 46696C65  1017            db 'File: %s'
     3A202573
00AE 0A        1018            db 0x0A
00AF 436F6D70  1019            db 'Compiled: %s, %s'
     696C6564
     3A202573
     2C202573
00BF 0A        1020            db 0x0A
00C0 0A        1021            db 0x0A
00C1 00        1022            db 0x00
00C2           1023   __str_7:
00C2 4D50552E  1024            db 'MPU.c'
     63
00C7 00        1025            db 0x00
00C8           1026   __str_8:
00C8 41707220  1027            db 'Apr  1 2024'
     20312032
     303234
00D3 00        1028            db 0x00
00D4           1029   __str_9:
00D4 31313A33  1030            db '11:34:19'
     343A3139
00DC 00        1031            db 0x00
00DD           1032   __str_10:
00DD 496E6974  1033            db 'Init Done'
     20446F6E
     65
00E6 0A        1034            db 0x0A
00E7 00        1035            db 0x00
00E8           1036   __str_11:
00E8 25303258  1037            db '%02X'
00EC 0A        1038            db 0x0A
00ED 00        1039            db 0x00
00EE           1040   
0003           1041            CSEG
0003           1042   
0003           1043   end
