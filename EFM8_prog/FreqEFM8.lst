0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Mon Apr 01 13:27:02 2024
0000              5   ;--------------------------------------------------------
                  5   $name FreqEFM8
                  6   $optc51 --model-small
0000              8            R_DSEG    segment data
0000              9            R_CSEG    segment code
0000             10            R_BSEG    segment bit
0000             11            R_XSEG    segment xdata
0000             12            R_PSEG    segment xdata
0000             13            R_ISEG    segment idata
0000             14            R_OSEG    segment data overlay
0000             15            BIT_BANK  segment data overlay
0000             16            R_HOME    segment code
0000             17            R_GSINIT  segment code
0000             18            R_IXSEG   segment xdata
0000             19            R_CONST   segment code
0000             20            R_XINIT   segment code
0000             21            R_DINIT   segment code
0000             22   
0000             23   ;--------------------------------------------------------
0000             24   ; Public variables in this module
0000             25   ;--------------------------------------------------------
0000             26            public _main
0000             27            public _getsn
0000             28            public _LCDprint
0000             29            public _LCD_4BIT
0000             30            public _WriteCommand
0000             31            public _WriteData
0000             32            public _LCD_byte
0000             33            public _LCD_pulse
0000             34            public _TIMER0_Init
0000             35            public _waitms
0000             36            public _Timer3us
0000             37            public __c51_external_startup
0000             38            public _LCDprint_PARM_3
0000             39            public _getsn_PARM_2
0000             40            public _LCDprint_PARM_2
0000             41            public _overflow_count
0000             42   ;--------------------------------------------------------
0000             43   ; Special Function Registers
0000             44   ;--------------------------------------------------------
0000             45   _ACC            DATA 0xe0
0000             46   _ADC0ASAH       DATA 0xb6
0000             47   _ADC0ASAL       DATA 0xb5
0000             48   _ADC0ASCF       DATA 0xa1
0000             49   _ADC0ASCT       DATA 0xc7
0000             50   _ADC0CF0        DATA 0xbc
0000             51   _ADC0CF1        DATA 0xb9
0000             52   _ADC0CF2        DATA 0xdf
0000             53   _ADC0CN0        DATA 0xe8
0000             54   _ADC0CN1        DATA 0xb2
0000             55   _ADC0CN2        DATA 0xb3
0000             56   _ADC0GTH        DATA 0xc4
0000             57   _ADC0GTL        DATA 0xc3
0000             58   _ADC0H          DATA 0xbe
0000             59   _ADC0L          DATA 0xbd
0000             60   _ADC0LTH        DATA 0xc6
0000             61   _ADC0LTL        DATA 0xc5
0000             62   _ADC0MX         DATA 0xbb
0000             63   _B              DATA 0xf0
0000             64   _CKCON0         DATA 0x8e
0000             65   _CKCON1         DATA 0xa6
0000             66   _CLEN0          DATA 0xc6
0000             67   _CLIE0          DATA 0xc7
0000             68   _CLIF0          DATA 0xe8
0000             69   _CLKSEL         DATA 0xa9
0000             70   _CLOUT0         DATA 0xd1
0000             71   _CLU0CF         DATA 0xb1
0000             72   _CLU0FN         DATA 0xaf
0000             73   _CLU0MX         DATA 0x84
0000             74   _CLU1CF         DATA 0xb3
0000             75   _CLU1FN         DATA 0xb2
0000             76   _CLU1MX         DATA 0x85
0000             77   _CLU2CF         DATA 0xb6
0000             78   _CLU2FN         DATA 0xb5
0000             79   _CLU2MX         DATA 0x91
0000             80   _CLU3CF         DATA 0xbf
0000             81   _CLU3FN         DATA 0xbe
0000             82   _CLU3MX         DATA 0xae
0000             83   _CMP0CN0        DATA 0x9b
0000             84   _CMP0CN1        DATA 0x99
0000             85   _CMP0MD         DATA 0x9d
0000             86   _CMP0MX         DATA 0x9f
0000             87   _CMP1CN0        DATA 0xbf
0000             88   _CMP1CN1        DATA 0xac
0000             89   _CMP1MD         DATA 0xab
0000             90   _CMP1MX         DATA 0xaa
0000             91   _CRC0CN0        DATA 0xce
0000             92   _CRC0CN1        DATA 0x86
0000             93   _CRC0CNT        DATA 0xd3
0000             94   _CRC0DAT        DATA 0xcb
0000             95   _CRC0FLIP       DATA 0xcf
0000             96   _CRC0IN         DATA 0xca
0000             97   _CRC0ST         DATA 0xd2
0000             98   _DAC0CF0        DATA 0x91
0000             99   _DAC0CF1        DATA 0x92
0000            100   _DAC0H          DATA 0x85
0000            101   _DAC0L          DATA 0x84
0000            102   _DAC1CF0        DATA 0x93
0000            103   _DAC1CF1        DATA 0x94
0000            104   _DAC1H          DATA 0x8a
0000            105   _DAC1L          DATA 0x89
0000            106   _DAC2CF0        DATA 0x95
0000            107   _DAC2CF1        DATA 0x96
0000            108   _DAC2H          DATA 0x8c
0000            109   _DAC2L          DATA 0x8b
0000            110   _DAC3CF0        DATA 0x9a
0000            111   _DAC3CF1        DATA 0x9c
0000            112   _DAC3H          DATA 0x8e
0000            113   _DAC3L          DATA 0x8d
0000            114   _DACGCF0        DATA 0x88
0000            115   _DACGCF1        DATA 0x98
0000            116   _DACGCF2        DATA 0xa2
0000            117   _DERIVID        DATA 0xad
0000            118   _DEVICEID       DATA 0xb5
0000            119   _DPH            DATA 0x83
0000            120   _DPL            DATA 0x82
0000            121   _EIE1           DATA 0xe6
0000            122   _EIE2           DATA 0xf3
0000            123   _EIP1           DATA 0xbb
0000            124   _EIP1H          DATA 0xee
0000            125   _EIP2           DATA 0xed
0000            126   _EIP2H          DATA 0xf6
0000            127   _EMI0CN         DATA 0xe7
0000            128   _FLKEY          DATA 0xb7
0000            129   _HFO0CAL        DATA 0xc7
0000            130   _HFO1CAL        DATA 0xd6
0000            131   _HFOCN          DATA 0xef
0000            132   _I2C0ADM        DATA 0xff
0000            133   _I2C0CN0        DATA 0xba
0000            134   _I2C0DIN        DATA 0xbc
0000            135   _I2C0DOUT       DATA 0xbb
0000            136   _I2C0FCN0       DATA 0xad
0000            137   _I2C0FCN1       DATA 0xab
0000            138   _I2C0FCT        DATA 0xf5
0000            139   _I2C0SLAD       DATA 0xbd
0000            140   _I2C0STAT       DATA 0xb9
0000            141   _IE             DATA 0xa8
0000            142   _IP             DATA 0xb8
0000            143   _IPH            DATA 0xf2
0000            144   _IT01CF         DATA 0xe4
0000            145   _LFO0CN         DATA 0xb1
0000            146   _P0             DATA 0x80
0000            147   _P0MASK         DATA 0xfe
0000            148   _P0MAT          DATA 0xfd
0000            149   _P0MDIN         DATA 0xf1
0000            150   _P0MDOUT        DATA 0xa4
0000            151   _P0SKIP         DATA 0xd4
0000            152   _P1             DATA 0x90
0000            153   _P1MASK         DATA 0xee
0000            154   _P1MAT          DATA 0xed
0000            155   _P1MDIN         DATA 0xf2
0000            156   _P1MDOUT        DATA 0xa5
0000            157   _P1SKIP         DATA 0xd5
0000            158   _P2             DATA 0xa0
0000            159   _P2MASK         DATA 0xfc
0000            160   _P2MAT          DATA 0xfb
0000            161   _P2MDIN         DATA 0xf3
0000            162   _P2MDOUT        DATA 0xa6
0000            163   _P2SKIP         DATA 0xcc
0000            164   _P3             DATA 0xb0
0000            165   _P3MDIN         DATA 0xf4
0000            166   _P3MDOUT        DATA 0x9c
0000            167   _PCA0CENT       DATA 0x9e
0000            168   _PCA0CLR        DATA 0x9c
0000            169   _PCA0CN0        DATA 0xd8
0000            170   _PCA0CPH0       DATA 0xfc
0000            171   _PCA0CPH1       DATA 0xea
0000            172   _PCA0CPH2       DATA 0xec
0000            173   _PCA0CPH3       DATA 0xf5
0000            174   _PCA0CPH4       DATA 0x85
0000            175   _PCA0CPH5       DATA 0xde
0000            176   _PCA0CPL0       DATA 0xfb
0000            177   _PCA0CPL1       DATA 0xe9
0000            178   _PCA0CPL2       DATA 0xeb
0000            179   _PCA0CPL3       DATA 0xf4
0000            180   _PCA0CPL4       DATA 0x84
0000            181   _PCA0CPL5       DATA 0xdd
0000            182   _PCA0CPM0       DATA 0xda
0000            183   _PCA0CPM1       DATA 0xdb
0000            184   _PCA0CPM2       DATA 0xdc
0000            185   _PCA0CPM3       DATA 0xae
0000            186   _PCA0CPM4       DATA 0xaf
0000            187   _PCA0CPM5       DATA 0xcc
0000            188   _PCA0H          DATA 0xfa
0000            189   _PCA0L          DATA 0xf9
0000            190   _PCA0MD         DATA 0xd9
0000            191   _PCA0POL        DATA 0x96
0000            192   _PCA0PWM        DATA 0xf7
0000            193   _PCON0          DATA 0x87
0000            194   _PCON1          DATA 0xcd
0000            195   _PFE0CN         DATA 0xc1
0000            196   _PRTDRV         DATA 0xf6
0000            197   _PSCTL          DATA 0x8f
0000            198   _PSTAT0         DATA 0xaa
0000            199   _PSW            DATA 0xd0
0000            200   _REF0CN         DATA 0xd1
0000            201   _REG0CN         DATA 0xc9
0000            202   _REVID          DATA 0xb6
0000            203   _RSTSRC         DATA 0xef
0000            204   _SBCON1         DATA 0x94
0000            205   _SBRLH1         DATA 0x96
0000            206   _SBRLL1         DATA 0x95
0000            207   _SBUF           DATA 0x99
0000            208   _SBUF0          DATA 0x99
0000            209   _SBUF1          DATA 0x92
0000            210   _SCON           DATA 0x98
0000            211   _SCON0          DATA 0x98
0000            212   _SCON1          DATA 0xc8
0000            213   _SFRPAGE        DATA 0xa7
0000            214   _SFRPGCN        DATA 0xbc
0000            215   _SFRSTACK       DATA 0xd7
0000            216   _SMB0ADM        DATA 0xd6
0000            217   _SMB0ADR        DATA 0xd7
0000            218   _SMB0CF         DATA 0xc1
0000            219   _SMB0CN0        DATA 0xc0
0000            220   _SMB0DAT        DATA 0xc2
0000            221   _SMB0FCN0       DATA 0xc3
0000            222   _SMB0FCN1       DATA 0xc4
0000            223   _SMB0FCT        DATA 0xef
0000            224   _SMB0RXLN       DATA 0xc5
0000            225   _SMB0TC         DATA 0xac
0000            226   _SMOD1          DATA 0x93
0000            227   _SP             DATA 0x81
0000            228   _SPI0CFG        DATA 0xa1
0000            229   _SPI0CKR        DATA 0xa2
0000            230   _SPI0CN0        DATA 0xf8
0000            231   _SPI0DAT        DATA 0xa3
0000            232   _SPI0FCN0       DATA 0x9a
0000            233   _SPI0FCN1       DATA 0x9b
0000            234   _SPI0FCT        DATA 0xf7
0000            235   _SPI0PCF        DATA 0xdf
0000            236   _TCON           DATA 0x88
0000            237   _TH0            DATA 0x8c
0000            238   _TH1            DATA 0x8d
0000            239   _TL0            DATA 0x8a
0000            240   _TL1            DATA 0x8b
0000            241   _TMOD           DATA 0x89
0000            242   _TMR2CN0        DATA 0xc8
0000            243   _TMR2CN1        DATA 0xfd
0000            244   _TMR2H          DATA 0xcf
0000            245   _TMR2L          DATA 0xce
0000            246   _TMR2RLH        DATA 0xcb
0000            247   _TMR2RLL        DATA 0xca
0000            248   _TMR3CN0        DATA 0x91
0000            249   _TMR3CN1        DATA 0xfe
0000            250   _TMR3H          DATA 0x95
0000            251   _TMR3L          DATA 0x94
0000            252   _TMR3RLH        DATA 0x93
0000            253   _TMR3RLL        DATA 0x92
0000            254   _TMR4CN0        DATA 0x98
0000            255   _TMR4CN1        DATA 0xff
0000            256   _TMR4H          DATA 0xa5
0000            257   _TMR4L          DATA 0xa4
0000            258   _TMR4RLH        DATA 0xa3
0000            259   _TMR4RLL        DATA 0xa2
0000            260   _TMR5CN0        DATA 0xc0
0000            261   _TMR5CN1        DATA 0xf1
0000            262   _TMR5H          DATA 0xd5
0000            263   _TMR5L          DATA 0xd4
0000            264   _TMR5RLH        DATA 0xd3
0000            265   _TMR5RLL        DATA 0xd2
0000            266   _UART0PCF       DATA 0xd9
0000            267   _UART1FCN0      DATA 0x9d
0000            268   _UART1FCN1      DATA 0xd8
0000            269   _UART1FCT       DATA 0xfa
0000            270   _UART1LIN       DATA 0x9e
0000            271   _UART1PCF       DATA 0xda
0000            272   _VDM0CN         DATA 0xff
0000            273   _WDTCN          DATA 0x97
0000            274   _XBR0           DATA 0xe1
0000            275   _XBR1           DATA 0xe2
0000            276   _XBR2           DATA 0xe3
0000            277   _XOSC0CN        DATA 0x86
0000            278   _DPTR           DATA 0x8382
0000            279   _TMR2RL         DATA 0xcbca
0000            280   _TMR3RL         DATA 0x9392
0000            281   _TMR4RL         DATA 0xa3a2
0000            282   _TMR5RL         DATA 0xd3d2
0000            283   _TMR0           DATA 0x8c8a
0000            284   _TMR1           DATA 0x8d8b
0000            285   _TMR2           DATA 0xcfce
0000            286   _TMR3           DATA 0x9594
0000            287   _TMR4           DATA 0xa5a4
0000            288   _TMR5           DATA 0xd5d4
0000            289   _SBRL1          DATA 0x9695
0000            290   _PCA0           DATA 0xfaf9
0000            291   _PCA0CP0        DATA 0xfcfb
0000            292   _PCA0CP1        DATA 0xeae9
0000            293   _PCA0CP2        DATA 0xeceb
0000            294   _PCA0CP3        DATA 0xf5f4
0000            295   _PCA0CP4        DATA 0x8584
0000            296   _PCA0CP5        DATA 0xdedd
0000            297   _ADC0ASA        DATA 0xb6b5
0000            298   _ADC0GT         DATA 0xc4c3
0000            299   _ADC0           DATA 0xbebd
0000            300   _ADC0LT         DATA 0xc6c5
0000            301   _DAC0           DATA 0x8584
0000            302   _DAC1           DATA 0x8a89
0000            303   _DAC2           DATA 0x8c8b
0000            304   _DAC3           DATA 0x8e8d
0000            305   ;--------------------------------------------------------
0000            306   ; special function bits
0000            307   ;--------------------------------------------------------
0000            308   _ACC_0          BIT 0xe0
0000            309   _ACC_1          BIT 0xe1
0000            310   _ACC_2          BIT 0xe2
0000            311   _ACC_3          BIT 0xe3
0000            312   _ACC_4          BIT 0xe4
0000            313   _ACC_5          BIT 0xe5
0000            314   _ACC_6          BIT 0xe6
0000            315   _ACC_7          BIT 0xe7
0000            316   _TEMPE          BIT 0xe8
0000            317   _ADGN0          BIT 0xe9
0000            318   _ADGN1          BIT 0xea
0000            319   _ADWINT         BIT 0xeb
0000            320   _ADBUSY         BIT 0xec
0000            321   _ADINT          BIT 0xed
0000            322   _IPOEN          BIT 0xee
0000            323   _ADEN           BIT 0xef
0000            324   _B_0            BIT 0xf0
0000            325   _B_1            BIT 0xf1
0000            326   _B_2            BIT 0xf2
0000            327   _B_3            BIT 0xf3
0000            328   _B_4            BIT 0xf4
0000            329   _B_5            BIT 0xf5
0000            330   _B_6            BIT 0xf6
0000            331   _B_7            BIT 0xf7
0000            332   _C0FIF          BIT 0xe8
0000            333   _C0RIF          BIT 0xe9
0000            334   _C1FIF          BIT 0xea
0000            335   _C1RIF          BIT 0xeb
0000            336   _C2FIF          BIT 0xec
0000            337   _C2RIF          BIT 0xed
0000            338   _C3FIF          BIT 0xee
0000            339   _C3RIF          BIT 0xef
0000            340   _D1SRC0         BIT 0x88
0000            341   _D1SRC1         BIT 0x89
0000            342   _D1AMEN         BIT 0x8a
0000            343   _D01REFSL       BIT 0x8b
0000            344   _D3SRC0         BIT 0x8c
0000            345   _D3SRC1         BIT 0x8d
0000            346   _D3AMEN         BIT 0x8e
0000            347   _D23REFSL       BIT 0x8f
0000            348   _D0UDIS         BIT 0x98
0000            349   _D1UDIS         BIT 0x99
0000            350   _D2UDIS         BIT 0x9a
0000            351   _D3UDIS         BIT 0x9b
0000            352   _EX0            BIT 0xa8
0000            353   _ET0            BIT 0xa9
0000            354   _EX1            BIT 0xaa
0000            355   _ET1            BIT 0xab
0000            356   _ES0            BIT 0xac
0000            357   _ET2            BIT 0xad
0000            358   _ESPI0          BIT 0xae
0000            359   _EA             BIT 0xaf
0000            360   _PX0            BIT 0xb8
0000            361   _PT0            BIT 0xb9
0000            362   _PX1            BIT 0xba
0000            363   _PT1            BIT 0xbb
0000            364   _PS0            BIT 0xbc
0000            365   _PT2            BIT 0xbd
0000            366   _PSPI0          BIT 0xbe
0000            367   _P0_0           BIT 0x80
0000            368   _P0_1           BIT 0x81
0000            369   _P0_2           BIT 0x82
0000            370   _P0_3           BIT 0x83
0000            371   _P0_4           BIT 0x84
0000            372   _P0_5           BIT 0x85
0000            373   _P0_6           BIT 0x86
0000            374   _P0_7           BIT 0x87
0000            375   _P1_0           BIT 0x90
0000            376   _P1_1           BIT 0x91
0000            377   _P1_2           BIT 0x92
0000            378   _P1_3           BIT 0x93
0000            379   _P1_4           BIT 0x94
0000            380   _P1_5           BIT 0x95
0000            381   _P1_6           BIT 0x96
0000            382   _P1_7           BIT 0x97
0000            383   _P2_0           BIT 0xa0
0000            384   _P2_1           BIT 0xa1
0000            385   _P2_2           BIT 0xa2
0000            386   _P2_3           BIT 0xa3
0000            387   _P2_4           BIT 0xa4
0000            388   _P2_5           BIT 0xa5
0000            389   _P2_6           BIT 0xa6
0000            390   _P3_0           BIT 0xb0
0000            391   _P3_1           BIT 0xb1
0000            392   _P3_2           BIT 0xb2
0000            393   _P3_3           BIT 0xb3
0000            394   _P3_4           BIT 0xb4
0000            395   _P3_7           BIT 0xb7
0000            396   _CCF0           BIT 0xd8
0000            397   _CCF1           BIT 0xd9
0000            398   _CCF2           BIT 0xda
0000            399   _CCF3           BIT 0xdb
0000            400   _CCF4           BIT 0xdc
0000            401   _CCF5           BIT 0xdd
0000            402   _CR             BIT 0xde
0000            403   _CF             BIT 0xdf
0000            404   _PARITY         BIT 0xd0
0000            405   _F1             BIT 0xd1
0000            406   _OV             BIT 0xd2
0000            407   _RS0            BIT 0xd3
0000            408   _RS1            BIT 0xd4
0000            409   _F0             BIT 0xd5
0000            410   _AC             BIT 0xd6
0000            411   _CY             BIT 0xd7
0000            412   _RI             BIT 0x98
0000            413   _TI             BIT 0x99
0000            414   _RB8            BIT 0x9a
0000            415   _TB8            BIT 0x9b
0000            416   _REN            BIT 0x9c
0000            417   _CE             BIT 0x9d
0000            418   _SMODE          BIT 0x9e
0000            419   _RI1            BIT 0xc8
0000            420   _TI1            BIT 0xc9
0000            421   _RBX1           BIT 0xca
0000            422   _TBX1           BIT 0xcb
0000            423   _REN1           BIT 0xcc
0000            424   _PERR1          BIT 0xcd
0000            425   _OVR1           BIT 0xce
0000            426   _SI             BIT 0xc0
0000            427   _ACK            BIT 0xc1
0000            428   _ARBLOST        BIT 0xc2
0000            429   _ACKRQ          BIT 0xc3
0000            430   _STO            BIT 0xc4
0000            431   _STA            BIT 0xc5
0000            432   _TXMODE         BIT 0xc6
0000            433   _MASTER         BIT 0xc7
0000            434   _SPIEN          BIT 0xf8
0000            435   _TXNF           BIT 0xf9
0000            436   _NSSMD0         BIT 0xfa
0000            437   _NSSMD1         BIT 0xfb
0000            438   _RXOVRN         BIT 0xfc
0000            439   _MODF           BIT 0xfd
0000            440   _WCOL           BIT 0xfe
0000            441   _SPIF           BIT 0xff
0000            442   _IT0            BIT 0x88
0000            443   _IE0            BIT 0x89
0000            444   _IT1            BIT 0x8a
0000            445   _IE1            BIT 0x8b
0000            446   _TR0            BIT 0x8c
0000            447   _TF0            BIT 0x8d
0000            448   _TR1            BIT 0x8e
0000            449   _TF1            BIT 0x8f
0000            450   _T2XCLK0        BIT 0xc8
0000            451   _T2XCLK1        BIT 0xc9
0000            452   _TR2            BIT 0xca
0000            453   _T2SPLIT        BIT 0xcb
0000            454   _TF2CEN         BIT 0xcc
0000            455   _TF2LEN         BIT 0xcd
0000            456   _TF2L           BIT 0xce
0000            457   _TF2H           BIT 0xcf
0000            458   _T4XCLK0        BIT 0x98
0000            459   _T4XCLK1        BIT 0x99
0000            460   _TR4            BIT 0x9a
0000            461   _T4SPLIT        BIT 0x9b
0000            462   _TF4CEN         BIT 0x9c
0000            463   _TF4LEN         BIT 0x9d
0000            464   _TF4L           BIT 0x9e
0000            465   _TF4H           BIT 0x9f
0000            466   _T5XCLK0        BIT 0xc0
0000            467   _T5XCLK1        BIT 0xc1
0000            468   _TR5            BIT 0xc2
0000            469   _T5SPLIT        BIT 0xc3
0000            470   _TF5CEN         BIT 0xc4
0000            471   _TF5LEN         BIT 0xc5
0000            472   _TF5L           BIT 0xc6
0000            473   _TF5H           BIT 0xc7
0000            474   _RIE            BIT 0xd8
0000            475   _RXTO0          BIT 0xd9
0000            476   _RXTO1          BIT 0xda
0000            477   _RFRQ           BIT 0xdb
0000            478   _TIE            BIT 0xdc
0000            479   _TXHOLD         BIT 0xdd
0000            480   _TXNF1          BIT 0xde
0000            481   _TFRQ           BIT 0xdf
0000            482   ;--------------------------------------------------------
0000            483   ; overlayable register banks
0000            484   ;--------------------------------------------------------
0000            485            rbank0 segment data overlay
0000            486   ;--------------------------------------------------------
0000            487   ; internal ram data
0000            488   ;--------------------------------------------------------
0000            489            rseg R_DSEG
0000            490   _overflow_count:
0000            491            ds 1
0001            492   _LCDprint_PARM_2:
0001            493            ds 1
0002            494   _getsn_PARM_2:
0002            495            ds 2
0004            496   _getsn_buff_1_46:
0004            497            ds 3
0007            498   _getsn_sloc0_1_0:
0007            499            ds 2
0009            500   _main_sC_1_52:
0009            501            ds 4
000D            502   _main_measurements_1_52:
000D            503            ds 2
000F            504   _main_str_1_52:
000F            505            ds 11
001A            506   _main_boom_1_52:
001A            507            ds 16
002A            508   _main_test_num_1_52:
002A            509            ds 20
003E            510   _main_sloc0_1_0:
003E            511            ds 4
0042            512   ;--------------------------------------------------------
0042            513   ; overlayable items in internal ram 
0042            514   ;--------------------------------------------------------
0000            515            rseg    R_OSEG
0000            516   ;--------------------------------------------------------
0000            517   ; indirectly addressable internal ram data
0000            518   ;--------------------------------------------------------
0000            519            rseg R_ISEG
0000            520   ;--------------------------------------------------------
0000            521   ; absolute internal ram data
0000            522   ;--------------------------------------------------------
0000            523            DSEG
0000            524   ;--------------------------------------------------------
0000            525   ; bit data
0000            526   ;--------------------------------------------------------
0000            527            rseg R_BSEG
0000            528   _LCDprint_PARM_3:
0000            529            DBIT    1
0001            530   ;--------------------------------------------------------
0001            531   ; paged external ram data
0001            532   ;--------------------------------------------------------
0000            533            rseg R_PSEG
0000            534   ;--------------------------------------------------------
0000            535   ; external ram data
0000            536   ;--------------------------------------------------------
0000            537            rseg R_XSEG
0000            538   ;--------------------------------------------------------
0000            539   ; absolute external ram data
0000            540   ;--------------------------------------------------------
0000            541            XSEG
0000            542   ;--------------------------------------------------------
0000            543   ; external initialized ram data
0000            544   ;--------------------------------------------------------
0000            545            rseg R_IXSEG
0000            546            rseg R_HOME
0000            547            rseg R_GSINIT
0000            548            rseg R_CSEG
0000            549   ;--------------------------------------------------------
0000            550   ; Reset entry point and interrupt vectors
0000            551   ;--------------------------------------------------------
0000            552            CSEG at 0x0000
0000 020000     553            ljmp    _crt0
0003            554   ;--------------------------------------------------------
0003            555   ; global & static initialisations
0003            556   ;--------------------------------------------------------
0000            557            rseg R_HOME
0000            558            rseg R_GSINIT
0000            559            rseg R_GSINIT
0000            560   ;--------------------------------------------------------
0000            561   ; data variables initialization
0000            562   ;--------------------------------------------------------
0000            563            rseg R_DINIT
0000            564            ; The linker places a 'ret' at the end of segment R_DINIT.
0000            565   ;--------------------------------------------------------
0000            566   ; code
0000            567   ;--------------------------------------------------------
0000            568            rseg R_CSEG
0000            569   ;------------------------------------------------------------
0000            570   ;Allocation info for local variables in function '_c51_external_startup'
0000            571   ;------------------------------------------------------------
0000            572   ;------------------------------------------------------------
0000            573   ;        FreqEFM8.c:25: char _c51_external_startup (void)
0000            574   ;        -----------------------------------------
0000            575   ;         function _c51_external_startup
0000            576   ;        -----------------------------------------
0000            577   __c51_external_startup:
0000            578            using   0
0000            579   ;        FreqEFM8.c:28: SFRPAGE = 0x00;
0000 75A700     580            mov     _SFRPAGE,#0x00
0003            581   ;        FreqEFM8.c:29: WDTCN = 0xDE; //First key
0003 7597DE     582            mov     _WDTCN,#0xDE
0006            583   ;        FreqEFM8.c:30: WDTCN = 0xAD; //Second key
0006 7597AD     584            mov     _WDTCN,#0xAD
0009            585   ;        FreqEFM8.c:32: VDM0CN |= 0x80;
0009 43FF80     586            orl     _VDM0CN,#0x80
000C            587   ;        FreqEFM8.c:33: RSTSRC = 0x02;
000C 75EF02     588            mov     _RSTSRC,#0x02
000F            589   ;        FreqEFM8.c:40: SFRPAGE = 0x10;
000F 75A710     590            mov     _SFRPAGE,#0x10
0012            591   ;        FreqEFM8.c:41: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     592            mov     _PFE0CN,#0x20
0015            593   ;        FreqEFM8.c:42: SFRPAGE = 0x00;
0015 75A700     594            mov     _SFRPAGE,#0x00
0018            595   ;        FreqEFM8.c:63: CLKSEL = 0x00;
0018 75A900     596            mov     _CLKSEL,#0x00
001B            597   ;        FreqEFM8.c:64: CLKSEL = 0x00;
001B 75A900     598            mov     _CLKSEL,#0x00
001E            599   ;        FreqEFM8.c:65: while ((CLKSEL & 0x80) == 0);
001E            600   L002001?:
001E E5A9       601            mov     a,_CLKSEL
0020 30E7F0     602            jnb     acc.7,L002001?
0023            603   ;        FreqEFM8.c:66: CLKSEL = 0x03;
0023 75A903     604            mov     _CLKSEL,#0x03
0026            605   ;        FreqEFM8.c:67: CLKSEL = 0x03;
0026 75A903     606            mov     _CLKSEL,#0x03
0029            607   ;        FreqEFM8.c:68: while ((CLKSEL & 0x80) == 0);
0029            608   L002004?:
0029 E5A9       609            mov     a,_CLKSEL
002B 30E770     610            jnb     acc.7,L002004?
002E            611   ;        FreqEFM8.c:73: P0MDOUT |= 0x10; // Enable UART0 TX as push-pull output
002E 43A410     612            orl     _P0MDOUT,#0x10
0031            613   ;        FreqEFM8.c:74: XBR0     = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)                     
0031 75E101     614            mov     _XBR0,#0x01
0034            615   ;        FreqEFM8.c:75: XBR1     = 0X10; // Enable T0 on P0.0
0034 75E210     616            mov     _XBR1,#0x10
0037            617   ;        FreqEFM8.c:76: XBR2     = 0x40; // Enable crossbar and weak pull-ups
0037 75E340     618            mov     _XBR2,#0x40
003A            619   ;        FreqEFM8.c:82: SCON0 = 0x10;
003A 759810     620            mov     _SCON0,#0x10
003D            621   ;        FreqEFM8.c:83: CKCON0 |= 0b_0000_0000 ; // Timer 1 uses the system clock divided by 12.
003D 858E8E     622            mov     _CKCON0,_CKCON0
0040            623   ;        FreqEFM8.c:84: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
0040 758DE6     624            mov     _TH1,#0xE6
0043            625   ;        FreqEFM8.c:85: TL1 = TH1;      // Init Timer1
0043 858D8B     626            mov     _TL1,_TH1
0046            627   ;        FreqEFM8.c:86: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0046 53890F     628            anl     _TMOD,#0x0F
0049            629   ;        FreqEFM8.c:87: TMOD |=  0x20;                       
0049 438920     630            orl     _TMOD,#0x20
004C            631   ;        FreqEFM8.c:88: TR1 = 1; // START Timer1
004C D28E       632            setb    _TR1
004E            633   ;        FreqEFM8.c:89: TI = 1;  // Indicate TX0 ready
004E D299       634            setb    _TI
0050            635   ;        FreqEFM8.c:91: return 0;
0050 758200     636            mov     dpl,#0x00
0053 22         637            ret
0054            638   ;------------------------------------------------------------
0054            639   ;Allocation info for local variables in function 'Timer3us'
0054            640   ;------------------------------------------------------------
0054            641   ;us                        Allocated to registers r2 
0054            642   ;i                         Allocated to registers r3 
0054            643   ;------------------------------------------------------------
0054            644   ;        FreqEFM8.c:95: void Timer3us(unsigned char us)
0054            645   ;        -----------------------------------------
0054            646   ;         function Timer3us
0054            647   ;        -----------------------------------------
0054            648   _Timer3us:
0054 AA82       649            mov     r2,dpl
0056            650   ;        FreqEFM8.c:100: CKCON0|=0b_0100_0000;
0056 438E40     651            orl     _CKCON0,#0x40
0059            652   ;        FreqEFM8.c:102: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0059 7592B8     653            mov     _TMR3RL,#0xB8
005C 7593FF     654            mov     (_TMR3RL >> 8),#0xFF
005F            655   ;        FreqEFM8.c:103: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
005F 859294     656            mov     _TMR3,_TMR3RL
0062 859395     657            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
0065            658   ;        FreqEFM8.c:105: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
0065 759104     659            mov     _TMR3CN0,#0x04
0068            660   ;        FreqEFM8.c:106: for (i = 0; i < us; i++)       // Count <us> overflows
0068 7B00       661            mov     r3,#0x00
006A            662   L003006?:
006A C3         663            clr     c
006B EB         664            mov     a,r3
006C 9A         665            subb    a,r2
006D 5000       666            jnc     L003009?
006F            667   ;        FreqEFM8.c:108: while (!(TMR3CN0 & 0x80));  // Wait for overflow
006F            668   L003001?:
006F E591       669            mov     a,_TMR3CN0
0071 30E770     670            jnb     acc.7,L003001?
0074            671   ;        FreqEFM8.c:109: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
0074 53917F     672            anl     _TMR3CN0,#0x7F
0077            673   ;        FreqEFM8.c:110: if (TF0)
0077            674   ;        FreqEFM8.c:112: TF0=0;
0077 108DB0     675            jbc     _TF0,L003019?
007A 8000       676            sjmp    L003008?
007C            677   L003019?:
007C            678   ;        FreqEFM8.c:113: overflow_count++;
007C 05C0       679            inc     _overflow_count
007E            680   L003008?:
007E            681   ;        FreqEFM8.c:106: for (i = 0; i < us; i++)       // Count <us> overflows
007E 0B         682            inc     r3
007F 8000       683            sjmp    L003006?
0081            684   L003009?:
0081            685   ;        FreqEFM8.c:116: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
0081 759100     686            mov     _TMR3CN0,#0x00
0084 22         687            ret
0085            688   ;------------------------------------------------------------
0085            689   ;Allocation info for local variables in function 'waitms'
0085            690   ;------------------------------------------------------------
0085            691   ;ms                        Allocated to registers r2 r3 
0085            692   ;j                         Allocated to registers r2 r3 
0085            693   ;------------------------------------------------------------
0085            694   ;        FreqEFM8.c:119: void waitms (unsigned int ms)
0085            695   ;        -----------------------------------------
0085            696   ;         function waitms
0085            697   ;        -----------------------------------------
0085            698   _waitms:
0085 AA82       699            mov     r2,dpl
0087 AB83       700            mov     r3,dph
0089            701   ;        FreqEFM8.c:122: for(j=ms; j!=0; j--)
0089            702   L004001?:
0089 BA00B0     703            cjne    r2,#0x00,L004010?
008C BB00B0     704            cjne    r3,#0x00,L004010?
008F 22         705            ret
0090            706   L004010?:
0090            707   ;        FreqEFM8.c:124: Timer3us(249);
0090 7582F9     708            mov     dpl,#0xF9
0093 C002       709            push    ar2
0095 C003       710            push    ar3
0097 120000     711            lcall   _Timer3us
009A            712   ;        FreqEFM8.c:125: Timer3us(249);
009A 7582F9     713            mov     dpl,#0xF9
009D 120000     714            lcall   _Timer3us
00A0            715   ;        FreqEFM8.c:126: Timer3us(249);
00A0 7582F9     716            mov     dpl,#0xF9
00A3 120000     717            lcall   _Timer3us
00A6            718   ;        FreqEFM8.c:127: Timer3us(250);
00A6 7582FA     719            mov     dpl,#0xFA
00A9 120000     720            lcall   _Timer3us
00AC D003       721            pop     ar3
00AE D002       722            pop     ar2
00B0            723   ;        FreqEFM8.c:122: for(j=ms; j!=0; j--)
00B0 1A         724            dec     r2
00B1 BAFFF0     725            cjne    r2,#0xff,L004011?
00B4 1B         726            dec     r3
00B5            727   L004011?:
00B5 8000       728            sjmp    L004001?
00B7            729   ;------------------------------------------------------------
00B7            730   ;Allocation info for local variables in function 'TIMER0_Init'
00B7            731   ;------------------------------------------------------------
00B7            732   ;------------------------------------------------------------
00B7            733   ;        FreqEFM8.c:131: void TIMER0_Init(void)
00B7            734   ;        -----------------------------------------
00B7            735   ;         function TIMER0_Init
00B7            736   ;        -----------------------------------------
00B7            737   _TIMER0_Init:
00B7            738   ;        FreqEFM8.c:133: TMOD&=0b_1111_0000; // Set the bits of Timer/Counter 0 to zero
00B7 5389F0     739            anl     _TMOD,#0xF0
00BA            740   ;        FreqEFM8.c:134: TMOD|=0b_0000_0101; // Timer/Counter 0 used as a 16-bit counter
00BA 438905     741            orl     _TMOD,#0x05
00BD            742   ;        FreqEFM8.c:135: TR0=0; // Stop Timer/Counter 0
00BD C28C       743            clr     _TR0
00BF 22         744            ret
00C0            745   ;------------------------------------------------------------
00C0            746   ;Allocation info for local variables in function 'LCD_pulse'
00C0            747   ;------------------------------------------------------------
00C0            748   ;------------------------------------------------------------
00C0            749   ;        FreqEFM8.c:138: void LCD_pulse (void)
00C0            750   ;        -----------------------------------------
00C0            751   ;         function LCD_pulse
00C0            752   ;        -----------------------------------------
00C0            753   _LCD_pulse:
00C0            754   ;        FreqEFM8.c:140: LCD_E=1;
00C0 D2A0       755            setb    _P2_0
00C2            756   ;        FreqEFM8.c:141: Timer3us(40);
00C2 758228     757            mov     dpl,#0x28
00C5 120000     758            lcall   _Timer3us
00C8            759   ;        FreqEFM8.c:142: LCD_E=0;
00C8 C2A0       760            clr     _P2_0
00CA 22         761            ret
00CB            762   ;------------------------------------------------------------
00CB            763   ;Allocation info for local variables in function 'LCD_byte'
00CB            764   ;------------------------------------------------------------
00CB            765   ;x                         Allocated to registers r2 
00CB            766   ;------------------------------------------------------------
00CB            767   ;        FreqEFM8.c:145: void LCD_byte (unsigned char x)
00CB            768   ;        -----------------------------------------
00CB            769   ;         function LCD_byte
00CB            770   ;        -----------------------------------------
00CB            771   _LCD_byte:
00CB AA82       772            mov     r2,dpl
00CD            773   ;        FreqEFM8.c:148: ACC=x; //Send high nible
00CD 8AE0       774            mov     _ACC,r2
00CF            775   ;        FreqEFM8.c:149: LCD_D7=ACC_7;
00CF A2E7       776            mov     c,_ACC_7
00D1 9290       777            mov     _P1_0,c
00D3            778   ;        FreqEFM8.c:150: LCD_D6=ACC_6;
00D3 A2E6       779            mov     c,_ACC_6
00D5 9291       780            mov     _P1_1,c
00D7            781   ;        FreqEFM8.c:151: LCD_D5=ACC_5;
00D7 A2E5       782            mov     c,_ACC_5
00D9 9292       783            mov     _P1_2,c
00DB            784   ;        FreqEFM8.c:152: LCD_D4=ACC_4;
00DB A2E4       785            mov     c,_ACC_4
00DD 9293       786            mov     _P1_3,c
00DF            787   ;        FreqEFM8.c:153: LCD_pulse();
00DF C002       788            push    ar2
00E1 120000     789            lcall   _LCD_pulse
00E4            790   ;        FreqEFM8.c:154: Timer3us(40);
00E4 758228     791            mov     dpl,#0x28
00E7 120000     792            lcall   _Timer3us
00EA D002       793            pop     ar2
00EC            794   ;        FreqEFM8.c:155: ACC=x; //Send low nible
00EC 8AE0       795            mov     _ACC,r2
00EE            796   ;        FreqEFM8.c:156: LCD_D7=ACC_3;
00EE A2E3       797            mov     c,_ACC_3
00F0 9290       798            mov     _P1_0,c
00F2            799   ;        FreqEFM8.c:157: LCD_D6=ACC_2;
00F2 A2E2       800            mov     c,_ACC_2
00F4 9291       801            mov     _P1_1,c
00F6            802   ;        FreqEFM8.c:158: LCD_D5=ACC_1;
00F6 A2E1       803            mov     c,_ACC_1
00F8 9292       804            mov     _P1_2,c
00FA            805   ;        FreqEFM8.c:159: LCD_D4=ACC_0;
00FA A2E0       806            mov     c,_ACC_0
00FC 9293       807            mov     _P1_3,c
00FE            808   ;        FreqEFM8.c:160: LCD_pulse();
00FE 020000     809            ljmp    _LCD_pulse
0101            810   ;------------------------------------------------------------
0101            811   ;Allocation info for local variables in function 'WriteData'
0101            812   ;------------------------------------------------------------
0101            813   ;x                         Allocated to registers r2 
0101            814   ;------------------------------------------------------------
0101            815   ;        FreqEFM8.c:163: void WriteData (unsigned char x)
0101            816   ;        -----------------------------------------
0101            817   ;         function WriteData
0101            818   ;        -----------------------------------------
0101            819   _WriteData:
0101 AA82       820            mov     r2,dpl
0103            821   ;        FreqEFM8.c:165: LCD_RS=1;
0103 D297       822            setb    _P1_7
0105            823   ;        FreqEFM8.c:166: LCD_byte(x);
0105 8A82       824            mov     dpl,r2
0107 120000     825            lcall   _LCD_byte
010A            826   ;        FreqEFM8.c:167: waitms(2);
010A 900002     827            mov     dptr,#0x0002
010D 020000     828            ljmp    _waitms
0110            829   ;------------------------------------------------------------
0110            830   ;Allocation info for local variables in function 'WriteCommand'
0110            831   ;------------------------------------------------------------
0110            832   ;x                         Allocated to registers r2 
0110            833   ;------------------------------------------------------------
0110            834   ;        FreqEFM8.c:170: void WriteCommand (unsigned char x)
0110            835   ;        -----------------------------------------
0110            836   ;         function WriteCommand
0110            837   ;        -----------------------------------------
0110            838   _WriteCommand:
0110 AA82       839            mov     r2,dpl
0112            840   ;        FreqEFM8.c:172: LCD_RS=0;
0112 C297       841            clr     _P1_7
0114            842   ;        FreqEFM8.c:173: LCD_byte(x);
0114 8A82       843            mov     dpl,r2
0116 120000     844            lcall   _LCD_byte
0119            845   ;        FreqEFM8.c:174: waitms(5);
0119 900005     846            mov     dptr,#0x0005
011C 020000     847            ljmp    _waitms
011F            848   ;------------------------------------------------------------
011F            849   ;Allocation info for local variables in function 'LCD_4BIT'
011F            850   ;------------------------------------------------------------
011F            851   ;------------------------------------------------------------
011F            852   ;        FreqEFM8.c:177: void LCD_4BIT (void)
011F            853   ;        -----------------------------------------
011F            854   ;         function LCD_4BIT
011F            855   ;        -----------------------------------------
011F            856   _LCD_4BIT:
011F            857   ;        FreqEFM8.c:179: LCD_E=0; // Resting state of LCD's enable is zero
011F C2A0       858            clr     _P2_0
0121            859   ;        FreqEFM8.c:181: waitms(20);
0121 900014     860            mov     dptr,#0x0014
0124 120000     861            lcall   _waitms
0127            862   ;        FreqEFM8.c:183: WriteCommand(0x33);
0127 758233     863            mov     dpl,#0x33
012A 120000     864            lcall   _WriteCommand
012D            865   ;        FreqEFM8.c:184: WriteCommand(0x33);
012D 758233     866            mov     dpl,#0x33
0130 120000     867            lcall   _WriteCommand
0133            868   ;        FreqEFM8.c:185: WriteCommand(0x32); // Change to 4-bit mode
0133 758232     869            mov     dpl,#0x32
0136 120000     870            lcall   _WriteCommand
0139            871   ;        FreqEFM8.c:188: WriteCommand(0x28);
0139 758228     872            mov     dpl,#0x28
013C 120000     873            lcall   _WriteCommand
013F            874   ;        FreqEFM8.c:189: WriteCommand(0x0c);
013F 75820C     875            mov     dpl,#0x0C
0142 120000     876            lcall   _WriteCommand
0145            877   ;        FreqEFM8.c:190: WriteCommand(0x01); // Clear screen command (takes some time)
0145 758201     878            mov     dpl,#0x01
0148 120000     879            lcall   _WriteCommand
014B            880   ;        FreqEFM8.c:191: waitms(20); // Wait for clear screen command to finsih.
014B 900014     881            mov     dptr,#0x0014
014E 020000     882            ljmp    _waitms
0151            883   ;------------------------------------------------------------
0151            884   ;Allocation info for local variables in function 'LCDprint'
0151            885   ;------------------------------------------------------------
0151            886   ;line                      Allocated with name '_LCDprint_PARM_2'
0151            887   ;string                    Allocated to registers r2 r3 r4 
0151            888   ;j                         Allocated to registers r5 r6 
0151            889   ;------------------------------------------------------------
0151            890   ;        FreqEFM8.c:194: void LCDprint(char * string, unsigned char line, bit clear)
0151            891   ;        -----------------------------------------
0151            892   ;         function LCDprint
0151            893   ;        -----------------------------------------
0151            894   _LCDprint:
0151 AA82       895            mov     r2,dpl
0153 AB83       896            mov     r3,dph
0155 ACF0       897            mov     r4,b
0157            898   ;        FreqEFM8.c:198: WriteCommand(line==2?0xc0:0x80);
0157 7402       899            mov     a,#0x02
0159 B58070     900            cjne    a,_LCDprint_PARM_2,L011013?
015C 7DC0       901            mov     r5,#0xC0
015E 8000       902            sjmp    L011014?
0160            903   L011013?:
0160 7D80       904            mov     r5,#0x80
0162            905   L011014?:
0162 8D82       906            mov     dpl,r5
0164 C002       907            push    ar2
0166 C003       908            push    ar3
0168 C004       909            push    ar4
016A 120000     910            lcall   _WriteCommand
016D            911   ;        FreqEFM8.c:199: waitms(5);
016D 900005     912            mov     dptr,#0x0005
0170 120000     913            lcall   _waitms
0173 D004       914            pop     ar4
0175 D003       915            pop     ar3
0177 D002       916            pop     ar2
0179            917   ;        FreqEFM8.c:200: for(j=0; string[j]!=0; j++)     WriteData(string[j]);// Write the message
0179 7D00       918            mov     r5,#0x00
017B 7E00       919            mov     r6,#0x00
017D            920   L011003?:
017D ED         921            mov     a,r5
017E 2A         922            add     a,r2
017F FF         923            mov     r7,a
0180 EE         924            mov     a,r6
0181 3B         925            addc    a,r3
0182 F8         926            mov     r0,a
0183 8C01       927            mov     ar1,r4
0185 8F82       928            mov     dpl,r7
0187 8883       929            mov     dph,r0
0189 89F0       930            mov     b,r1
018B 120000     931            lcall   __gptrget
018E FF         932            mov     r7,a
018F 6000       933            jz      L011006?
0191 8F82       934            mov     dpl,r7
0193 C002       935            push    ar2
0195 C003       936            push    ar3
0197 C004       937            push    ar4
0199 C005       938            push    ar5
019B C006       939            push    ar6
019D 120000     940            lcall   _WriteData
01A0 D006       941            pop     ar6
01A2 D005       942            pop     ar5
01A4 D004       943            pop     ar4
01A6 D003       944            pop     ar3
01A8 D002       945            pop     ar2
01AA 0D         946            inc     r5
01AB BD00F0     947            cjne    r5,#0x00,L011003?
01AE 0E         948            inc     r6
01AF 8000       949            sjmp    L011003?
01B1            950   L011006?:
01B1            951   ;        FreqEFM8.c:201: if(clear) for(; j<CHARS_PER_LINE; j++) WriteData(' '); // Clear the rest of the line
01B1 30F0B0     952            jnb     _LCDprint_PARM_3,L011011?
01B4 8D02       953            mov     ar2,r5
01B6 8E03       954            mov     ar3,r6
01B8            955   L011007?:
01B8 C3         956            clr     c
01B9 EA         957            mov     a,r2
01BA 9410       958            subb    a,#0x10
01BC EB         959            mov     a,r3
01BD 6480       960            xrl     a,#0x80
01BF 9480       961            subb    a,#0x80
01C1 5000       962            jnc     L011011?
01C3 758220     963            mov     dpl,#0x20
01C6 C002       964            push    ar2
01C8 C003       965            push    ar3
01CA 120000     966            lcall   _WriteData
01CD D003       967            pop     ar3
01CF D002       968            pop     ar2
01D1 0A         969            inc     r2
01D2 BA00F0     970            cjne    r2,#0x00,L011007?
01D5 0B         971            inc     r3
01D6 8000       972            sjmp    L011007?
01D8            973   L011011?:
01D8 22         974            ret
01D9            975   ;------------------------------------------------------------
01D9            976   ;Allocation info for local variables in function 'getsn'
01D9            977   ;------------------------------------------------------------
01D9            978   ;len                       Allocated with name '_getsn_PARM_2'
01D9            979   ;buff                      Allocated with name '_getsn_buff_1_46'
01D9            980   ;j                         Allocated with name '_getsn_sloc0_1_0'
01D9            981   ;c                         Allocated to registers r3 
01D9            982   ;sloc0                     Allocated with name '_getsn_sloc0_1_0'
01D9            983   ;------------------------------------------------------------
01D9            984   ;        FreqEFM8.c:204: int getsn (char * buff, int len)
01D9            985   ;        -----------------------------------------
01D9            986   ;         function getsn
01D9            987   ;        -----------------------------------------
01D9            988   _getsn:
01D9 858280     989            mov     _getsn_buff_1_46,dpl
01DC 858381     990            mov     (_getsn_buff_1_46 + 1),dph
01DF 85F082     991            mov     (_getsn_buff_1_46 + 2),b
01E2            992   ;        FreqEFM8.c:209: for(j=0; j<(len-1); j++)
01E2 E4         993            clr     a
01E3 F5D0       994            mov     _getsn_sloc0_1_0,a
01E5 F5D1       995            mov     (_getsn_sloc0_1_0 + 1),a
01E7 E530       996            mov     a,_getsn_PARM_2
01E9 24FF       997            add     a,#0xff
01EB FF         998            mov     r7,a
01EC E531       999            mov     a,(_getsn_PARM_2 + 1)
01EE 34FF      1000            addc    a,#0xff
01F0 F8        1001            mov     r0,a
01F1 7900      1002            mov     r1,#0x00
01F3 7A00      1003            mov     r2,#0x00
01F5           1004   L012005?:
01F5 C3        1005            clr     c
01F6 E9        1006            mov     a,r1
01F7 9F        1007            subb    a,r7
01F8 EA        1008            mov     a,r2
01F9 6480      1009            xrl     a,#0x80
01FB 88F0      1010            mov     b,r0
01FD 63F080    1011            xrl     b,#0x80
0200 95F0      1012            subb    a,b
0202 5000      1013            jnc     L012008?
0204           1014   ;        FreqEFM8.c:211: c=getchar();
0204 C002      1015            push    ar2
0206 C007      1016            push    ar7
0208 C000      1017            push    ar0
020A C001      1018            push    ar1
020C 120000    1019            lcall   _getchar
020F AB82      1020            mov     r3,dpl
0211 D001      1021            pop     ar1
0213 D000      1022            pop     ar0
0215 D007      1023            pop     ar7
0217 D002      1024            pop     ar2
0219           1025   ;        FreqEFM8.c:212: if ( (c=='\n') || (c=='\r') )
0219 BB0AF0    1026            cjne    r3,#0x0A,L012015?
021C 8000      1027            sjmp    L012001?
021E           1028   L012015?:
021E BB0D70    1029            cjne    r3,#0x0D,L012002?
0221           1030   L012001?:
0221           1031   ;        FreqEFM8.c:214: buff[j]=0;
0221 E5D0      1032            mov     a,_getsn_sloc0_1_0
0223 2580      1033            add     a,_getsn_buff_1_46
0225 FC        1034            mov     r4,a
0226 E5D1      1035            mov     a,(_getsn_sloc0_1_0 + 1)
0228 3581      1036            addc    a,(_getsn_buff_1_46 + 1)
022A FD        1037            mov     r5,a
022B AE82      1038            mov     r6,(_getsn_buff_1_46 + 2)
022D 8C82      1039            mov     dpl,r4
022F 8D83      1040            mov     dph,r5
0231 8EF0      1041            mov     b,r6
0233 E4        1042            clr     a
0234 120000    1043            lcall   __gptrput
0237           1044   ;        FreqEFM8.c:215: return j;
0237 85D082    1045            mov     dpl,_getsn_sloc0_1_0
023A 85D183    1046            mov     dph,(_getsn_sloc0_1_0 + 1)
023D 22        1047            ret
023E           1048   L012002?:
023E           1049   ;        FreqEFM8.c:219: buff[j]=c;
023E E9        1050            mov     a,r1
023F 2580      1051            add     a,_getsn_buff_1_46
0241 FC        1052            mov     r4,a
0242 EA        1053            mov     a,r2
0243 3581      1054            addc    a,(_getsn_buff_1_46 + 1)
0245 FD        1055            mov     r5,a
0246 AE82      1056            mov     r6,(_getsn_buff_1_46 + 2)
0248 8C82      1057            mov     dpl,r4
024A 8D83      1058            mov     dph,r5
024C 8EF0      1059            mov     b,r6
024E EB        1060            mov     a,r3
024F 120000    1061            lcall   __gptrput
0252           1062   ;        FreqEFM8.c:209: for(j=0; j<(len-1); j++)
0252 09        1063            inc     r1
0253 B900F0    1064            cjne    r1,#0x00,L012018?
0256 0A        1065            inc     r2
0257           1066   L012018?:
0257 89D0      1067            mov     _getsn_sloc0_1_0,r1
0259 8AD1      1068            mov     (_getsn_sloc0_1_0 + 1),r2
025B 8000      1069            sjmp    L012005?
025D           1070   L012008?:
025D           1071   ;        FreqEFM8.c:222: buff[j]=0;
025D E5D0      1072            mov     a,_getsn_sloc0_1_0
025F 2580      1073            add     a,_getsn_buff_1_46
0261 FA        1074            mov     r2,a
0262 E5D1      1075            mov     a,(_getsn_sloc0_1_0 + 1)
0264 3581      1076            addc    a,(_getsn_buff_1_46 + 1)
0266 FB        1077            mov     r3,a
0267 AC82      1078            mov     r4,(_getsn_buff_1_46 + 2)
0269 8A82      1079            mov     dpl,r2
026B 8B83      1080            mov     dph,r3
026D 8CF0      1081            mov     b,r4
026F E4        1082            clr     a
0270 120000    1083            lcall   __gptrput
0273           1084   ;        FreqEFM8.c:223: return len;
0273 853082    1085            mov     dpl,_getsn_PARM_2
0276 853183    1086            mov     dph,(_getsn_PARM_2 + 1)
0279 22        1087            ret
027A           1088   ;------------------------------------------------------------
027A           1089   ;Allocation info for local variables in function 'main'
027A           1090   ;------------------------------------------------------------
027A           1091   ;F                         Allocated to registers 
027A           1092   ;C                         Allocated to registers r2 r3 r4 r5 
027A           1093   ;sC                        Allocated with name '_main_sC_1_52'
027A           1094   ;measurements              Allocated with name '_main_measurements_1_52'
027A           1095   ;str                       Allocated with name '_main_str_1_52'
027A           1096   ;boom                      Allocated with name '_main_boom_1_52'
027A           1097   ;test_num                  Allocated with name '_main_test_num_1_52'
027A           1098   ;sloc0                     Allocated with name '_main_sloc0_1_0'
027A           1099   ;------------------------------------------------------------
027A           1100   ;        FreqEFM8.c:228: void main (void) 
027A           1101   ;        -----------------------------------------
027A           1102   ;         function main
027A           1103   ;        -----------------------------------------
027A           1104   _main:
027A           1105   ;        FreqEFM8.c:232: unsigned long sC = 0;
027A           1106   ;        FreqEFM8.c:233: unsigned int measurements = 0;
027A E4        1107            clr     a
027B F510      1108            mov     _main_sC_1_52,a
027D F511      1109            mov     (_main_sC_1_52 + 1),a
027F F512      1110            mov     (_main_sC_1_52 + 2),a
0281 F513      1111            mov     (_main_sC_1_52 + 3),a
0283 F560      1112            mov     _main_measurements_1_52,a
0285 F561      1113            mov     (_main_measurements_1_52 + 1),a
0287           1114   ;        FreqEFM8.c:234: char str[] = "Boom meter";
0287 75A042    1115            mov     _main_str_1_52,#0x42
028A 75A16F    1116            mov     (_main_str_1_52 + 0x0001),#0x6F
028D 75A26F    1117            mov     (_main_str_1_52 + 0x0002),#0x6F
0290 75A36D    1118            mov     (_main_str_1_52 + 0x0003),#0x6D
0293 75A420    1119            mov     (_main_str_1_52 + 0x0004),#0x20
0296 75A56D    1120            mov     (_main_str_1_52 + 0x0005),#0x6D
0299 75A665    1121            mov     (_main_str_1_52 + 0x0006),#0x65
029C 75A774    1122            mov     (_main_str_1_52 + 0x0007),#0x74
029F 75A865    1123            mov     (_main_str_1_52 + 0x0008),#0x65
02A2 75A972    1124            mov     (_main_str_1_52 + 0x0009),#0x72
02A5 75AA00    1125            mov     (_main_str_1_52 + 0x000a),#0x00
02A8           1126   ;        FreqEFM8.c:235: char boom[]= "BOOM OUTOFRANGE";
02A8 75E042    1127            mov     _main_boom_1_52,#0x42
02AB 75E14F    1128            mov     (_main_boom_1_52 + 0x0001),#0x4F
02AE 75E24F    1129            mov     (_main_boom_1_52 + 0x0002),#0x4F
02B1 75E34D    1130            mov     (_main_boom_1_52 + 0x0003),#0x4D
02B4 75E420    1131            mov     (_main_boom_1_52 + 0x0004),#0x20
02B7 75E54F    1132            mov     (_main_boom_1_52 + 0x0005),#0x4F
02BA 75E655    1133            mov     (_main_boom_1_52 + 0x0006),#0x55
02BD 75E754    1134            mov     (_main_boom_1_52 + 0x0007),#0x54
02C0 75E84F    1135            mov     (_main_boom_1_52 + 0x0008),#0x4F
02C3 75E946    1136            mov     (_main_boom_1_52 + 0x0009),#0x46
02C6 75EA52    1137            mov     (_main_boom_1_52 + 0x000a),#0x52
02C9 75EB41    1138            mov     (_main_boom_1_52 + 0x000b),#0x41
02CC 75EC4E    1139            mov     (_main_boom_1_52 + 0x000c),#0x4E
02CF 75ED47    1140            mov     (_main_boom_1_52 + 0x000d),#0x47
02D2 75EE45    1141            mov     (_main_boom_1_52 + 0x000e),#0x45
02D5 75EF00    1142            mov     (_main_boom_1_52 + 0x000f),#0x00
02D8           1143   ;        FreqEFM8.c:237: TIMER0_Init();
02D8 120000    1144            lcall   _TIMER0_Init
02DB           1145   ;        FreqEFM8.c:239: waitms(500); // Give PuTTY a chance to start.
02DB 9001F4    1146            mov     dptr,#0x01F4
02DE 120000    1147            lcall   _waitms
02E1           1148   ;        FreqEFM8.c:240: printf("\x1b[2J"); // Clear screen using ANSI escape sequence.
02E1 7430      1149            mov     a,#__str_2
02E3 C0E0      1150            push    acc
02E5 74C9      1151            mov     a,#(__str_2 >> 8)
02E7 C0E0      1152            push    acc
02E9 7480      1153            mov     a,#0x80
02EB C0E0      1154            push    acc
02ED 120000    1155            lcall   _printf
02F0 1581      1156            dec     sp
02F2 1581      1157            dec     sp
02F4 1581      1158            dec     sp
02F6           1159   ;        FreqEFM8.c:245: __FILE__, __DATE__, __TIME__);
02F6           1160   ;        FreqEFM8.c:244: "Compiled: %s, %s\n\n",
02F6 74F0      1161            mov     a,#__str_6
02F8 C0E0      1162            push    acc
02FA 74C9      1163            mov     a,#(__str_6 >> 8)
02FC C0E0      1164            push    acc
02FE 7480      1165            mov     a,#0x80
0300 C0E0      1166            push    acc
0302 7430      1167            mov     a,#__str_5
0304 C0E0      1168            push    acc
0306 74CA      1169            mov     a,#(__str_5 >> 8)
0308 C0E0      1170            push    acc
030A 7480      1171            mov     a,#0x80
030C C0E0      1172            push    acc
030E 7470      1173            mov     a,#__str_4
0310 C0E0      1174            push    acc
0312 74CA      1175            mov     a,#(__str_4 >> 8)
0314 C0E0      1176            push    acc
0316 7480      1177            mov     a,#0x80
0318 C0E0      1178            push    acc
031A 74B0      1179            mov     a,#__str_3
031C C0E0      1180            push    acc
031E 74CA      1181            mov     a,#(__str_3 >> 8)
0320 C0E0      1182            push    acc
0322 7480      1183            mov     a,#0x80
0324 C0E0      1184            push    acc
0326 120000    1185            lcall   _printf
0329 E581      1186            mov     a,sp
032B 24F4      1187            add     a,#0xf4
032D F581      1188            mov     sp,a
032F           1189   ;        FreqEFM8.c:249: LCD_4BIT();
032F 120000    1190            lcall   _LCD_4BIT
0332           1191   ;        FreqEFM8.c:250: LCDprint(str, 1, 1);
0332 758001    1192            mov     _LCDprint_PARM_2,#0x01
0335 D2F0      1193            setb    _LCDprint_PARM_3
0337 90C0A0    1194            mov     dptr,#_main_str_1_52
033A 75F040    1195            mov     b,#0x40
033D 120000    1196            lcall   _LCDprint
0340           1197   ;        FreqEFM8.c:254: while(1)
0340           1198   L013007?:
0340           1199   ;        FreqEFM8.c:256: TL0=0;
0340 758A00    1200            mov     _TL0,#0x00
0343           1201   ;        FreqEFM8.c:257: TH0=0;
0343 758C00    1202            mov     _TH0,#0x00
0346           1203   ;        FreqEFM8.c:258: overflow_count=0;
0346 75C000    1204            mov     _overflow_count,#0x00
0349           1205   ;        FreqEFM8.c:259: TF0=0;
0349 C28D      1206            clr     _TF0
034B           1207   ;        FreqEFM8.c:260: TR0=1; // Start Timer/Counter 0
034B D28C      1208            setb    _TR0
034D           1209   ;        FreqEFM8.c:261: waitms(1000);
034D 9003E8    1210            mov     dptr,#0x03E8
0350 120000    1211            lcall   _waitms
0353           1212   ;        FreqEFM8.c:262: TR0=0; // Stop Timer/Counter 0
0353 C28C      1213            clr     _TR0
0355           1214   ;        FreqEFM8.c:263: F=(overflow_count*0x10000L+TH0*0x100L+TL0);
0355 AAC0      1215            mov     r2,_overflow_count
0357 7B00      1216            mov     r3,#0x00
0359 8B73      1217            mov     (_main_sloc0_1_0 + 3),r3
035B 8A72      1218            mov     (_main_sloc0_1_0 + 2),r2
035D 757100    1219            mov     (_main_sloc0_1_0 + 1),#0x00
0360 757000    1220            mov     _main_sloc0_1_0,#0x00
0363 AE8C      1221            mov     r6,_TH0
0365 7F00      1222            mov     r7,#0x00
0367 7A00      1223            mov     r2,#0x00
0369 8A03      1224            mov     ar3,r2
036B 8F02      1225            mov     ar2,r7
036D 8E07      1226            mov     ar7,r6
036F 7E00      1227            mov     r6,#0x00
0371 EE        1228            mov     a,r6
0372 2570      1229            add     a,_main_sloc0_1_0
0374 F570      1230            mov     _main_sloc0_1_0,a
0376 EF        1231            mov     a,r7
0377 3571      1232            addc    a,(_main_sloc0_1_0 + 1)
0379 F571      1233            mov     (_main_sloc0_1_0 + 1),a
037B EA        1234            mov     a,r2
037C 3572      1235            addc    a,(_main_sloc0_1_0 + 2)
037E F572      1236            mov     (_main_sloc0_1_0 + 2),a
0380 EB        1237            mov     a,r3
0381 3573      1238            addc    a,(_main_sloc0_1_0 + 3)
0383 F573      1239            mov     (_main_sloc0_1_0 + 3),a
0385 AC8A      1240            mov     r4,_TL0
0387 E4        1241            clr     a
0388 FD        1242            mov     r5,a
0389 33        1243            rlc     a
038A 95E0      1244            subb    a,acc
038C FA        1245            mov     r2,a
038D FB        1246            mov     r3,a
038E EC        1247            mov     a,r4
038F 2570      1248            add     a,_main_sloc0_1_0
0391 F500      1249            mov     __mullong_PARM_2,a
0393 ED        1250            mov     a,r5
0394 3571      1251            addc    a,(_main_sloc0_1_0 + 1)
0396 F501      1252            mov     (__mullong_PARM_2 + 1),a
0398 EA        1253            mov     a,r2
0399 3572      1254            addc    a,(_main_sloc0_1_0 + 2)
039B F502      1255            mov     (__mullong_PARM_2 + 2),a
039D EB        1256            mov     a,r3
039E 3573      1257            addc    a,(_main_sloc0_1_0 + 3)
03A0 F503      1258            mov     (__mullong_PARM_2 + 3),a
03A2           1259   ;        FreqEFM8.c:264: C = 1000*1000000* 1.44 / (3*3900*F);
03A2 902DB4    1260            mov     dptr,#0x2DB4
03A5 E4        1261            clr     a
03A6 F5F0      1262            mov     b,a
03A8 120000    1263            lcall   __mullong
03AB 120000    1264            lcall   ___ulong2fs
03AE AA82      1265            mov     r2,dpl
03B0 AB83      1266            mov     r3,dph
03B2 ACF0      1267            mov     r4,b
03B4 FD        1268            mov     r5,a
03B5 C002      1269            push    ar2
03B7 C003      1270            push    ar3
03B9 C004      1271            push    ar4
03BB C005      1272            push    ar5
03BD 90A950    1273            mov     dptr,#0xA950
03C0 75F0AB    1274            mov     b,#0xAB
03C3 744E      1275            mov     a,#0x4E
03C5 120000    1276            lcall   ___fsdiv
03C8 AA82      1277            mov     r2,dpl
03CA AB83      1278            mov     r3,dph
03CC ACF0      1279            mov     r4,b
03CE FD        1280            mov     r5,a
03CF E581      1281            mov     a,sp
03D1 24FC      1282            add     a,#0xfc
03D3 F581      1283            mov     sp,a
03D5 8A82      1284            mov     dpl,r2
03D7 8B83      1285            mov     dph,r3
03D9 8CF0      1286            mov     b,r4
03DB ED        1287            mov     a,r5
03DC 120000    1288            lcall   ___fs2ulong
03DF AA82      1289            mov     r2,dpl
03E1 AB83      1290            mov     r3,dph
03E3 ACF0      1291            mov     r4,b
03E5 FD        1292            mov     r5,a
03E6           1293   ;        FreqEFM8.c:265: sC += C;
03E6 EA        1294            mov     a,r2
03E7 2510      1295            add     a,_main_sC_1_52
03E9 F510      1296            mov     _main_sC_1_52,a
03EB EB        1297            mov     a,r3
03EC 3511      1298            addc    a,(_main_sC_1_52 + 1)
03EE F511      1299            mov     (_main_sC_1_52 + 1),a
03F0 EC        1300            mov     a,r4
03F1 3512      1301            addc    a,(_main_sC_1_52 + 2)
03F3 F512      1302            mov     (_main_sC_1_52 + 2),a
03F5 ED        1303            mov     a,r5
03F6 3513      1304            addc    a,(_main_sC_1_52 + 3)
03F8 F513      1305            mov     (_main_sC_1_52 + 3),a
03FA           1306   ;        FreqEFM8.c:266: measurements++;
03FA 0560      1307            inc     _main_measurements_1_52
03FC E4        1308            clr     a
03FD B56080    1309            cjne    a,_main_measurements_1_52,L013014?
0400 0561      1310            inc     (_main_measurements_1_52 + 1)
0402           1311   L013014?:
0402           1312   ;        FreqEFM8.c:268: sprintf(test_num, "C=%lu nF", (sC / measurements));
0402 856000    1313            mov     __divulong_PARM_2,_main_measurements_1_52
0405 856101    1314            mov     (__divulong_PARM_2 + 1),(_main_measurements_1_52 + 1)
0408 750200    1315            mov     (__divulong_PARM_2 + 2),#0x00
040B 750300    1316            mov     (__divulong_PARM_2 + 3),#0x00
040E 851082    1317            mov     dpl,_main_sC_1_52
0411 851183    1318            mov     dph,(_main_sC_1_52 + 1)
0414 8512F0    1319            mov     b,(_main_sC_1_52 + 2)
0417 E513      1320            mov     a,(_main_sC_1_52 + 3)
0419 120000    1321            lcall   __divulong
041C AA82      1322            mov     r2,dpl
041E AB83      1323            mov     r3,dph
0420 ACF0      1324            mov     r4,b
0422 FD        1325            mov     r5,a
0423 C002      1326            push    ar2
0425 C003      1327            push    ar3
0427 C004      1328            push    ar4
0429 C005      1329            push    ar5
042B 7450      1330            mov     a,#__str_7
042D C0E0      1331            push    acc
042F 74CD      1332            mov     a,#(__str_7 >> 8)
0431 C0E0      1333            push    acc
0433 7480      1334            mov     a,#0x80
0435 C0E0      1335            push    acc
0437 7430      1336            mov     a,#_main_test_num_1_52
0439 C0E0      1337            push    acc
043B 74C1      1338            mov     a,#(_main_test_num_1_52 >> 8)
043D C0E0      1339            push    acc
043F 7440      1340            mov     a,#0x40
0441 C0E0      1341            push    acc
0443 120000    1342            lcall   _sprintf
0446 E581      1343            mov     a,sp
0448 24F6      1344            add     a,#0xf6
044A F581      1345            mov     sp,a
044C           1346   ;        FreqEFM8.c:269: if (measurements >= 20)
044C C3        1347            clr     c
044D E560      1348            mov     a,_main_measurements_1_52
044F 9414      1349            subb    a,#0x14
0451 E561      1350            mov     a,(_main_measurements_1_52 + 1)
0453 9400      1351            subb    a,#0x00
0455 4000      1352            jc      L013002?
0457           1353   ;        FreqEFM8.c:271: sC /= 2;
0457 E513      1354            mov     a,(_main_sC_1_52 + 3)
0459 C3        1355            clr     c
045A 13        1356            rrc     a
045B F513      1357            mov     (_main_sC_1_52 + 3),a
045D E512      1358            mov     a,(_main_sC_1_52 + 2)
045F 13        1359            rrc     a
0460 F512      1360            mov     (_main_sC_1_52 + 2),a
0462 E511      1361            mov     a,(_main_sC_1_52 + 1)
0464 13        1362            rrc     a
0465 F511      1363            mov     (_main_sC_1_52 + 1),a
0467 E510      1364            mov     a,_main_sC_1_52
0469 13        1365            rrc     a
046A F510      1366            mov     _main_sC_1_52,a
046C           1367   ;        FreqEFM8.c:272: measurements /= 2;
046C E561      1368            mov     a,(_main_measurements_1_52 + 1)
046E C3        1369            clr     c
046F 13        1370            rrc     a
0470 C560      1371            xch     a,_main_measurements_1_52
0472 13        1372            rrc     a
0473 C560      1373            xch     a,_main_measurements_1_52
0475 F561      1374            mov     (_main_measurements_1_52 + 1),a
0477           1375   L013002?:
0477           1376   ;        FreqEFM8.c:275: if (sC / measurements >= 25000)
0477 856000    1377            mov     __divulong_PARM_2,_main_measurements_1_52
047A 856101    1378            mov     (__divulong_PARM_2 + 1),(_main_measurements_1_52 + 1)
047D 750200    1379            mov     (__divulong_PARM_2 + 2),#0x00
0480 750300    1380            mov     (__divulong_PARM_2 + 3),#0x00
0483 851082    1381            mov     dpl,_main_sC_1_52
0486 851183    1382            mov     dph,(_main_sC_1_52 + 1)
0489 8512F0    1383            mov     b,(_main_sC_1_52 + 2)
048C E513      1384            mov     a,(_main_sC_1_52 + 3)
048E 120000    1385            lcall   __divulong
0491 AA82      1386            mov     r2,dpl
0493 AB83      1387            mov     r3,dph
0495 ACF0      1388            mov     r4,b
0497 FD        1389            mov     r5,a
0498 C3        1390            clr     c
0499 EA        1391            mov     a,r2
049A 94A8      1392            subb    a,#0xA8
049C EB        1393            mov     a,r3
049D 9461      1394            subb    a,#0x61
049F EC        1395            mov     a,r4
04A0 9400      1396            subb    a,#0x00
04A2 ED        1397            mov     a,r5
04A3 9400      1398            subb    a,#0x00
04A5 4000      1399            jc      L013004?
04A7           1400   ;        FreqEFM8.c:277: LCDprint(boom, 1, 1);
04A7 758001    1401            mov     _LCDprint_PARM_2,#0x01
04AA D2F0      1402            setb    _LCDprint_PARM_3
04AC 90C0E0    1403            mov     dptr,#_main_boom_1_52
04AF 75F040    1404            mov     b,#0x40
04B2 120000    1405            lcall   _LCDprint
04B5           1406   ;        FreqEFM8.c:278: LCDprint(boom, 2, 1);
04B5 758002    1407            mov     _LCDprint_PARM_2,#0x02
04B8 D2F0      1408            setb    _LCDprint_PARM_3
04BA 90C0E0    1409            mov     dptr,#_main_boom_1_52
04BD 75F040    1410            mov     b,#0x40
04C0 120000    1411            lcall   _LCDprint
04C3 020000    1412            ljmp    L013007?
04C6           1413   L013004?:
04C6           1414   ;        FreqEFM8.c:282: LCDprint(str, 1, 1);
04C6 758001    1415            mov     _LCDprint_PARM_2,#0x01
04C9 D2F0      1416            setb    _LCDprint_PARM_3
04CB 90C0A0    1417            mov     dptr,#_main_str_1_52
04CE 75F040    1418            mov     b,#0x40
04D1 120000    1419            lcall   _LCDprint
04D4           1420   ;        FreqEFM8.c:283: LCDprint(test_num, 2, 1);
04D4 758002    1421            mov     _LCDprint_PARM_2,#0x02
04D7 D2F0      1422            setb    _LCDprint_PARM_3
04D9 90C130    1423            mov     dptr,#_main_test_num_1_52
04DC 75F040    1424            mov     b,#0x40
04DF 120000    1425            lcall   _LCDprint
04E2 020000    1426            ljmp    L013007?
04E5           1427            rseg R_CSEG
04E5           1428   
0000           1429            rseg R_XINIT
0000           1430   
0000           1431            rseg R_CONST
0000           1432   __str_2:
0000 1B        1433            db 0x1B
0001 5B324A    1434            db '[2J'
0004 00        1435            db 0x00
0005           1436   __str_3:
0005 45464D38  1437            db 'EFM8 Frequency measurement using Timer/Counter 0.'
     20467265
     7175656E
     6379206D
     65617375
     72656D65
     6E742075
     73696E67
     2054696D
     65722F43
     6F756E74
     65722030
     2E
0036 0A        1438            db 0x0A
0037 46696C65  1439            db 'File: %s'
     3A202573
003F 0A        1440            db 0x0A
0040 43        1441            db 'C'
0041 6F6D7069  1442            db 'ompiled: %s, %s'
     6C65643A
     2025732C
     202573
0050 0A        1443            db 0x0A
0051 0A        1444            db 0x0A
0052 00        1445            db 0x00
0053           1446   __str_4:
0053 46726571  1447            db 'FreqEFM8.c'
     45464D38
     2E63
005D 00        1448            db 0x00
005E           1449   __str_5:
005E 41707220  1450            db 'Apr  1 2024'
     20312032
     303234
0069 00        1451            db 0x00
006A           1452   __str_6:
006A 31333A32  1453            db '13:27:02'
     373A3032
0072 00        1454            db 0x00
0073           1455   __str_7:
0073 433D256C  1456            db 'C=%lu nF'
     75206E46
007B 00        1457            db 0x00
007C           1458   
0003           1459            CSEG
0003           1460   
0003           1461   end
